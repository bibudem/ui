@mixin _focus-state {
  // Show focus styles on keyboard focus.
  outline: var(--md-focus-ring-width, 3px) solid currentColor;
  outline-offset: 3px;
  border-radius: 99999px;
}

// Show focus styles on keyboard focus.
@mixin _keyboard-focus-state {
  outline: var(--md-focus-ring-width, 3px) solid currentColor;
  outline-offset: 3px;
  border-radius: 99999px;
}

// Hide focus styles if they're not needed, for example,
// when an element receives focus via the mouse.
@mixin _mouse-focus-state {
  outline: 0;
}

@mixin _set-keyboard-focus($selector) {
  @if $selector == ':host' {
    @at-root {
      :host(:focus:not([disabled])),
      :host(:focus-visible) {
        @include _keyboard-focus-state;
      }

      :host(:focus:not(:focus-visible)) {
        @include _mouse-focus-state;
      }
    }
  } @else {
    &:focus:not([disabled]),
    &:focus-visible {
      @include _focus-state;
    }

    &:focus:not(:focus-visible) {
      @include _mouse-focus-state;
    }
  }
  // // Show focus styles on keyboard focus.
  // outline: 2px solid #bde4ff;
  // outline-offset: 3px;
}

@mixin focus {
  @if (length(&) != 1) {
    @error "Selector muse be a simple one";
  } @else {
    $selector: #{&};

    position: relative;

    &::after {
      content: '';

      // center vertically and horizontally
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);

      // Minimum click area to meet [WCAG Success Criterion 2.5.5 Target Size (Enhanced)](https://www.w3.org/TR/WCAG22/#target-size-enhanced)
      min-height: 44px;
      min-width: 44px;
      width: 100%;
      height: 100%;
    }

    @include _set-keyboard-focus($selector);
  }
}
