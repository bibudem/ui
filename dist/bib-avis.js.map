{"version":3,"file":"bib-avis.js","sources":["../src/components/bib-avis/bib-avis.js","../src/icons/close_FILL0_wght400_GRAD0_opsz24.svg?raw","../src/utils/dom.js"],"sourcesContent":["import { Task } from '@lit/task'\nimport { LitElement, html, css, unsafeCSS } from 'lit'\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'\nimport { openDB } from 'idb'\nimport { nodeIsEmpty } from '@/utils/dom.js'\nimport { addToGlobalBib } from '@/utils/bib.js'\nimport { DB_NAME, DB_STORE_NAME, DB_VERSION } from './constants.js'\nimport closeIcon from '../../icons/close_FILL0_wght400_GRAD0_opsz24.svg?raw'\nimport bibAvisStyles from './bib-avis.scss?inline'\n\n/**\n * Génère un hash SHA-256 pour un objet donné\n * @param {Object} obj - L'objet à hasher\n * @returns {Promise<string>} Le hash hexadécimal de l'objet\n */\nasync function hash(obj) {\n  const utf8 = new TextEncoder().encode(JSON.stringify(obj))\n  const hashBuffer = await crypto.subtle.digest('SHA-256', utf8)\n  const hashArray = Array.from(new Uint8Array(hashBuffer))\n  const hashHex = hashArray\n    .map((bytes) => bytes.toString(16).padStart(2, '0'))\n    .join('')\n  return hashHex\n}\n\n/**\n * Composant d'affichage d'avis pour les Bibliothèques de l'Université de Montréal\n * \n * Ce composant Web personnalisé permet d'afficher des avis provenant d'un service distant\n * ou du contenu local. Il gère la persistance des avis via IndexedDB pour éviter\n * d'afficher plusieurs fois le même avis à l'utilisateur.\n * \n * @element bib-avis\n * \n * @fires bib:show - Émis avant l'affichage d'un avis. Peut être annulé.\n * @fires bib:hide - Émis avant le masquage d'un avis. Peut être annulé.\n * \n * @slot - Contenu HTML local à afficher comme avis (optionnel)\n * \n * @example\n * \n * <!-- Avis depuis un service distant -->\n * <bib-avis service=\"https://avis.bib.umontreal.ca/api/avis\" bouton-fermer></bib-avis>\n * \n * <!-- Avis avec contenu local -->\n * <bib-avis bouton-fermer>\n *   <p>Ceci est un avis local important.</p>\n * </bib-avis>\n * \n * \n * @cssprop --bib-avis-background-color - Couleur de fond de l'avis\n * @cssprop --bib-avis-text-color - Couleur du texte de l'avis\n * @cssprop --bib-avis-border-color - Couleur de la bordure de l'avis\n */\nexport class BibAvis extends LitElement {\n  /**\n   * Propriétés réactives du composant\n   */\n  static properties = {\n    /**\n     * URL du service d'avis distant\n     * @type {string}\n     * @default 'https://avis.bib.umontreal.ca/api/avis'\n     */\n    service: {\n      type: String\n    },\n    /**\n     * Affiche ou masque le bouton de fermeture\n     * @type {boolean}\n     * @default false\n     */\n    boutonFermer: {\n      type: Boolean,\n      attribute: 'bouton-fermer'\n    },\n    /**\n     * Message d'avis actuel (état interne)\n     * @type {Object|null}\n     * @private\n     */\n    message: {\n      state: true\n    }\n  }\n\n  static styles = [\n    css`${unsafeCSS(bibAvisStyles)}`,\n    css`\n    `\n  ]\n\n  /**\n   * Données de l'avis actuel\n   * @type {Object|null}\n   * @private\n   */\n  #avis\n\n  /**\n   * Instance de la base de données IndexedDB\n   * @type {IDBDatabase|null}\n   * @private\n   */\n  #db\n\n  /**\n   * Constructeur du composant BibAvis\n   * Initialise les propriétés par défaut\n   */\n  constructor() {\n    super()\n\n    this.#avis = null\n    this.service = 'https://avis.bib.umontreal.ca/api/avis'\n    this.boutonFermer = false\n  }\n\n  /**\n   * Crée et retourne une tâche pour récupérer les avis\n   * @returns {Task} Tâche de récupération des avis\n   * @private\n   */\n  #getAvis() {\n    return new Task(this, {\n      task: async ([service], { signal }) => {\n\n        const doGetAvis = new Promise(async (resolve, reject) => {\n          if (!nodeIsEmpty(this)) {\n            return resolve({ isLocal: true, message: this.innerHTML.split(/<!--\\?lit\\$\\d+\\$-->/).join('') })\n          }\n\n          const url = new URL(service)\n          const response = await fetch(url, {\n            headers: {\n              \"Accept\": \"application/json\",\n            },\n            signal\n          })\n            .catch(console.error)\n\n          if (!response.ok) {\n            return reject(new Error(response.status))\n          }\n\n          const { success, data } = await response.json()\n\n          if (success) {\n            if (data === null) {\n            return resolve({ isLocal: false, message: null })\n          }\n            const { id, message } = data\n            return resolve({ isLocal: false, id, message })\n          }\n\n          reject(new Error('The service responded with a message with a prop succes at', success))\n        })\n\n        try {\n          const data = await doGetAvis\n          await this.#processAvis(data)\n        } catch (error) {\n          console.error('[#getAvis] An error occured: %o', error)\n        }\n\n        return data\n      },\n      args: () => [this.service]\n    })\n  }\n\n  /**\n   * Traite les données d'avis récupérées et gère la persistance\n   * @param {Object} avis - Données de l'avis à traiter\n   * @param {string} avis.message - Contenu HTML du message\n   * @param {string} [avis.id] - Id unique du message\n   * @param {boolean} [avis.isLocal] - Indique si l'avis provient du contenu local\n   * @returns {Promise<void>}\n   * @private\n   */\n  async #processAvis(avis) {\n    // Vérifier si avis est null ou n'a pas de message\n    if (!avis || !avis.message) {\n      this.setMessage(null)\n      return\n    }\n    const { id, message } = avis\n    if (!message) {\n      this.setMessage(null)\n      return\n    }\n\n    if (!('indexedDB' in window)) {\n      this.setMessage(message)\n      return\n    }\n\n    const db = this.#db = await openDB(DB_NAME, DB_VERSION, {\n      upgrade(db) {\n        // Checks if the object store exists:\n        if (!db.objectStoreNames.contains(DB_STORE_NAME)) {\n          db.createObjectStore(DB_STORE_NAME)\n        }\n      }\n    })\n\n    try {\n    // Vérifier que id existe avant de l'utiliser\n    const storageId = id || await hash(avis)\n    \n    const storedAvis = await db.get(DB_STORE_NAME, storageId)\n    if (storedAvis) {\n      if (!storedAvis.hidden) {\n        // Utiliser storageId au lieu de id\n        await db.delete(DB_STORE_NAME, storageId)\n        this.#show({...storedAvis, id: storageId})\n      }\n    } else {\n      this.#show({...avis, id: storageId})\n    }\n  } catch (error) {\n    console.error('Something went wrong with indexedDB: %o', error)\n    this.setMessage(message)\n  }\n  }\n\n  /**\n   * Affiche l'avis et le sauvegarde en base de données\n   * @param {Object} avis - Données de l'avis à afficher\n   * @returns {Promise<void>}\n   * @private\n   */\n  async #show(message) {\n  const canceled = !this.dispatchEvent(new CustomEvent('bib:show', { bubbles: true, cancelable: true }))\n\n  if (canceled) {\n    return\n  }\n\n  this.setMessage(message)\n\n  // Vérifier que message.id existe avant de l'utiliser\n  if (this.#db && message.id) {\n    await this.#db.put(DB_STORE_NAME, { ...message, hidden: false }, message.id)\n  }\n}\n\n  /**\n   * Masque l'avis et met à jour son statut en base de données\n   * @returns {Promise<void>}\n   * @private\n   */\n  async #hide() {\n\n    const canceled = !this.dispatchEvent(new CustomEvent('bib:hide', { bubbles: true, cancelable: true }))\n\n    if (canceled) {\n      return\n    }\n\n    const { id } = this.#avis\n    await this.#db.put(DB_STORE_NAME, { ...this.#avis, hidden: true }, id)\n    this.#avis = null\n    this.requestUpdate()\n  }\n\n  /**\n   * Méthode du cycle de vie appelée lorsque l'élément est connecté au DOM\n   * Initialise la récupération des avis\n   */\n  connectedCallback() {\n    super.connectedCallback()\n    this.#getAvis()\n  }\n\n  /**\n   * Gestionnaire de clic pour le bouton de fermeture\n   * @private\n   */\n  #onBtnFermerClick() {\n    this.#hide()\n  }\n\n  /**\n   * Rendu conditionnel du bouton de fermeture\n   * @returns {TemplateResult|null} Template du bouton ou null\n   * @private\n   */\n  _renderBoutonFermer() {\n    return this.boutonFermer ? html`<button class=\"btn-close\" aria-label=\"Fermer\" @click=\"${this.#onBtnFermerClick}\">${unsafeHTML(closeIcon)}</button>` : null\n  }\n\n  /**\n   * Méthode de rendu du composant\n   * @returns {TemplateResult|null} Template HTML de l'avis ou null si aucun message\n   */\n  render() {\n    return this.#avis?.message ? html`<aside class=\"container\"><div class=\"inner\"><div class=\"message\">${unsafeHTML(this.#avis.message)}</div>${this._renderBoutonFermer()}</div></aside>` : null\n  }\n\n  /**\n   * Définit le message d'avis à afficher\n   * @param {string|Object|null} message - Message à afficher ou objet contenant le message\n   * @public\n   */\n  setMessage(message) {\n    this.#avis = typeof message === 'string' ? { message, isLocal: true } : message\n  }\n}\n\nif (!window.customElements.get('bib-avis')) {\n  window.customElements.define('bib-avis', BibAvis)\n}\n\naddToGlobalBib('avis', {})","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24\\\" viewBox=\\\"0 -960 960 960\\\" width=\\\"24\\\"><path d=\\\"M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 28-11t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z\\\"/></svg>\"","export function nodeIsEmpty(node) {\n  return node.textContent.trim() === \"\"\n}"],"names":["BibAvis","LitElement","super","this","avis","db","service","boutonFermer","connectedCallback","html","unsafeHTML","message","_renderBoutonFermer","isLocal","getAvis","Task","task","async","signal","doGetAvis","Promise","resolve","reject","textContent","trim","innerHTML","split","join","url","URL","response","fetch","headers","Accept","catch","console","error","ok","Error","status","success","data","json","id","args","processAvis","setMessage","window","openDB","DB_NAME","DB_VERSION","objectStoreNames","contains","DB_STORE_NAME","createObjectStore","storageId","obj","utf8","TextEncoder","encode","JSON","stringify","hashBuffer","crypto","subtle","digest","Array","from","Uint8Array","map","bytes","toString","padStart","storedAvis","get","hidden","delete","show","dispatchEvent","CustomEvent","bubbles","cancelable","put","hide","requestUpdate","onBtnFermerClick","static","type","String","Boolean","attribute","state","css","unsafeCSS","customElements","define","addToGlobalBib"],"mappings":"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"}