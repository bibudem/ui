{"version":3,"file":"bib-avis.js","sources":["../src/components/bib-avis/bib-avis.js","../src/icons/close_FILL0_wght400_GRAD0_opsz24.svg?raw","../src/utils/dom.js"],"sourcesContent":["import { Task } from '@lit/task'\nimport { LitElement, html, css, unsafeCSS } from 'lit'\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'\nimport { openDB } from 'idb'\nimport { nodeIsEmpty } from '@/utils/dom.js'\nimport { addToGlobalBib } from '@/utils/bib.js'\nimport { DB_NAME, DB_STORE_NAME, DB_VERSION } from './constants.js'\nimport closeIcon from '../../icons/close_FILL0_wght400_GRAD0_opsz24.svg?raw'\nimport bibAvisStyles from './bib-avis.scss?inline'\n\n/**\n * Génère un hash SHA-256 pour un objet donné\n * @param {Object} obj - L'objet à hasher\n * @returns {Promise<string>} Le hash hexadécimal de l'objet\n */\nasync function hash(obj) {\n  const utf8 = new TextEncoder().encode(JSON.stringify(obj))\n  const hashBuffer = await crypto.subtle.digest('SHA-256', utf8)\n  const hashArray = Array.from(new Uint8Array(hashBuffer))\n  const hashHex = hashArray\n    .map((bytes) => bytes.toString(16).padStart(2, '0'))\n    .join('')\n  return hashHex\n}\n\n/**\n * Composant d'affichage d'avis pour les Bibliothèques de l'Université de Montréal\n * \n * Ce composant Web personnalisé permet d'afficher des avis provenant d'un service distant\n * ou du contenu local. Il gère la persistance des avis via IndexedDB pour éviter\n * d'afficher plusieurs fois le même avis à l'utilisateur.\n * \n * @element bib-avis\n * \n * @fires bib:show - Émis avant l'affichage d'un avis. Peut être annulé.\n * @fires bib:hide - Émis avant le masquage d'un avis. Peut être annulé.\n * \n * @slot - Contenu HTML local à afficher comme avis (optionnel)\n * \n * @example\n * \n * <!-- Avis depuis un service distant -->\n * <bib-avis service=\"https://avis.bib.umontreal.ca/api/avis\" bouton-fermer></bib-avis>\n * \n * <!-- Avis avec contenu local -->\n * <bib-avis bouton-fermer>\n *   <p>Ceci est un avis local important.</p>\n * </bib-avis>\n * \n * \n * @cssprop --bib-avis-background-color - Couleur de fond de l'avis\n * @cssprop --bib-avis-text-color - Couleur du texte de l'avis\n * @cssprop --bib-avis-border-color - Couleur de la bordure de l'avis\n */\nexport class BibAvis extends LitElement {\n  /**\n   * Propriétés réactives du composant\n   */\n  static properties = {\n    /**\n     * URL du service d'avis distant\n     * @type {string}\n     * @default 'https://avis.bib.umontreal.ca/api/avis'\n     */\n    service: {\n      type: String\n    },\n    /**\n     * Affiche ou masque le bouton de fermeture\n     * @type {boolean}\n     * @default false\n     */\n    boutonFermer: {\n      type: Boolean,\n      attribute: 'bouton-fermer'\n    },\n    /**\n     * Message d'avis actuel (état interne)\n     * @type {Object|null}\n     * @private\n     */\n    message: {\n      state: true\n    }\n  }\n\n  static styles = [\n    css`${unsafeCSS(bibAvisStyles)}`,\n    css`\n    `\n  ]\n\n  /**\n   * Données de l'avis actuel\n   * @type {Object|null}\n   * @private\n   */\n  #avis\n\n  /**\n   * Instance de la base de données IndexedDB\n   * @type {IDBDatabase|null}\n   * @private\n   */\n  #db\n\n  /**\n   * Constructeur du composant BibAvis\n   * Initialise les propriétés par défaut\n   */\n  constructor() {\n    super()\n\n    this.#avis = null\n    this.service = 'https://avis.bib.umontreal.ca/api/avis'\n    this.boutonFermer = false\n  }\n\n  /**\n   * Crée et retourne une tâche pour récupérer les avis\n   * @returns {Task} Tâche de récupération des avis\n   * @private\n   */\n  #getAvis() {\n    return new Task(this, {\n      task: async ([service], { signal }) => {\n\n        const doGetAvis = new Promise(async (resolve, reject) => {\n          if (!nodeIsEmpty(this)) {\n            return resolve({ isLocal: true, message: this.innerHTML.split(/<!--\\?lit\\$\\d+\\$-->/).join('') })\n          }\n\n          const url = new URL(service)\n          const response = await fetch(url, {\n            headers: {\n              \"Accept\": \"application/json\",\n            },\n            signal\n          })\n            .catch(console.error)\n\n          if (!response.ok) {\n            return reject(new Error(response.status))\n          }\n\n          const { success, data } = await response.json()\n\n          if (success) {\n            const { id, message } = data\n            return resolve({ isLocal: false, id, message })\n          }\n\n          reject(new Error('The service responded with a message with a prop succes at', success))\n        })\n\n        try {\n          const data = await doGetAvis\n          await this.#processAvis(data)\n        } catch (error) {\n          console.error('[#getAvis] An error occured: %o', error)\n        }\n\n        return data\n      },\n      args: () => [this.service]\n    })\n  }\n\n  /**\n   * Traite les données d'avis récupérées et gère la persistance\n   * @param {Object} avis - Données de l'avis à traiter\n   * @param {string} avis.message - Contenu HTML du message\n   * @param {string} [avis.id] - Id unique du message\n   * @param {boolean} [avis.isLocal] - Indique si l'avis provient du contenu local\n   * @returns {Promise<void>}\n   * @private\n   */\n  async #processAvis(avis) {\n    const { id, message } = avis\n    if (!message) {\n      this.setMessage(null)\n      return\n    }\n\n    if (!('indexedDB' in window)) {\n      this.setMessage(message)\n      return\n    }\n\n    const db = this.#db = await openDB(DB_NAME, DB_VERSION, {\n      upgrade(db) {\n        // Checks if the object store exists:\n        if (!db.objectStoreNames.contains(DB_STORE_NAME)) {\n          db.createObjectStore(DB_STORE_NAME)\n        }\n      }\n    })\n\n    try {\n      const storedAvis = await db.get(DB_STORE_NAME, id)\n      if (storedAvis) {\n        if (!storedAvis.hidden) {\n          // Delete old entries\n          await db.delete(DB_STORE_NAME, id)\n          this.#show(storedAvis)\n        }\n      } else {\n        this.#show(avis)\n      }\n    } catch (error) {\n      console.error('Something went wrong with indexedDB: %o', error)\n      this.setMessage(avis.message)\n    }\n  }\n\n  /**\n   * Affiche l'avis et le sauvegarde en base de données\n   * @param {Object} avis - Données de l'avis à afficher\n   * @returns {Promise<void>}\n   * @private\n   */\n  async #show(message) {\n\n    const canceled = !this.dispatchEvent(new CustomEvent('bib:show', { bubbles: true, cancelable: true }))\n\n    if (canceled) {\n      return\n    }\n\n    this.setMessage(message)\n\n    if (this.#db) {\n      await this.#db.put(DB_STORE_NAME, { ...message, hidden: false }, message.id)\n    }\n  }\n\n  /**\n   * Masque l'avis et met à jour son statut en base de données\n   * @returns {Promise<void>}\n   * @private\n   */\n  async #hide() {\n\n    const canceled = !this.dispatchEvent(new CustomEvent('bib:hide', { bubbles: true, cancelable: true }))\n\n    if (canceled) {\n      return\n    }\n\n    const { id } = this.#avis\n    await this.#db.put(DB_STORE_NAME, { ...this.#avis, hidden: true }, id)\n    this.#avis = null\n    this.requestUpdate()\n  }\n\n  /**\n   * Méthode du cycle de vie appelée lorsque l'élément est connecté au DOM\n   * Initialise la récupération des avis\n   */\n  connectedCallback() {\n    super.connectedCallback()\n    this.#getAvis()\n  }\n\n  /**\n   * Gestionnaire de clic pour le bouton de fermeture\n   * @private\n   */\n  #onBtnFermerClick() {\n    this.#hide()\n  }\n\n  /**\n   * Rendu conditionnel du bouton de fermeture\n   * @returns {TemplateResult|null} Template du bouton ou null\n   * @private\n   */\n  _renderBoutonFermer() {\n    return this.boutonFermer ? html`<button class=\"btn-close\" aria-label=\"Fermer\" @click=\"${this.#onBtnFermerClick}\">${unsafeHTML(closeIcon)}</button>` : null\n  }\n\n  /**\n   * Méthode de rendu du composant\n   * @returns {TemplateResult|null} Template HTML de l'avis ou null si aucun message\n   */\n  render() {\n    return this.#avis?.message ? html`<aside class=\"container\"><div class=\"inner\"><div class=\"message\">${unsafeHTML(this.#avis.message)}</div>${this._renderBoutonFermer()}</div></aside>` : null\n  }\n\n  /**\n   * Définit le message d'avis à afficher\n   * @param {string|Object|null} message - Message à afficher ou objet contenant le message\n   * @public\n   */\n  setMessage(message) {\n    this.#avis = typeof message === 'string' ? { message, isLocal: true } : message\n  }\n}\n\nif (!window.customElements.get('bib-avis')) {\n  window.customElements.define('bib-avis', BibAvis)\n}\n\naddToGlobalBib('avis', {})","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24\\\" viewBox=\\\"0 -960 960 960\\\" width=\\\"24\\\"><path d=\\\"M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 28-11t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z\\\"/></svg>\"","export function nodeIsEmpty(node) {\n  return node.textContent.trim() === \"\"\n}"],"names":["BibAvis","LitElement","super","avis","db","this","service","boutonFermer","connectedCallback","_renderBoutonFermer","html","unsafeHTML","message","isLocal","getAvis","Task","task","async","signal","doGetAvis","Promise","resolve","reject","textContent","trim","innerHTML","split","join","url","URL","response","fetch","headers","Accept","catch","console","error","ok","Error","status","success","data","json","id","t","processAvis","args","setMessage","window","openDB","DB_NAME","DB_VERSION","objectStoreNames","contains","DB_STORE_NAME","createObjectStore","storedAvis","get","hidden","delete","show","dispatchEvent","CustomEvent","bubbles","cancelable","put","hide","requestUpdate","onBtnFermerClick","static","type","String","Boolean","attribute","state","css","unsafeCSS","customElements","define","addToGlobalBib"],"mappings":"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"}