{"version":3,"file":"bib-avis.js","sources":["../src/components/bib-avis/bib-avis.js","../src/icons/close_FILL0_wght400_GRAD0_opsz24.svg?raw","../src/utils/dom.js"],"sourcesContent":["import { Task } from '@lit/task'\nimport { LitElement, html, css, unsafeCSS } from 'lit'\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'\nimport { openDB } from 'idb'\nimport { nodeIsEmpty } from '@/utils/dom.js'\nimport { addToGlobalBib } from '@/utils/bib.js'\nimport { DB_NAME, DB_STORE_NAME, DB_VERSION } from './constants.js'\nimport closeIcon from '../../icons/close_FILL0_wght400_GRAD0_opsz24.svg?raw'\nimport bibAvisStyles from './bib-avis.scss?inline'\n\n/**\n * Génère un hash SHA-256 pour un objet donné\n * @param {Object} obj - L'objet à hasher\n * @returns {Promise<string>} Le hash hexadécimal de l'objet\n */\nasync function hash(obj) {\n  const utf8 = new TextEncoder().encode(JSON.stringify(obj))\n  const hashBuffer = await crypto.subtle.digest('SHA-256', utf8)\n  const hashArray = Array.from(new Uint8Array(hashBuffer))\n  const hashHex = hashArray\n    .map((bytes) => bytes.toString(16).padStart(2, '0'))\n    .join('')\n  return hashHex\n}\n\n/**\n * Composant d'affichage d'avis pour les Bibliothèques de l'Université de Montréal\n * \n * Ce composant Web personnalisé permet d'afficher des avis provenant d'un service distant\n * ou du contenu local. Il gère la persistance des avis via IndexedDB pour éviter\n * d'afficher plusieurs fois le même avis à l'utilisateur.\n * \n * @element bib-avis\n * \n * @fires bib:show - Émis avant l'affichage d'un avis. Peut être annulé.\n * @fires bib:hide - Émis avant le masquage d'un avis. Peut être annulé.\n * \n * @slot - Contenu HTML local à afficher comme avis (optionnel)\n * \n * @example\n * \n * <!-- Avis depuis un service distant -->\n * <bib-avis service=\"https://avis.bib.umontreal.ca/api/avis\" bouton-fermer></bib-avis>\n * \n * <!-- Avis avec contenu local -->\n * <bib-avis bouton-fermer>\n *   <p>Ceci est un avis local important.</p>\n * </bib-avis>\n * \n * \n * @cssprop --bib-avis-background-color - Couleur de fond de l'avis\n * @cssprop --bib-avis-text-color - Couleur du texte de l'avis\n * @cssprop --bib-avis-border-color - Couleur de la bordure de l'avis\n */\nexport class BibAvis extends LitElement {\n  /**\n   * Propriétés réactives du composant\n   */\n  static properties = {\n    /**\n     * URL du service d'avis distant\n     * @type {string}\n     * @default 'https://avis.bib.umontreal.ca/api/avis'\n     */\n    service: {\n      type: String\n    },\n    /**\n     * Affiche ou masque le bouton de fermeture\n     * @type {boolean}\n     * @default false\n     */\n    boutonFermer: {\n      type: Boolean,\n      attribute: 'bouton-fermer'\n    },\n    /**\n     * Message d'avis actuel (état interne)\n     * @type {Object|null}\n     * @private\n     */\n    message: {\n      state: true\n    }\n  }\n\n  static styles = [\n    css`${unsafeCSS(bibAvisStyles)}`,\n    css`\n    `\n  ]\n\n  /**\n   * Données de l'avis actuel\n   * @type {Object|null}\n   * @private\n   */\n  #avis\n\n  /**\n   * Instance de la base de données IndexedDB\n   * @type {IDBDatabase|null}\n   * @private\n   */\n  #db\n\n  /**\n   * Constructeur du composant BibAvis\n   * Initialise les propriétés par défaut\n   */\n  constructor() {\n    super()\n\n    this.#avis = null\n    this.service = 'https://avis.bib.umontreal.ca/api/avis'\n    this.boutonFermer = false\n  }\n\n  /**\n   * Crée et retourne une tâche pour récupérer les avis\n   * @returns {Task} Tâche de récupération des avis\n   * @private\n   */\n  #getAvis() {\n    return new Task(this, {\n      task: async ([service], { signal }) => {\n\n        const doGetAvis = new Promise(async (resolve, reject) => {\n          if (!nodeIsEmpty(this)) {\n            return resolve({ isLocal: true, message: this.innerHTML.split(/<!--\\?lit\\$\\d+\\$-->/).join('') })\n          }\n\n          const url = new URL(service)\n          const response = await fetch(url, {\n            headers: {\n              \"Accept\": \"application/json\",\n            },\n            signal\n          })\n            .catch(console.error)\n\n          if (!response.ok) {\n            return reject(new Error(response.status))\n          }\n\n          const { message } = await response.json()\n\n          resolve({ isLocal: false, message })\n        })\n\n        try {\n          const data = await doGetAvis\n          await this.#processAvis(data)\n        } catch (error) {\n          console.error('[#getAvis] An error occured: %o', error)\n        }\n\n        return data\n      },\n      args: () => [this.service]\n    })\n  }\n\n  /**\n   * Traite les données d'avis récupérées et gère la persistance\n   * @param {Object} avis - Données de l'avis à traiter\n   * @param {string} avis.message - Contenu HTML du message\n   * @param {boolean} [avis.isLocal] - Indique si l'avis provient du contenu local\n   * @returns {Promise<void>}\n   * @private\n   */\n  async #processAvis(avis) {\n    if (!avis.message) {\n      this.setMessage(null)\n      return\n    }\n\n    if (!('indexedDB' in window)) {\n      this.setMessage(avis.message)\n      return\n    }\n\n    const db = this.#db = await openDB(DB_NAME, DB_VERSION, {\n      upgrade(db) {\n        // Checks if the object store exists:\n        if (!db.objectStoreNames.contains(DB_STORE_NAME)) {\n          db.createObjectStore(DB_STORE_NAME)\n        }\n      }\n    })\n\n    try {\n      const id = await hash(avis)\n      const storedAvis = await db.get(DB_STORE_NAME, id)\n      if (storedAvis) {\n        if (!storedAvis.hidden) {\n          // Delete old entries\n          await db.delete(DB_STORE_NAME, id)\n          this.#show(storedAvis)\n        }\n      } else {\n        this.#show(avis)\n      }\n    } catch (error) {\n      console.error('Something went wrong with indexedDB: %o', error)\n      this.setMessage(avis.message)\n    }\n  }\n\n  /**\n   * Affiche l'avis et le sauvegarde en base de données\n   * @param {Object} avis - Données de l'avis à afficher\n   * @returns {Promise<void>}\n   * @private\n   */\n  async #show(avis) {\n\n    const canceled = !this.dispatchEvent(new CustomEvent('bib:show', { bubbles: true, cancelable: true }))\n\n    if (canceled) {\n      return\n    }\n\n    this.setMessage(avis)\n\n    if (this.#db) {\n      const id = await hash(avis)\n      await this.#db.put(DB_STORE_NAME, { ...avis, hidden: false }, id)\n    }\n  }\n\n  /**\n   * Masque l'avis et met à jour son statut en base de données\n   * @returns {Promise<void>}\n   * @private\n   */\n  async #hide() {\n\n    const canceled = !this.dispatchEvent(new CustomEvent('bib:hide', { bubbles: true, cancelable: true }))\n\n    if (canceled) {\n      return\n    }\n\n    const id = await hash(this.#avis)\n    await this.#db.put(DB_STORE_NAME, { ...this.#avis, hidden: true }, id)\n    this.#avis = null\n    this.requestUpdate()\n  }\n\n  /**\n   * Méthode du cycle de vie appelée lorsque l'élément est connecté au DOM\n   * Initialise la récupération des avis\n   */\n  connectedCallback() {\n    super.connectedCallback()\n    this.#getAvis()\n  }\n\n  /**\n   * Gestionnaire de clic pour le bouton de fermeture\n   * @private\n   */\n  #onBtnFermerClick() {\n    this.#hide()\n  }\n\n  /**\n   * Rendu conditionnel du bouton de fermeture\n   * @returns {TemplateResult|null} Template du bouton ou null\n   * @private\n   */\n  _renderBoutonFermer() {\n    return this.boutonFermer ? html`<button class=\"btn-close\" aria-label=\"Fermer\" @click=\"${this.#onBtnFermerClick}\">${unsafeHTML(closeIcon)}</button>` : null\n  }\n\n  /**\n   * Tâche alternative pour la récupération d'avis (non utilisée actuellement)\n   * @type {Task}\n   * @private\n   */\n  _avisTask = new Task(this, {\n    task: async ([service], { signal }) => {\n      const url = new URL(service)\n      const response = await fetch(url, {\n        headers: {\n          \"Accept\": \"application/json\",\n        },\n        signal\n      })\n      if (!response.ok) {\n        throw new Error(response.status)\n      }\n      return response.json()\n    },\n    args: () => [this.service]\n  })\n\n  /**\n   * Méthode de rendu du composant\n   * @returns {TemplateResult|null} Template HTML de l'avis ou null si aucun message\n   */\n  render() {\n    return this.#avis?.message ? html`<aside class=\"container\"><div class=\"inner\"><div class=\"message\">${unsafeHTML(this.#avis.message)}</div>${this._renderBoutonFermer()}</div></aside>` : null\n  }\n\n  /**\n   * Définit le message d'avis à afficher\n   * @param {string|Object|null} message - Message à afficher ou objet contenant le message\n   * @public\n   */\n  setMessage(message) {\n    this.#avis = typeof message === 'string' ? { message, isLocal: true } : message\n  }\n}\n\nif (!window.customElements.get('bib-avis')) {\n  window.customElements.define('bib-avis', BibAvis)\n}\n\naddToGlobalBib('avis', {})","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24\\\" viewBox=\\\"0 -960 960 960\\\" width=\\\"24\\\"><path d=\\\"M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 28-11t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z\\\"/></svg>\"","export function nodeIsEmpty(node) {\n  return node.textContent.trim() === \"\"\n}"],"names":["async","hash","obj","utf8","TextEncoder","encode","JSON","stringify","hashBuffer","crypto","subtle","digest","Array","from","Uint8Array","map","bytes","toString","padStart","join","BibAvis","LitElement","super","this","avis","db","_avisTask","Task","task","service","signal","t","url","URL","response","fetch","headers","Accept","ok","Error","status","json","args","boutonFermer","connectedCallback","_renderBoutonFermer","html","onBtnFermerClick","unsafeHTML","message","isLocal","getAvis","doGetAvis","Promise","resolve","reject","textContent","trim","innerHTML","split","catch","console","error","data","processAvis","setMessage","window","openDB","DB_NAME","DB_VERSION","objectStoreNames","contains","DB_STORE_NAME","createObjectStore","id","storedAvis","get","hidden","delete","show","dispatchEvent","CustomEvent","bubbles","cancelable","put","hide","requestUpdate","static","type","String","Boolean","attribute","state","css","unsafeCSS","customElements","define","addToGlobalBib"],"mappings":"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"}