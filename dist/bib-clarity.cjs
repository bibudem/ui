/**
 * Librairie du system desing des Bibliothèques de l'Université de Montréal
 * @module @bibudem/ui
 * @version 1.3.1
 * @author Christian Rémillard <christian.remillard@umontreal.ca>
 * @license ISC
 * @see https://github.com/bibudem/ui
 */
var t,e,n,i,s,r,a=Object.defineProperty,o=t=>{throw TypeError(t)},c=(t,e,n)=>((t,e,n)=>e in t?a(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n)(t,"symbol"!=typeof e?e+"":e,n),l=(t,e,n)=>e.has(t)||o("Cannot "+n),d=(t,e,n)=>(l(t,e,"read from private field"),n?n.call(t):e.get(t)),u=(t,e,n)=>e.has(t)?o("Cannot add the same private member more than once"):e instanceof WeakSet?e.add(t):e.set(t,n),h=(t,e,n)=>(l(t,e,"access private method"),n);Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const y=require("./lit-element-BHNMc-Kg.cjs"),b=require("./bib-clarity-BQiFwhHh.cjs"),p=require("./bib-mdcNW8yu.cjs"),E=require("./events-DuQfPugX.cjs"),f=require("./logger-BXGZV0ek.cjs"),g=require("./ConsentTokenV2.cjs"),m=require("./constants3.cjs"),v=require("./constants2.cjs");class S extends y.s{constructor(){super(),u(this,n),u(this,t,null),u(this,e,f.loggerFactory("bib-clarity")),this.hidden=!0,this.projectId=this.projectId||m.CLARITY_PROJECT_ID,this.clarity=b.Clarity,h(this,n,i).call(this)}setConsent(e){const i=new g(e);var a,o,c,u;JSON.stringify(d(this,t))!==JSON.stringify(i)&&(h(this,n,r).call(this,`[setConsent] Setting consent to %o (was ${null===d(this,t)?"not set":d(this,t)}).`,i),c=i,l(a=this,o=t,"write to private field"),u?u.call(a,c):o.set(a,c),this.clarity.consent("consentv2",i),h(this,n,s).call(this,v.EVENT_NAMES.CHANGE,{detail:i}))}}t=new WeakMap,e=new WeakMap,n=new WeakSet,i=async function(){const t=this;async function e(e){var i;h(i=t,n,r).call(i,"Recieved a `%s` event from <bib-consent>:",e.type,e.detail);const s=e.detail;if(null===s)return void t.setConsent(!1);const{analytics_consent:a,ad_consent:o}=s;t.readyState===m.READY_STATES.INDETERMINATE&&(t.readyState=m.READY_STATES.CONNECTED),t.setConsent({analytics_consent:a,ad_consent:o})}this.clarity.init(this.projectId),setTimeout((async()=>{var i;const s=document.querySelector("bib-consent");null===s?(h(i=t,n,r).call(i,"No <bib-consent /> element found. Turning off Clarity tracking."),t.setConsent(!1)):(s.addEventListener(v.EVENT_NAMES.READY,e),s.addEventListener(v.EVENT_NAMES.CHANGE,e))}))},s=function(t,e=null){E.dispatchPublicEvent(this,t,{detail:e})},r=function(...t){this.hasAttribute("debug")&&(t.map((t=>"string"==typeof t?t.replace(/<\/?[^>]+(>|$)/g,""):t)),d(this,e).call(this,...t))},c(S,"properties",{projectId:{type:String,attribute:"project-id"},hidden:{type:Boolean},debug:{type:Boolean,reflect:!0}}),c(S,"styles",[y.i`${y.r(b.styles)}`]),window.customElements.get("bib-clarity")||window.customElements.define("bib-clarity",S),p.addToGlobalBib("clarity",{}),exports.BibClarity=S;
//# sourceMappingURL=bib-clarity.cjs.map
