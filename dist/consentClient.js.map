{"version":3,"file":"consentClient.js","sources":["../src/components/bib-consent/consentClient.js"],"sourcesContent":["import { callServer } from 'postmessage-promise'\nimport { stringIsUrl } from '@/utils/url.js'\nimport { loggerFactory } from '@/utils/logger.js'\nimport getConsentStorage from './ConsentStorage.js'\nimport { ConsentTokens } from './ConsentTokens.js'\nimport { getIframeServer, getServerMode } from './utils.js'\nimport { EVENT_NAMES, SERVER_MODE, SERVER_REQUEST_DEFAULT_TIMEOUT } from './constants.js'\n\n/**\n * Represents a client for managing user consent tokens, with the ability to interact with a remote server or local storage.\n *\n * The `ConsentClient` class extends the `EventTarget` class, allowing it to dispatch events related to preference updates.\n *\n * Key features:\n * - Initialization with options for server mode (local or remote), server URL, and event reflection.\n * - Ability to add hosts that will receive preference update events.\n * - Debugging functionality with configurable debug mode.\n * - Methods to set, get, and reset user tokens, with different behavior based on server mode.\n *\n * @property {string} readyState - The current state of the ConsentClient instance. Can be 'initial', 'connecting' or 'ready'.\n */\nclass ConsentClient extends EventTarget {\n  _server\n  _storage\n  #debugIsOn = false\n  #debug\n\n  constructor() {\n    super()\n    this.readyState = 'initial'\n    this.hosts = []\n  }\n\n  addHost({ host, reflectEvents }) {\n    this.hosts.push({ host, reflectEvents })\n  }\n\n  debug() {\n    if (this.#debugIsOn) {\n      this.#debug(...arguments)\n    }\n  }\n\n  dispatchEvent(event) {\n    super.dispatchEvent(event)\n    this.hosts.forEach(({ host, reflectEvents }) => reflectEvents && host.dispatchEvent?.(event))\n  }\n\n  /**\n   * Adds an event listener to the ConsentClient instance.\n   *\n   * If the event type is `EVENT_NAMES.READY` and the `readyState` is already `'ready'`, the listener function is called immediately with the current preferences object as the event detail.\n   *\n   * Otherwise, the event listener is added using the standard `addEventListener` method.\n   *\n   * @param {string} type - The type of event to listen for.\n   * @param {EventListener} listener - The function to call when the event is dispatched.\n   * @param {EventListenerOptions} [options] - Options for the event listener.\n   */\n  addEventListener(type, listener, options) {\n    if (type === EVENT_NAMES.READY && this.readyState === 'ready') {\n      this.debug('Firing ready event immediately since readyState is already ready')\n      this.#fireReadyListener(listener)\n      return\n    }\n\n    super.addEventListener(type, listener, options)\n  }\n\n  async #fireReadyListener(listener) {\n    const consentTokens = await this.getConsentTokens()\n    const readyEvent = new CustomEvent(EVENT_NAMES.READY, { detail: consentTokens })\n    this.debug('Firing ready event with preferences: ', consentTokens)\n    listener(readyEvent)\n  }\n\n  /**\n   * Initializes the ConsentClient instance with the provided options.\n   *\n   * @param {Object} options - The initialization options.\n   * @param {Object} [options.host] - The host object that will receive preference update events.\n   * @param {string} [options.serverMode] - The server mode, either 'LOCAL' or 'REMOTE'.\n   * @param {string} [options.serverUrl] - The URL of the remote server.\n   * @param {number} [options.serverRequestTimeout=SERVER_REQUEST_DEFAULT_TIMEOUT] - The timeout for server requests in milliseconds.\n   * @param {boolean} [options.reflectEvents=true] - Whether to reflect preference update events to the host.\n   * @returns {Promise<void>} - A promise that resolves when initialization is complete.\n   *\n   * @event EVENT_NAMES.READY - Dispatched when the initial preferences data is available. The event detail contains the preferences object.\n   * @event EVENT_NAMES.UPDATE - Dispatched when the preferences are updated. The event detail contains the updated preferences object.\n   */\n\n  async init({ host, serverMode, serverUrl, serverRequestTimeout = SERVER_REQUEST_DEFAULT_TIMEOUT, reflectEvents = true }) {\n    this.serverRequestTimeout = serverRequestTimeout\n\n    if (host) {\n      this.addHost({ host, reflectEvents })\n    }\n\n    this.readyState = 'connecting'\n\n    if (\n      (\n        serverMode && serverMode === SERVER_MODE.LOCAL\n      )\n      ||\n      typeof serverUrl === 'undefined'\n      ||\n      !stringIsUrl(serverUrl)\n    ) {\n      this.serverMode = SERVER_MODE.LOCAL\n    } else {\n      this.serverUrl = new URL(serverUrl, location)\n\n      if (host.debug) {\n        this.serverUrl.searchParams.set('debug', '')\n      }\n\n      this.serverMode = await getServerMode(this)\n\n    }\n\n    this.#debugIsOn = !!host.debug\n\n    if (this.#debugIsOn) {\n      this.#debug = loggerFactory('consentClient', 'purple')\n    }\n\n    this.debug('init', `server mode: ${this.serverMode}`)\n\n    let consentTokens\n\n    if (this.serverMode === SERVER_MODE.REMOTE) {\n      const serverObject = getIframeServer(document.body, this.serverUrl.href)\n\n      try {\n        this._server = await callServer(serverObject)\n\n        this._server.listenMessage((method, data) => {\n          this.debug('[remote] server.listenMessage method: ', method, 'data: ', data)\n          const consentTokens = ConsentTokens.from(data)\n          const event = new CustomEvent(EVENT_NAMES.UPDATE, { detail: consentTokens })\n          this.dispatchEvent(event)\n        })\n      } catch (error) {\n        console.error('[callServer] error: ', error)\n        throw error\n      }\n\n      consentTokens = ConsentTokens.from(await this._server.postMessage('getConsentTokens'))\n      this.debug('[remote] Got response from server: ', consentTokens)\n\n    } else {\n      this._storage = await getConsentStorage()\n\n      consentTokens = await this._storage.getConsentTokens()\n      this.debug('[local] Got response from storage: ', consentTokens)\n    }\n\n    this.debug('[local] consentTokens: ', consentTokens)\n\n    if (consentTokens !== undefined) {\n\n      // Dispatch initial data with the ready state.\n      this.readyState = 'ready'\n\n      this.debug('dispatchEvent', EVENT_NAMES.READY, consentTokens)\n      this.dispatchEvent(new CustomEvent(EVENT_NAMES.READY, { detail: consentTokens }))\n    }\n  }\n\n  /**\n   * Gets the user's preferences from either the local storage or the remote server, depending on the configured server mode.\n   *\n   * @returns {Promise<Object>} - A promise that resolves with the user's preferences, or rejects with an error if the operation fails.\n   */\n  async getConsentTokens() {\n    try {\n      if (this.serverMode === SERVER_MODE.LOCAL) {\n        return await this._storage.getConsentTokens()\n      } else {\n        return ConsentTokens.from(await this._server.postMessage('getConsentTokens'))\n      }\n    } catch (error) {\n      console.error('[#getConsentTokens]', error)\n      throw error\n    }\n  }\n\n  /**\n  * Sets the user's tokens in either the local storage or the remote server, depending on the configured server mode.\n  *\n  * @param {Object} tokens - The tokens object to be set.\n  * @returns {Promise} - A promise that resolves when the preferences have been set or reset, or rejects with an error if the operation fails.\n  */\n  async setConsentTokens(tokens) {\n    try {\n      let response\n\n      const consentTokens = ConsentTokens.from(tokens)\n\n      if (this.serverMode === SERVER_MODE.LOCAL) {\n        response = await this._storage.setConsentTokens(consentTokens)\n      } else {\n        response = await this._server.postMessage('setConsentTokens', consentTokens)\n      }\n\n      if (response) {\n        this.dispatchEvent(new CustomEvent(EVENT_NAMES.UPDATE, { detail: response }))\n        return response\n      }\n    } catch (error) {\n      console.error('[#setConsentTokens]', error)\n      throw error\n    }\n  }\n\n  /**\n   * Resets the user's preferences by clearing the stored preferences data, either in the local storage or on the remote server, depending on the configured server mode.\n   *\n   * @returns {Promise} - A promise that resolves when the preferences have been reset, or rejects with an error if the reset operation fails.\n   */\n  async resetTokens() {\n    try {\n      if (this.serverMode === SERVER_MODE.LOCAL) {\n        return await this._storage.resetTokens()\n      } else {\n        await this._server.postMessage('resetTokens')\n      }\n    } catch (error) {\n      console.error('[#resetTokens]', error)\n      throw error\n    }\n  }\n}\n\nlet consentClient\n\n/**\n * Creates a new ConsentClient instance and initializes it with the provided options.\n *\n * If a ConsentClient instance already exists, it will add the provided host to the existing instance and return it.\n *\n * @param {Object} options - The options to initialize the ConsentClient with.\n * @returns {Promise<ConsentClient>} - A Promise that resolves to the ConsentClient instance.\n */\nexport default async function createConsentClient(options) {\n  if (consentClient) {\n    consentClient.addHost(options)\n\n    return consentClient\n  }\n\n  consentClient = new ConsentClient()\n  await consentClient.init(options)\n\n  return consentClient\n}"],"names":["ConsentClient","EventTarget","super","this","_server","_storage","debugIsOn","debug","readyState","hosts","addHost","host","reflectEvents","push","arguments","event","dispatchEvent","forEach","type","listener","options","EVENT_NAMES","READY","addEventListener","init","serverMode","serverUrl","serverRequestTimeout","SERVER_REQUEST_DEFAULT_TIMEOUT","consentTokens","SERVER_MODE","LOCAL","stringIsUrl","URL","location","searchParams","set","getServerMode","loggerFactory","REMOTE","serverObject","getIframeServer","document","body","href","callServer","listenMessage","method","data","ConsentTokens","from","CustomEvent","UPDATE","detail","error","console","postMessage","getConsentStorage","getConsentTokens","undefined","setConsentTokens","tokens","response","resetTokens","fireReadyListener","readyEvent","consentClient","async","createConsentClient"],"mappings":"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"}