{"version":3,"file":"consentClient.js","sources":["../src/components/bib-consent/consentClient.js"],"sourcesContent":["import { callServer } from 'postmessage-promise'\r\nimport { stringIsUrl } from '@/utils/url.js'\r\nimport { loggerFactory } from '@/utils/logger.js'\r\nimport getConsentStorage from './ConsentStorage.js'\r\nimport { ConsentTokens } from './ConsentTokens.js'\r\nimport { getIframeServer, getServerMode } from './utils.js'\r\nimport { EVENT_NAMES, SERVER_MODE, SERVER_REQUEST_DEFAULT_TIMEOUT } from './constants.js'\r\n\r\n/**\r\n * Represents a client for managing user consent tokens, with the ability to interact with a remote server or local storage.\r\n *\r\n * The `ConsentClient` class extends the `EventTarget` class, allowing it to dispatch events related to preference updates.\r\n *\r\n * Key features:\r\n * - Initialization with options for server mode (local or remote), server URL, and event reflection.\r\n * - Ability to add hosts that will receive preference update events.\r\n * - Debugging functionality with configurable debug mode.\r\n * - Methods to set, get, and reset user tokens, with different behavior based on server mode.\r\n *\r\n * @property {string} readyState - The current state of the ConsentClient instance. Can be 'initial', 'connecting' or 'ready'.\r\n */\r\nclass ConsentClient extends EventTarget {\r\n  _server\r\n  _storage\r\n  #debugIsOn = false\r\n  #debug\r\n\r\n  constructor() {\r\n    super()\r\n    this.readyState = 'initial'\r\n    this.hosts = []\r\n  }\r\n\r\n  addHost({ host, reflectEvents }) {\r\n    this.hosts.push({ host, reflectEvents })\r\n  }\r\n\r\n  debug() {\r\n    if (this.#debugIsOn) {\r\n      this.#debug(...arguments)\r\n    }\r\n  }\r\n\r\n  dispatchEvent(event) {\r\n    super.dispatchEvent(event)\r\n    // this.hosts.forEach(({ host, reflectEvents }) => reflectEvents && host.dispatchEvent?.(event))\r\n  }\r\n\r\n  /**\r\n   * Adds an event listener to the ConsentClient instance.\r\n   *\r\n   * If the event type is `EVENT_NAMES.READY` and the `readyState` is already `'ready'`, the listener function is called immediately with the current preferences object as the event detail.\r\n   *\r\n   * Otherwise, the event listener is added using the standard `addEventListener` method.\r\n   *\r\n   * @param {string} type - The type of event to listen for.\r\n   * @param {EventListener} listener - The function to call when the event is dispatched.\r\n   * @param {EventListenerOptions} [options] - Options for the event listener.\r\n   */\r\n  addEventListener(type, listener, options) {\r\n    if (type === EVENT_NAMES.READY && this.readyState === 'ready') {\r\n      this.debug('Firing ready event immediately since readyState is already ready')\r\n      this.#fireReadyListener(listener)\r\n      return\r\n    }\r\n\r\n    super.addEventListener(type, listener, options)\r\n  }\r\n\r\n  async #fireReadyListener(listener) {\r\n    const consentTokens = await this.getConsentTokens()\r\n    const readyEvent = new CustomEvent(EVENT_NAMES.READY, { detail: consentTokens, bubbles: true, composed: true })\r\n    this.debug('Firing ready event with preferences: ', consentTokens)\r\n    listener(readyEvent)\r\n  }\r\n\r\n  /**\r\n   * Initializes the ConsentClient instance with the provided options.\r\n   *\r\n   * @param {Object} options - The initialization options.\r\n   * @param {Object} [options.host] - The host object that will receive preference update events.\r\n   * @param {string} [options.serverMode] - The server mode, either 'LOCAL' or 'REMOTE'.\r\n   * @param {string} [options.serverUrl] - The URL of the remote server.\r\n   * @param {number} [options.serverRequestTimeout=SERVER_REQUEST_DEFAULT_TIMEOUT] - The timeout for server requests in milliseconds.\r\n   * @param {boolean} [options.reflectEvents=true] - Whether to reflect preference update events to the host.\r\n   * @returns {Promise<void>} - A promise that resolves when initialization is complete.\r\n   *\r\n   * @event EVENT_NAMES.READY - Dispatched when the initial preferences data is available. The event detail contains the preferences object.\r\n   * @event EVENT_NAMES.CHANGE - Dispatched when the preferences are updated. The event detail contains the updated preferences object.\r\n   */\r\n\r\n  async init({ host, serverMode, serverUrl, serverRequestTimeout = SERVER_REQUEST_DEFAULT_TIMEOUT, reflectEvents = true }) {\r\n    this.serverRequestTimeout = serverRequestTimeout\r\n\r\n    if (host) {\r\n      this.addHost({ host, reflectEvents })\r\n    }\r\n\r\n    this.readyState = 'connecting'\r\n\r\n    if (\r\n      (\r\n        serverMode && serverMode === SERVER_MODE.LOCAL\r\n      )\r\n      ||\r\n      typeof serverUrl === 'undefined'\r\n      ||\r\n      !stringIsUrl(serverUrl)\r\n    ) {\r\n      this.serverMode = SERVER_MODE.LOCAL\r\n    } else {\r\n      this.serverUrl = new URL(serverUrl, location)\r\n\r\n      if (host.debug) {\r\n        this.serverUrl.searchParams.set('debug', '')\r\n      }\r\n\r\n      this.serverMode = await getServerMode(this)\r\n\r\n    }\r\n\r\n    this.#debugIsOn = !!host.debug\r\n\r\n    if (this.#debugIsOn) {\r\n      this.#debug = loggerFactory('consentClient', 'purple')\r\n    }\r\n\r\n    this.debug('init', `server mode: ${this.serverMode}`)\r\n\r\n    let consentTokens\r\n\r\n    if (this.serverMode === SERVER_MODE.REMOTE) {\r\n      const serverObject = getIframeServer(document.body, this.serverUrl.href)\r\n\r\n      try {\r\n        this._server = await callServer(serverObject)\r\n\r\n        this._server.listenMessage((method, data) => {\r\n          const consentTokens = ConsentTokens.from(data)\r\n          const event = new CustomEvent(EVENT_NAMES.CHANGE, { detail: consentTokens, bubbles: true, composed: true })\r\n          this.dispatchEvent(event)\r\n        })\r\n      } catch (error) {\r\n        console.error('[callServer] error: ', error)\r\n        throw error\r\n      }\r\n\r\n      consentTokens = ConsentTokens.from(await this._server.postMessage('getConsentTokens'))\r\n      this.debug('[remote] Got response from server: ', consentTokens)\r\n\r\n    } else {\r\n      this._storage = await getConsentStorage()\r\n\r\n      consentTokens = await this._storage.getConsentTokens()\r\n      this.debug('[local] Got response from storage: ', consentTokens)\r\n    }\r\n\r\n    this.debug('[local] consentTokens: ', consentTokens)\r\n\r\n    if (consentTokens !== undefined) {\r\n\r\n      // Dispatch initial data with the ready state.\r\n      this.readyState = 'ready'\r\n\r\n      this.dispatchEvent(new CustomEvent(EVENT_NAMES.READY, { detail: consentTokens, bubbles: true, composed: true }))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the user's preferences from either the local storage or the remote server, depending on the configured server mode.\r\n   *\r\n   * @returns {Promise<Object>} - A promise that resolves with the user's preferences, or rejects with an error if the operation fails.\r\n   */\r\n  async getConsentTokens() {\r\n    try {\r\n      if (this.serverMode === SERVER_MODE.LOCAL) {\r\n        return await this._storage.getConsentTokens()\r\n      } else {\r\n        return ConsentTokens.from(await this._server.postMessage('getConsentTokens'))\r\n      }\r\n    } catch (error) {\r\n      console.error('[#getConsentTokens]', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Sets the user's tokens in either the local storage or the remote server, depending on the configured server mode.\r\n  *\r\n  * @param {Object} tokens - The tokens object to be set.\r\n  * @returns {Promise} - A promise that resolves when the preferences have been set or reset, or rejects with an error if the operation fails.\r\n  */\r\n  async setConsentTokens(tokens) {\r\n    try {\r\n      let response\r\n\r\n      const consentTokens = ConsentTokens.from(tokens)\r\n\r\n      if (this.serverMode === SERVER_MODE.LOCAL) {\r\n        response = await this._storage.setConsentTokens(consentTokens)\r\n      } else {\r\n        response = await this._server.postMessage('setConsentTokens', consentTokens)\r\n      }\r\n\r\n      if (response) {\r\n        this.dispatchEvent(new CustomEvent(EVENT_NAMES.CHANGE, { detail: response, bubbles: true, composed: true }))\r\n        return response\r\n      }\r\n    } catch (error) {\r\n      console.error('[#setConsentTokens]', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resets the user's preferences by clearing the stored preferences data, either in the local storage or on the remote server, depending on the configured server mode.\r\n   *\r\n   * @returns {Promise} - A promise that resolves when the preferences have been reset, or rejects with an error if the reset operation fails.\r\n   */\r\n  async resetTokens() {\r\n    try {\r\n      if (this.serverMode === SERVER_MODE.LOCAL) {\r\n        return await this._storage.resetTokens()\r\n      } else {\r\n        await this._server.postMessage('resetTokens')\r\n      }\r\n    } catch (error) {\r\n      console.error('[#resetTokens]', error)\r\n      throw error\r\n    }\r\n  }\r\n}\r\n\r\nlet consentClient\r\n\r\n/**\r\n * Creates a new ConsentClient instance and initializes it with the provided options.\r\n *\r\n * If a ConsentClient instance already exists, it will add the provided host to the existing instance and return it.\r\n *\r\n * @param {Object} options - The options to initialize the ConsentClient with.\r\n * @returns {Promise<ConsentClient>} - A Promise that resolves to the ConsentClient instance.\r\n */\r\nexport default async function createConsentClient(options) {\r\n  if (consentClient) {\r\n    consentClient.addHost(options)\r\n\r\n    return consentClient\r\n  }\r\n\r\n  consentClient = new ConsentClient()\r\n  await consentClient.init(options)\r\n\r\n  return consentClient\r\n}"],"names":["ConsentClient","EventTarget","super","this","_server","_storage","debugIsOn","debug","readyState","hosts","addHost","host","reflectEvents","push","s","arguments","event","dispatchEvent","type","listener","options","EVENT_NAMES","READY","fireReadyListener","addEventListener","serverMode","serverUrl","serverRequestTimeout","SERVER_REQUEST_DEFAULT_TIMEOUT","consentTokens","SERVER_MODE","LOCAL","stringIsUrl","URL","location","searchParams","set","getServerMode","loggerFactory","REMOTE","serverObject","getIframeServer","document","body","href","callServer","listenMessage","method","data","ConsentTokens","from","CustomEvent","CHANGE","detail","bubbles","composed","error","console","postMessage","getConsentStorage","getConsentTokens","tokens","response","setConsentTokens","resetTokens","readyEvent","consentClient","async","createConsentClient","init"],"mappings":"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"}