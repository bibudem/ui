{"version":3,"file":"bib-consent-consent-dialog.cjs","sources":["../src/components/bib-consent/bib-consent-consent-dialog.js"],"sourcesContent":["import { css, html, LitElement, unsafeCSS } from 'lit'\nimport { createRef, ref } from 'lit/directives/ref.js'\nimport './bib-consent-dialog.js'\nimport { DEFAULT_PREFERENCES } from './constants.js'\nimport styles from './bib-consent-consent-dialog.scss?inline'\n\n/**\n * Creates an object with all properties of `DEFAULT_PREFERENCES` set to the provided `value`.\n *\n * @param {boolean} value - The value to set for all properties in the returned object.\n * @returns {Object} An object with all properties of `DEFAULT_PREFERENCES` set to the provided `value`.\n */\nfunction all(value) {\n  return Object.keys(DEFAULT_PREFERENCES).reduce((prefs, prop) => ({ ...prefs, [prop]: value }), {})\n}\n\n/**\n * The `BibConsentConsentDialog` component creates a consent dialog for managing user preferences related to cookies and other tracking technologies.\n *\n * The component provides the following functionality:\n * - Displays a consent dialog with options to customize preferences, accept all, or reject all.\n * - Allows setting preferences by dispatching a `update` event with the new preferences.\n * - Provides methods to show, close, and display the preferences dialog.\n *\n * The component uses the `bib-consent-dialog` component to render the actual dialog.\n */\nexport class BibConsentConsentDialog extends LitElement {\n  static properties = {\n    debug: {\n      type: Boolean,\n      reflect: true\n    },\n    open: {\n      type: Boolean,\n      state: true\n    },\n  }\n\n  static styles = [\n    css`${unsafeCSS(styles)}`\n  ]\n\n  constructor() {\n    super()\n    this.open = false\n    this.dialogRef = createRef()\n  }\n\n  /**\n   * Sets the preferences for the consent dialog.\n   *\n   * @param {Object} preferences - An object containing the preferences to set.\n   * @emits update - Dispatches a custom event with the updated preferences.\n   */\n  setPreferences(preferences) {\n    this.dispatchEvent(new CustomEvent('update', { detail: preferences }))\n  }\n\n  /**\n   * Shows the consent dialog if it is not already open.\n   */\n  show() {\n    if (this.dialogRef.value && !this.dialogRef.value.open) {\n      this.dialogRef.value?.show()\n    }\n  }\n\n  /**\n   * Closes the consent dialog if it is currently open.\n   */\n  close() {\n    if (this.dialogRef.value && this.dialogRef.value.open) {\n      this.dialogRef.value?.close()\n    }\n  }\n\n  /**\n   * Shows the preferences dialog for the consent dialog.\n   *\n   * This method dispatches a custom 'show-preferences' event to notify other components that the preferences dialog should be shown.\n   */\n  showPreferences() {\n    this.dispatchEvent(new CustomEvent('show-preferences'))\n  }\n\n  render() {\n    return html`\n      <bib-consent-dialog class='consent-dialog' ${ref(this.dialogRef)}>\n          <div class=\"title\" autofocus>L’UdeM reconnaît l’importance de respecter la vie privée</div>\n          <p>L’utilisation de témoins nous permet d’améliorer et de personnaliser votre expérience Web. Certains témoins sont obligatoires pour assurer le fonctionnement et la sécurité du site Web, alors que d’autres enregistrent vos préférences. En acceptant tout, vous consentez à notre utilisation de témoins pour mieux répondre à vos besoins.</p>\n          <div class=\"actions-container\">\n            <button class=\"btn--outlined\" type=\"button\" @click=\"${() => this.showPreferences()}\">Personnaliser les témoins <span>&gt;</span></button>\n            <button class=\"btn--filled\" type=\"button\" @click=\"${() => this.setPreferences(all(false))}\">Tout refuser</button>\n            <button class=\"btn--filled\" type=\"button\" @click=\"${() => this.setPreferences(all(true))}\">Tout accepter</button>\n          </div>\n          <p class=\"learn-more-container\">\n            Voir notre <a href=\"https://vie-privee.umontreal.ca/confidentialite\">politique de confidentialité</a> et nos <a href=\"https://vie-privee.umontreal.ca/conditions-dutilisation\">conditions d’utilisation</a>.\n          </p>\n      </bib-consent-dialog>\n    `\n  }\n}\n\nif (!window.customElements.get('bib-consent-consent-dialog')) {\n  window.customElements.define('bib-consent-consent-dialog', BibConsentConsentDialog)\n}"],"names":["all","value","Object","keys","DEFAULT_PREFERENCES","reduce","prefs","prop","BibConsentConsentDialog","LitElement","constructor","super","this","open","dialogRef","createRef","setPreferences","preferences","dispatchEvent","CustomEvent","detail","show","close","showPreferences","render","html","ref","n","static","debug","type","Boolean","reflect","state","css","unsafeCSS","window","customElements","get","define"],"mappings":"2XAYA,SAASA,EAAIC,GACX,OAAOC,OAAOC,KAAKC,EAAmBA,qBAAEC,QAAO,CAACC,EAAOC,KAAAA,IAAeD,EAAOC,CAACA,GAAON,KAAU,CAAA,EACjG,CAYO,MAAMO,UAAgCC,EAAAA,EAgB3C,WAAAC,GACEC,QACAC,KAAKC,QACLD,KAAKE,UAAYC,KAClB,CAQD,cAAAC,CAAeC,GACRC,KAAAA,cAAc,IAAIC,YAAY,SAAU,CAAEC,OAAQH,IACxD,CAKD,IAAAI,GACWP,KAAAA,UAAUb,QAAUW,KAAKE,UAAUb,MAAMY,MAChDD,KAAKE,UAAUb,OAAOoB,MAEzB,CAKD,KAAAC,GACWR,KAAAA,UAAUb,OAASW,KAAKE,UAAUb,MAAMY,MAC/CD,KAAKE,UAAUb,OAAOqB,OAEzB,CAOD,eAAAC,GACEX,KAAKM,cAAc,IAAIC,YAAY,oBACpC,CAED,MAAAK,GACSC,OAAAA,GACwCC,8CAAAA,EAAGC,EAACf,KAAKE,ghBAIM,IAAMF,KAAKW,0HACb,IAAMX,KAAKI,eAAehB,GAAAA,gFAC1B,IAAMY,KAAKI,eAAehB,GAAAA,wSAOvF,EAzED4B,EADWpB,EACXoB,aAAoB,CAClBC,MAAO,CACLC,KAAMC,QACNC,YAEFnB,KAAM,CACJiB,KAAMC,QACNE,OAAO,KAIXL,EAZWpB,EAYK,SAAA,CACd0B,EAAAA,IAAMC,EAAAA,shJAgELC,OAAOC,eAAeC,IAAI,+BAC7BF,OAAOC,eAAeE,OAAO,6BAA8B/B"}