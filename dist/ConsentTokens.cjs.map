{"version":3,"file":"ConsentTokens.cjs","sources":["../node_modules/lodash-es/isBoolean.js","../src/components/bib-consent/ConsentTokens.js"],"sourcesContent":["import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]';\n\n/**\n * Checks if `value` is classified as a boolean primitive or object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n * @example\n *\n * _.isBoolean(false);\n * // => true\n *\n * _.isBoolean(null);\n * // => false\n */\nfunction isBoolean(value) {\n  return value === true || value === false ||\n    (isObjectLike(value) && baseGetTag(value) == boolTag);\n}\n\nexport default isBoolean;\n","import { isBoolean, isObject } from 'lodash-es'\nimport { DEFAULT_PREFERENCES, CONSENT_STATES } from './constants.js'\n\nconst keys = Object.keys(DEFAULT_PREFERENCES)\n\nfunction throwOnInvalidValue(value, { key, acceptNull = false } = {}) {\n  if (\n    !isBoolean(value)\n    && !['granted', 'denied'].includes(value)\n    &&\n    (!acceptNull && value === null)\n  ) {\n    const message = `Invalid value${key ? ` for field \\`${key}\\`` : ''}: ${value}. Must be either boolean or one of 'granted' or 'denied'.`\n    throw new TypeError(message)\n  }\n}\n\nfunction throwOnInvalidKey(key) {\n  if (!keys.includes(key)) {\n    const message = `Invalid key: ${key}. Must be one of ${keys.reduce((str, key, i) => i === keys.length ? `${str} or ${key}` : `${str}, ${key}`)}.`\n    throw new TypeError(message)\n  }\n}\n\n/**\n * @typedef {(ConsentTokens|import('./constants.js').ConsentValues)} ConsentTokensOrTokens\n */\n\n/**\n * Represents a set of consent tokens that can be used to track user consent preferences.\n *\n * The `ConsentTokens` class provides a way to manage and interact with consent tokens, which are used to track a user's preferences for various types of data processing, such as analytics, functionality, and advertising.\n *\n * The class provides methods for setting and retrieving individual consent tokens, as well as methods for setting all consent tokens at once and resetting the consent state. It also provides a method for generating a consent state object that can be used for integrating with third-party tools, such as Google Tag Manager.\n *\n * The class uses a set of default preferences defined in the `DEFAULT_PREFERENCES` constant, and provides validation to ensure that consent token values are valid.\n */\nexport class ConsentTokens {\n\n  /**\n   * Creates a new `ConsentTokens` instance from the provided `tokens` object or value.\n   *\n   * If `tokens` is an object, the method iterates over its keys and sets the corresponding consent token values.\n   *\n   * If `tokens` is not an object, the method sets all consent token values to the provided `tokens` value.\n   *\n   * The method returns the newly created `ConsentTokens` instance.\n   *\n   * @param {ConsentTokensOrTokens} tokens - An object or value representing the consent token values to initialize the `ConsentTokens` instance with.\n   * @returns {ConsentTokens} - A new `ConsentTokens` instance initialized with the provided `tokens`.\n   */\n  static from(tokens) {\n    const consentTokens = new ConsentTokens()\n\n    if (typeof tokens !== 'undefined') {\n      if (isObject(tokens)) {\n        Object.keys(tokens).forEach(key => {\n          consentTokens.#setToken(key, tokens[key], true)\n        })\n      } else {\n        consentTokens.#setAll(tokens, true)\n      }\n    }\n\n    return consentTokens\n  }\n\n  #tokens = {\n    ...DEFAULT_PREFERENCES\n  }\n\n  #setToken(key, value, acceptNull = false) {\n    throwOnInvalidKey(key)\n    throwOnInvalidValue(value, { key, acceptNull })\n\n    this.#tokens[key] = isBoolean(value) ? value ? 'granted' : 'denied' : value\n  }\n\n  #setAll(value, acceptNull = false) {\n\n    throwOnInvalidValue(value, { acceptNull })\n\n    if (typeof value !== 'string') {\n      value = value ? 'granted' : 'denied'\n    }\n\n    Object.keys(this.#tokens).forEach(key => this.#tokens[key] = value)\n  }\n\n  constructor(tokens) {\n\n    // Defining getters and setters on the constructor function\n    // so they are enumerables\n\n    Object.defineProperties(this, {\n      analytics_consent: {\n        enumerable: true,\n        get: () => this.#tokens.analytics_consent,\n        set: value => this.#setToken('analytics_consent', value)\n      },\n      functionality_consent: {\n        enumerable: true,\n        get: () => this.#tokens.functionality_consent,\n        set: value => this.#setToken('functionality_consent', value)\n      },\n      ad_consent: {\n        enumerable: true,\n        get: () => this.#tokens.ad_consent,\n        set: value => this.#setToken('ad_consent', value)\n      }\n    })\n\n    if (typeof tokens !== 'undefined') {\n      if (isObject(tokens)) {\n        Object.keys(DEFAULT_PREFERENCES).forEach(key => {\n          if (Reflect.has(tokens, key)) {\n            this.#setToken(key, tokens[key])\n          }\n        })\n\n      } else {\n\n        this.#setAll(tokens)\n      }\n    }\n  }\n\n  isGranted(key) {\n    throwOnInvalidKey(key)\n\n    return this.#tokens[key] === CONSENT_STATES.GRANTED\n  }\n\n  isDenied(key) {\n    throwOnInvalidKey(key)\n\n    return this.#tokens[key] === CONSENT_STATES.DENIED\n  }\n\n  state() {\n    return Object.values(this.#tokens).every(value => value !== null) ? CONSENT_STATES.DETERMINATE : CONSENT_STATES.INDETERMINATE\n  }\n\n  setAll(data) {\n    if (isObject(data)) {\n      Object.entries(data).forEach(([key, value]) => this.#setToken(key, value))\n      return\n    }\n\n    this.#setAll(data)\n  }\n\n  resetConsent() {\n    Object.keys(this.#tokens).forEach(key => this.#tokens[key] = null)\n  }\n\n  toGTM(wait_for_update = 500) {\n    if (this.state() === CONSENT_STATES.INDETERMINATE) {\n      const nullEntries = Object.entries(this.#tokens).filter(token => token[1] === null)\n      throw new Error(`All tokens must have an explicit value. Undefined token${nullEntries.length > 1 ? 's' : ''}: ${nullEntries.map(token => token[0]).join(', ')}`)\n    }\n\n    const { analytics_consent, ad_consent } = this.#tokens\n\n    return {\n      ad_user_data: ad_consent,\n      ad_personalization: ad_consent,\n      ad_consent: ad_consent,\n      analytics_consent: analytics_consent,\n      wait_for_update\n    }\n\n  }\n}"],"names":["boolTag","isBoolean","value","isObjectLike","baseGetTag","keys","Object","DEFAULT_PREFERENCES","throwOnInvalidValue","key","acceptNull","includes","TypeError","throwOnInvalidKey","message","reduce","str","i","length","tokens","_r_instances","WeakSet","e_fn","setToken","this","t_fn","setAll","t","forEach","ConsentTokens","constructor","__privateAdd","_n","defineProperties","analytics_consent","enumerable","get","set","functionality_consent","ad_consent","isObject","has","consentTokens","isGranted","CONSENT_STATES","GRANTED","isDenied","DENIED","state","values","every","DETERMINATE","INDETERMINATE","data","entries","resetConsent","toGTM","wait_for_update","nullEntries","filter","token","Error","map","join","ad_user_data","ad_personalization"],"mappings":"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","x_google_ignoreList":[0]}