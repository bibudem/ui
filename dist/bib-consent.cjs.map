{"version":3,"file":"bib-consent.cjs","sources":["../node_modules/@lit/context/lib/value-notifier.js","../node_modules/@lit/context/lib/controllers/context-provider.js","../src/components/bib-consent/bib-consent.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nclass s{get value(){return this.o}set value(s){this.setValue(s)}setValue(s,t=!1){const i=t||!Object.is(s,this.o);this.o=s,i&&this.updateObservers()}constructor(s){this.subscriptions=new Map,this.updateObservers=()=>{for(const[s,{disposer:t}]of this.subscriptions)s(this.o,t)},void 0!==s&&(this.value=s)}addCallback(s,t,i){if(!i)return void s(this.value);this.subscriptions.has(s)||this.subscriptions.set(s,{disposer:()=>{this.subscriptions.delete(s)},consumerHost:t});const{disposer:h}=this.subscriptions.get(s);s(this.value,h)}clearCallbacks(){this.subscriptions.clear()}}export{s as ValueNotifier};\n//# sourceMappingURL=value-notifier.js.map\n","import{ContextRequestEvent as t}from\"../context-request-event.js\";import{ValueNotifier as s}from\"../value-notifier.js\";\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */class e extends Event{constructor(t){super(\"context-provider\",{bubbles:!0,composed:!0}),this.context=t}}class i extends s{constructor(s,e,i){super(void 0!==e.context?e.initialValue:i),this.onContextRequest=t=>{const s=t.composedPath()[0];t.context===this.context&&s!==this.host&&(t.stopPropagation(),this.addCallback(t.callback,s,t.subscribe))},this.onProviderRequest=s=>{const e=s.composedPath()[0];if(s.context!==this.context||e===this.host)return;const i=new Set;for(const[s,{consumerHost:e}]of this.subscriptions)i.has(s)||(i.add(s),e.dispatchEvent(new t(this.context,s,!0)));s.stopPropagation()},this.host=s,void 0!==e.context?this.context=e.context:this.context=e,this.attachListeners(),this.host.addController?.(this)}attachListeners(){this.host.addEventListener(\"context-request\",this.onContextRequest),this.host.addEventListener(\"context-provider\",this.onProviderRequest)}hostConnected(){this.host.dispatchEvent(new e(this.context))}}export{i as ContextProvider,e as ContextProviderEvent};\n//# sourceMappingURL=context-provider.js.map\n","import { html, LitElement } from 'lit'\nimport { createRef, ref } from 'lit/directives/ref.js'\nimport { ContextProvider, ContextConsumer } from '@lit/context'\nimport '@auroratide/toggle-switch/lib/define.js'\nimport '../bib-button/bib-button-close.js'\nimport './bib-consent-consent-dialog.js'\nimport './bib-consent-preferences-dialog.js'\nimport createPreferencesClient from './preferencesClient.js'\nimport { consentContext } from './consent-context.js'\nimport { EVENT_NAMES, SERVER_MODE, SERVER_REQUEST_DEFAULT_TIMEOUT } from './constants.js'\nimport { loggerFactory } from '@/utils/logger.js'\n\nconst debug = loggerFactory('bib-consent', '#cd5300')\n\n/**\n * The `BibConsent` class is a custom web component that provides a user interface for managing consent preferences.\n *\n * It includes the following functionality:\n * - Fetching and displaying the user's consent preferences from a server\n * - Allowing the user to update their consent preferences\n * - Saving the updated consent preferences to the server\n * - Providing a consent dialog and a preferences dialog for the user to interact with\n *\n * The component can be configured with the following properties:\n * - `serverUrl`: the URL of the server where the consent preferences are stored\n * - `serverRequestTimeout`: the timeout for requests to the server\n * - `[SERVER_MODE.LOCAL]`: a boolean indicating whether the component is running in local mode\n * - `debug`: a boolean indicating whether debug logging should be enabled\n * - `open`: a boolean indicating whether the consent dialog or preferences dialog is currently open\n *\n * The component uses the `@lit/context` library to manage the consent preferences as a shared context, and the `createPreferencesClient` function to interact with the server.\n */\nexport class BibConsent extends LitElement {\n  static properties = {\n    serverUrl: {\n      type: String,\n      attribute: 'server-url',\n      reflect: true\n    },\n    serverRequestTimeout: {\n      type: Number,\n      attribute: 'server-request-timeout',\n      reflect: true\n    },\n    [SERVER_MODE.LOCAL]: {\n      type: Boolean\n    },\n    debug: {\n      type: Boolean,\n      reflect: true\n    },\n    open: {\n      type: Boolean,\n      reflect: true\n    },\n  }\n\n  #preferencesClient\n  #preferences\n  #consentDialogRef\n  #preferencesDialogRef\n  #consentProvider\n  #consentConsumer\n\n  /**\n   * Initializes the `BibConsent` component, setting up the necessary state and references.\n   * \n   * The constructor performs the following tasks:\n   * - Calls the parent class constructor (`super()`)\n   * - Initializes the `open` property to `false`, indicating that no dialog is currently open\n   * - Sets the `currentDialog` property to `null`, as no dialog is currently open\n   * - Creates references to the consent dialog and preferences dialog using `createRef()`\n   * - Creates a `ContextProvider` instance for the consent context, with the component instance as the host and an initial value of `null`\n   * - Creates a `ContextConsumer` instance for the consent context, with the component instance as the host and the `savePreferences` method as the callback\n   */\n  constructor() {\n    super()\n    this.open = false\n    this.currentDialog = null\n    this.#consentDialogRef = createRef()\n    this.#preferencesDialogRef = createRef()\n    this.#consentProvider = new ContextProvider(this, { context: consentContext, initialValue: null })\n    this.#consentConsumer = new ContextConsumer(this, { context: consentContext, callback: this.savePreferences })\n  }\n\n  /**\n   * Gets the user's consent preferences.\n   * @returns {Object} The user's consent preferences.\n   */\n  get preferences() {\n    return this.#consentConsumer.value\n  }\n\n  /**\n   * Initializes the `BibConsent` component, sets up the necessary state and references, and handles events related to the preferences client.\n   * \n   * The `connectedCallback` method performs the following tasks:\n   * - Calls the parent class's `connectedCallback` method\n   * - Sets the `debug` property to `false` if it is not already defined\n   * - Sets the `serverUrl` property to `'https://bib.umontreal.ca/consent/server'` if it is not already defined\n   * - Sets the `serverRequestTimeout` property to `SERVER_REQUEST_DEFAULT_TIMEOUT` if it is not already defined\n   * - Creates a `PreferencesClient` instance and assigns it to the `#preferencesClient` property\n   * - Adds event listeners for the `EVENT_NAMES.READY` and `EVENT_NAMES.UPDATE` events on the `#preferencesClient` instance\n   * - Adds an event listener for the `context-request` event on the component's shadow root, which responds with the current preferences\n   */\n  async connectedCallback() {\n    super.connectedCallback()\n\n    this.debug = this.debug || false\n    this.serverUrl = this.serverUrl || 'https://bib.umontreal.ca/consent/server'\n    this.serverRequestTimeout = this.serverRequestTimeout || SERVER_REQUEST_DEFAULT_TIMEOUT\n    this.#preferencesClient = await createPreferencesClient({ host: this, serverUrl: this.serverUrl, reflectEvents: true })\n\n    this.#preferencesClient.addEventListener(EVENT_NAMES.READY, event => {\n\n      this.#debug(EVENT_NAMES.READY, 'event: ', event)\n\n      if (event.detail) {\n        // this.#preferences = event.detail\n        this.#consentProvider.setValue(event.detail)\n      } else {\n        this.#show('consent')\n      }\n    })\n  }\n\n  #debug() {\n    if (this.debug) {\n      debug(...arguments)\n    }\n  }\n\n  #close(emit = true) {\n    this.open = false\n    console.log('this.currentDialog: ', this.currentDialog)\n    this.currentDialog?.close(emit)\n    this.currentDialog = null\n  }\n\n  /**\n   * Closes the current dialog, if any, and sets the `open` property to `false`.\n   */\n  close() {\n    this.#close()\n  }\n\n  #show(panel = 'consent') {\n\n    if (typeof panel !== 'string' && !['consent', 'preferences'].includes(panel)) {\n      throw new TypeError(`The panel argument must be a string of either values 'consent' or 'preferences'. `, panel)\n    }\n\n    this.open = true\n\n    if (this.currentDialog) {\n      this.#debug('[#show] this.currentDialog', this.currentDialog)\n      this.currentDialog.close()\n    }\n\n    this.#debug('[show]', this.#consentDialogRef.value)\n    this.#debug('[show]', this.#preferencesDialogRef.value)\n    this.currentDialog = panel === 'consent' ? this.#consentDialogRef.value : this.#preferencesDialogRef.value\n    // this.#preferencesDialogRef.value?.show()\n    this.currentDialog.show()\n  }\n\n  /**\n   * Shows the consent dialog.\n   */\n  show() {\n    this.#show('consent')\n  }\n\n  /**\n   * Shows the preferences dialog.\n   */\n  showPreferences() {\n    this.#show('preferences')\n  }\n\n  /**\n   * Retrieves the user's consent preferences from the server.\n   *\n   * @returns {Promise<Object>} - A promise that resolves to the user's consent preferences.\n   */\n  async getPreferences() {\n    this.#preferences = await this.#preferencesClient.getPreferences()\n    return this.#preferences\n  }\n\n  /**\n   * Saves the user's consent preferences to the server.\n   *\n   * @param {Object} preferences - The user's consent preferences.\n   * @returns {Promise<boolean>} - A promise that resolves to `true` if the preferences were saved successfully, or `false` if there was an error.\n   */\n\n  async savePreferences(preferences) {\n    this.#debug('[savePreferences] preferences: ', preferences)\n    try {\n      await this.#preferencesClient.setPreferences(preferences)\n      this.#consentProvider.setValue(preferences)\n      return true\n    } catch (error) {\n      console.error('[savePreferences] error: ', error)\n      throw error\n    }\n  }\n\n  /**\n   * Resets the user's consent preferences to their default values.\n   *\n   * @returns {Promise<Object>} - A promise that resolves to the user's reset consent preferences.\n   */\n  async resetPreferences() {\n    this.#preferences = await this.#preferencesClient.resetPreferences()\n    return this.#preferences\n  }\n\n  async #handleUpdateEvent(event) {\n    this.#debug('[#handleUpdateEvent]', event)\n    const success = await this.savePreferences(event.detail)\n    this.#debug('[#handleUpdateEvent] success: ', success)\n    if (!success) {\n      // TODO: show error message\n      return\n    }\n    this.dispatchEvent(new CustomEvent(EVENT_NAMES.UPDATE, { detail: event.detail }))\n    this.#close()\n  }\n\n  #handleCloseEvent(event) {\n    event.stopPropagation()\n    this.#close(false)\n  }\n\n  render() {\n    return html`\n        <bib-consent-consent-dialog @update=\"${this.#handleUpdateEvent}\" @show-preferences=\"${() => this.#show('preferences')}\" ${ref(this.#consentDialogRef)} @close=\"${this.#handleCloseEvent}\"></bib-consent-consent-dialog>\n        <bib-consent-preferences-dialog @update=\"${this.#handleUpdateEvent}\" ${ref(this.#preferencesDialogRef)} @close=\"${this.#handleCloseEvent}\"></bib-consent-preferences-dialog>\n    `\n  }\n}\n\nif (!window.customElements.get('bib-consent')) {\n  window.customElements.define('bib-consent', BibConsent)\n}"],"names":["s","this","o","value","setValue","t","i","Object","is","updateObservers","constructor","subscriptions","Map","disposer","addCallback","has","set","delete","consumerHost","h","get","clearCallbacks","clear","e","Event","super","bubbles","composed","context","initialValue","onContextRequest","composedPath","host","stopPropagation","callback","subscribe","onProviderRequest","Set","add","dispatchEvent","attachListeners","addController","addEventListener","hostConnected","debug","loggerFactory","BibConsent","LitElement","__privateAdd","_u_instances","preferencesClient","preferences","consentDialogRef","preferencesDialogRef","consentProvider","consentConsumer","open","currentDialog","createRef","ContextProvider","consentContext","ContextConsumer","s$1","savePreferences","connectedCallback","serverUrl","serverRequestTimeout","SERVER_REQUEST_DEFAULT_TIMEOUT","createPreferencesClient","reflectEvents","EVENT_NAMES","READY","event","detail","close","show","showPreferences","getPreferences","setPreferences","error","console","resetPreferences","render","html","x","ref","handleCloseEvent","WeakSet","o_fn","arguments","h_fn","emit","log","c_fn","panel","includes","TypeError","a_fn","handleUpdateEvent","success","CustomEvent","UPDATE","l_fn","static","type","String","attribute","reflect","Number","SERVER_MODE","LOCAL","Boolean","window","customElements","define"],"mappings":"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","x_google_ignoreList":[0,1]}