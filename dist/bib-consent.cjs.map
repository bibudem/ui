{"version":3,"file":"bib-consent.cjs","sources":["../node_modules/@lit/context/lib/value-notifier.js","../node_modules/@lit/context/lib/controllers/context-provider.js","../src/components/bib-consent/bib-consent.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nclass s{get value(){return this.o}set value(s){this.setValue(s)}setValue(s,t=!1){const i=t||!Object.is(s,this.o);this.o=s,i&&this.updateObservers()}constructor(s){this.subscriptions=new Map,this.updateObservers=()=>{for(const[s,{disposer:t}]of this.subscriptions)s(this.o,t)},void 0!==s&&(this.value=s)}addCallback(s,t,i){if(!i)return void s(this.value);this.subscriptions.has(s)||this.subscriptions.set(s,{disposer:()=>{this.subscriptions.delete(s)},consumerHost:t});const{disposer:h}=this.subscriptions.get(s);s(this.value,h)}clearCallbacks(){this.subscriptions.clear()}}export{s as ValueNotifier};\n//# sourceMappingURL=value-notifier.js.map\n","import{ContextRequestEvent as t}from\"../context-request-event.js\";import{ValueNotifier as s}from\"../value-notifier.js\";\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */class e extends Event{constructor(t){super(\"context-provider\",{bubbles:!0,composed:!0}),this.context=t}}class i extends s{constructor(s,e,i){super(void 0!==e.context?e.initialValue:i),this.onContextRequest=t=>{const s=t.composedPath()[0];t.context===this.context&&s!==this.host&&(t.stopPropagation(),this.addCallback(t.callback,s,t.subscribe))},this.onProviderRequest=s=>{const e=s.composedPath()[0];if(s.context!==this.context||e===this.host)return;const i=new Set;for(const[s,{consumerHost:e}]of this.subscriptions)i.has(s)||(i.add(s),e.dispatchEvent(new t(this.context,s,!0)));s.stopPropagation()},this.host=s,void 0!==e.context?this.context=e.context:this.context=e,this.attachListeners(),this.host.addController?.(this)}attachListeners(){this.host.addEventListener(\"context-request\",this.onContextRequest),this.host.addEventListener(\"context-provider\",this.onProviderRequest)}hostConnected(){this.host.dispatchEvent(new e(this.context))}}export{i as ContextProvider,e as ContextProviderEvent};\n//# sourceMappingURL=context-provider.js.map\n","import { html, LitElement } from 'lit'\r\nimport { createRef, ref } from 'lit/directives/ref.js'\r\nimport { ContextProvider, ContextConsumer } from '@lit/context'\r\nimport '@auroratide/toggle-switch/lib/define.js'\r\nimport { loggerFactory } from '@/utils/logger.js'\r\nimport { addToGlobalBib } from '@/utils/bib.js'\r\nimport { ConsentTokens } from './ConsentTokens.js'\r\nimport createConsentClient from './consentClient.js'\r\nimport { consentContext } from './consent-context.js'\r\nimport '../bib-button/bib-button-close.js'\r\nimport './bib-consent-consent-dialog.js'\r\nimport './bib-consent-preferences-dialog.js'\r\nimport { CONSENT_STATES, EVENT_NAMES, SERVER_MODE, SERVER_REQUEST_DEFAULT_TIMEOUT, SERVER_DEFAULT_URL } from './constants.js'\r\n\r\nconst debug = loggerFactory('bib-consent', '#cd5300')\r\n\r\n/**\r\n * The `BibConsent` class is a custom web component that provides a user interface for managing consent preferences.\r\n *\r\n * It includes the following functionality:\r\n * - Fetching and displaying the user's consent preferences from a server\r\n * - Allowing the user to update their consent preferences\r\n * - Saving the updated consent preferences to the server\r\n * - Providing a consent dialog and a preferences dialog for the user to interact with\r\n *\r\n * The component can be configured with the following properties:\r\n * - `serverUrl`: the URL of the server where the consent preferences are stored\r\n * - `serverRequestTimeout`: the timeout for requests to the server\r\n * - `[SERVER_MODE.LOCAL]`: a boolean indicating whether the component is running in local mode\r\n * - `debug`: a boolean indicating whether debug logging should be enabled\r\n * - `open`: a boolean indicating whether the consent dialog or preferences dialog is currently open\r\n *\r\n * The component uses the `@lit/context` library to manage the consent preferences as a shared context, and the `createConsentClient` function to interact with the server.\r\n */\r\nexport class BibConsent extends LitElement {\r\n  static properties = {\r\n    serverUrl: {\r\n      type: String,\r\n      attribute: 'server-url'\r\n    },\r\n    serverRequestTimeout: {\r\n      type: Number,\r\n      attribute: 'server-request-timeout'\r\n    },\r\n    [SERVER_MODE.LOCAL]: {\r\n      type: Boolean\r\n    },\r\n    state: {\r\n      type: String\r\n    },\r\n    debug: {\r\n      type: Boolean,\r\n      reflect: true\r\n    },\r\n    open: {\r\n      type: Boolean,\r\n      reflect: true\r\n    },\r\n  }\r\n\r\n  _consentClient\r\n  #consentTokens\r\n  #consentProvider\r\n  #consentConsumer\r\n  #state = CONSENT_STATES.INDETERMINATE\r\n  #consentDialogRef\r\n  #preferencesDialogRef\r\n\r\n  /**\r\n   * Initializes the `BibConsent` component, setting up the necessary state and references.\r\n   * \r\n   * The constructor performs the following tasks:\r\n   * - Calls the parent class constructor (`super()`)\r\n   * - Initializes the `open` property to `false`, indicating that no dialog is currently open\r\n   * - Sets the `currentDialog` property to `null`, as no dialog is currently open\r\n   * - Creates references to the consent dialog and preferences dialog using `createRef()`\r\n   * - Creates a `ContextProvider` instance for the consent context, with the component instance as the host and an initial value of `null`\r\n   * - Creates a `ContextConsumer` instance for the consent context, with the component instance as the host and the `savePreferences` method as the callback\r\n   */\r\n  constructor() {\r\n    super()\r\n    this.open = false\r\n    this.currentDialog = null\r\n    this.#consentDialogRef = createRef()\r\n    this.#preferencesDialogRef = createRef()\r\n    this.#consentProvider = new ContextProvider(this, { context: consentContext, initialValue: new ConsentTokens() })\r\n    this.#consentConsumer = new ContextConsumer(this, { context: consentContext, callback: this.savePreferences })\r\n  }\r\n\r\n  /**\r\n   * Gets the current state of the BibConsent component.\r\n   * The state is determined by the user's input. Initially `indeterminate`, it turns `determinate` when the user has indicated their consent preferences.\r\n   * @readonly\r\n   * @returns {import('./constants.js').consentStateTypes} The current state of the BibConsent component, which can be one of the following values:\r\n   * - `indeterminate`: The user has not yet indicated their consent preferences.\r\n   * - `determinate`: The user has made their consent preferences.\r\n   */\r\n  get state() {\r\n    return this.#state\r\n  }\r\n\r\n  /**\r\n   * Gets the user's consent tokens.\r\n   * @readonly\r\n   * @returns {import('./ConsentTokens.js').ConsentTokens} The user's consent tokens.\r\n   */\r\n  get consentTokens() {\r\n    return this.#consentConsumer.value\r\n  }\r\n\r\n  /**\r\n   * Initializes the `BibConsent` component, sets up the necessary state and references, and handles events related to the consent client.\r\n   * \r\n   * The `connectedCallback` method performs the following tasks:\r\n   * - Calls the parent class's `connectedCallback` method\r\n   * - Sets the `debug` property to `false` if it is not already defined\r\n   * - Sets the `serverUrl` property to `'https://bib.umontreal.ca/consent/server'` if it is not already defined\r\n   * - Sets the `serverRequestTimeout` property to `SERVER_REQUEST_DEFAULT_TIMEOUT` if it is not already defined\r\n   * - Creates a `ConsentClient` instance and assigns it to the `_consentClient` property\r\n   * - Adds event listeners for the `EVENT_NAMES.READY` and `EVENT_NAMES.UPDATE` events on the `_consentClient` instance\r\n   * - Adds an event listener for the `context-request` event on the component's shadow root, which responds with the current tokens\r\n   */\r\n  async connectedCallback() {\r\n    super.connectedCallback()\r\n\r\n    this.debug = this.debug || false\r\n    this.serverUrl = this.serverUrl || SERVER_DEFAULT_URL\r\n    this.serverRequestTimeout = this.serverRequestTimeout || SERVER_REQUEST_DEFAULT_TIMEOUT\r\n    this._consentClient = await createConsentClient({ host: this, serverUrl: this.serverUrl, serverRequestTimeout: this.serverRequestTimeout, reflectEvents: true })\r\n\r\n    this._consentClient.addEventListener(EVENT_NAMES.READY, event => {\r\n      const { detail } = event\r\n\r\n      this.#debug(EVENT_NAMES.READY, 'event: ', event)\r\n\r\n      if (detail.state() === CONSENT_STATES.DETERMINATE) {\r\n        this.#setValue(detail)\r\n      } else {\r\n        this.#show('consent')\r\n      }\r\n    })\r\n  }\r\n\r\n  #setValue(value) {\r\n    this.#consentProvider.setValue(value)\r\n    this.#state = this.#consentProvider.value.state()\r\n  }\r\n\r\n  #debug() {\r\n    if (this.debug) {\r\n      debug(...arguments)\r\n    }\r\n  }\r\n\r\n  #close(emit = true) {\r\n    this.open = false\r\n    this.currentDialog?.close(emit)\r\n    this.currentDialog = null\r\n  }\r\n\r\n  /**\r\n   * Closes the current dialog, if any, and sets the `open` property to `false`.\r\n   */\r\n  close() {\r\n    this.#close()\r\n  }\r\n\r\n  #show(panel = 'consent') {\r\n\r\n    if (typeof panel !== 'string' && !['consent', 'preferences'].includes(panel)) {\r\n      throw new TypeError(`The panel argument must be a string of either values 'consent' or 'preferences'. `, panel)\r\n    }\r\n\r\n    this.open = true\r\n\r\n    if (this.currentDialog) {\r\n      this.#debug('[#show] this.currentDialog', this.currentDialog)\r\n      this.currentDialog.close()\r\n    }\r\n\r\n    this.#debug('[show]', this.#consentDialogRef.value)\r\n    this.#debug('[show]', this.#preferencesDialogRef.value)\r\n    this.currentDialog = panel === 'consent' ? this.#consentDialogRef.value : this.#preferencesDialogRef.value\r\n    this.currentDialog.show()\r\n  }\r\n\r\n  /**\r\n   * Shows the consent dialog.\r\n   */\r\n  show() {\r\n    this.#show('consent')\r\n  }\r\n\r\n  /**\r\n   * Shows the preferences dialog.\r\n   */\r\n  showPreferences() {\r\n    this.#show('preferences')\r\n  }\r\n\r\n  /**\r\n   * Retrieves the user's consent tokens from the server.\r\n   *\r\n   * @returns {Promise<Object>} - A promise that resolves to the user's consent tokens.\r\n   */\r\n  async getTokens() {\r\n    this.#consentTokens = await this._consentClient.getConsentTokens()\r\n    return this.#consentTokens\r\n  }\r\n\r\n  /**\r\n   * Saves the user's consent tokens to the server.\r\n   *\r\n   * @param {Object} preferences - The user's consent preferences.\r\n   * @returns {Promise<boolean>} - A promise that resolves to `true` if the preferences were saved successfully, or `false` if there was an error.\r\n   */\r\n\r\n  async saveTokens(tokens) {\r\n    this.#debug('[save] tokens: ', tokens)\r\n    const consentTokens = ConsentTokens.from(tokens)\r\n    try {\r\n      await this._consentClient.setConsentTokens(consentTokens)\r\n      this.#setValue(consentTokens)\r\n      return true\r\n    } catch (error) {\r\n      console.error('[savePreferences] error: ', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resets the user's consent preferences to their default values.\r\n   *\r\n   * @returns {Promise<Object>} - A promise that resolves to the user's reset consent preferences.\r\n   */\r\n  async resetTokens() {\r\n    this.#consentTokens = await this._consentClient.resetTokens()\r\n    return this.#consentTokens\r\n  }\r\n\r\n  async #handleUpdateEvent(event) {\r\n    this.#debug('[#handleUpdateEvent]', event)\r\n    const success = await this.saveTokens(event.detail)\r\n    this.#debug('[#handleUpdateEvent] success: ', success)\r\n    if (!success) {\r\n      // TODO: show error message\r\n      return\r\n    }\r\n    this.dispatchEvent(new CustomEvent(EVENT_NAMES.UPDATE, { detail: this.consentTokens }))\r\n    this.#close()\r\n  }\r\n\r\n  #handleCloseEvent(event) {\r\n    event.stopPropagation()\r\n    this.#close(false)\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n        <bib-consent-consent-dialog @update=\"${this.#handleUpdateEvent}\" @show-preferences=\"${() => this.#show('preferences')}\" ${ref(this.#consentDialogRef)} @close=\"${this.#handleCloseEvent}\"></bib-consent-consent-dialog>\r\n        <bib-consent-preferences-dialog @update=\"${this.#handleUpdateEvent}\" ${ref(this.#preferencesDialogRef)} @close=\"${this.#handleCloseEvent}\"></bib-consent-preferences-dialog>\r\n    `\r\n  }\r\n}\r\n\r\nif (!window.customElements.get('bib-consent')) {\r\n  window.customElements.define('bib-consent', BibConsent)\r\n}\r\n\r\naddToGlobalBib('consent', {})"],"names":["s","this","o","value","setValue","t","i","Object","is","updateObservers","constructor","subscriptions","Map","disposer","addCallback","has","set","delete","consumerHost","h","get","clearCallbacks","clear","e","Event","super","bubbles","composed","context","initialValue","onContextRequest","composedPath","host","stopPropagation","callback","subscribe","onProviderRequest","Set","add","dispatchEvent","attachListeners","addController","addEventListener","hostConnected","debug","loggerFactory","BibConsent","LitElement","__privateAdd","_p_instances","_consentClient","consentTokens","consentProvider","consentConsumer","state","CONSENT_STATES","INDETERMINATE","consentDialogRef","preferencesDialogRef","open","currentDialog","createRef","ContextProvider","consentContext","ConsentTokens","ContextConsumer","s$1","savePreferences","connectedCallback","serverUrl","SERVER_DEFAULT_URL","serverRequestTimeout","SERVER_REQUEST_DEFAULT_TIMEOUT","createConsentClient","reflectEvents","EVENT_NAMES","READY","event","detail","DETERMINATE","close","show","showPreferences","getTokens","getConsentTokens","tokens","from","setConsentTokens","error","console","resetTokens","render","html","x","ref","handleCloseEvent","handleUpdateEvent","u_fn","WeakSet","c_fn","r_fn","arguments","h_fn","emit","a_fn","panel","includes","TypeError","success","saveTokens","CustomEvent","UPDATE","static","type","String","attribute","Number","SERVER_MODE","LOCAL","Boolean","reflect","window","customElements","define","addToGlobalBib"],"mappings":"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","x_google_ignoreList":[0,1]}