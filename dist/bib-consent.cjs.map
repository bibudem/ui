{"version":3,"file":"bib-consent.cjs","sources":["../node_modules/@lit/context/development/lib/value-notifier.js","../node_modules/@lit/context/development/lib/controllers/context-provider.js","../src/components/bib-consent/bib-consent.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n/**\n * A simple class which stores a value, and triggers registered callbacks when\n * the value is changed via its setter.\n *\n * An implementor might use other observable patterns such as MobX or Redux to\n * get behavior like this. But this is a pretty minimal approach that will\n * likely work for a number of use cases.\n */\nexport class ValueNotifier {\n    get value() {\n        return this._value;\n    }\n    set value(v) {\n        this.setValue(v);\n    }\n    setValue(v, force = false) {\n        const update = force || !Object.is(v, this._value);\n        this._value = v;\n        if (update) {\n            this.updateObservers();\n        }\n    }\n    constructor(defaultValue) {\n        this.subscriptions = new Map();\n        this.updateObservers = () => {\n            for (const [callback, { disposer }] of this.subscriptions) {\n                callback(this._value, disposer);\n            }\n        };\n        if (defaultValue !== undefined) {\n            this.value = defaultValue;\n        }\n    }\n    addCallback(callback, consumerHost, subscribe) {\n        if (!subscribe) {\n            // just call the callback once and we're done\n            callback(this.value);\n            return;\n        }\n        if (!this.subscriptions.has(callback)) {\n            this.subscriptions.set(callback, {\n                disposer: () => {\n                    this.subscriptions.delete(callback);\n                },\n                consumerHost,\n            });\n        }\n        const { disposer } = this.subscriptions.get(callback);\n        callback(this.value, disposer);\n    }\n    clearCallbacks() {\n        this.subscriptions.clear();\n    }\n}\n//# sourceMappingURL=value-notifier.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { ContextRequestEvent } from '../context-request-event.js';\nimport { ValueNotifier } from '../value-notifier.js';\nexport class ContextProviderEvent extends Event {\n    /**\n     *\n     * @param context the context which this provider can provide\n     */\n    constructor(context) {\n        super('context-provider', { bubbles: true, composed: true });\n        this.context = context;\n    }\n}\n/**\n * A ReactiveController which adds context provider behavior to a\n * custom element.\n *\n * This controller simply listens to the `context-request` event when\n * the host is connected to the DOM and registers the received callbacks\n * against its observable Context implementation.\n *\n * The controller may also be attached to any HTML element in which case it's\n * up to the user to call hostConnected() when attached to the DOM. This is\n * done automatically for any custom elements implementing\n * ReactiveControllerHost.\n */\nexport class ContextProvider extends ValueNotifier {\n    constructor(host, contextOrOptions, initialValue) {\n        super(contextOrOptions.context !== undefined\n            ? contextOrOptions.initialValue\n            : initialValue);\n        this.onContextRequest = (ev) => {\n            // Only call the callback if the context matches.\n            // Also, in case an element is a consumer AND a provider\n            // of the same context, we want to avoid the element to self-register.\n            // The check on composedPath (as opposed to ev.target) is to cover cases\n            // where the consumer is in the shadowDom of the provider (in which case,\n            // event.target === this.host because of event retargeting).\n            const consumerHost = ev.composedPath()[0];\n            if (ev.context !== this.context || consumerHost === this.host) {\n                return;\n            }\n            ev.stopPropagation();\n            this.addCallback(ev.callback, consumerHost, ev.subscribe);\n        };\n        /**\n         * When we get a provider request event, that means a child of this element\n         * has just woken up. If it's a provider of our context, then we may need to\n         * re-parent our subscriptions, because is a more specific provider than us\n         * for its subtree.\n         */\n        this.onProviderRequest = (ev) => {\n            // Ignore events when the context doesn't match.\n            // Also, in case an element is a consumer AND a provider\n            // of the same context it shouldn't provide to itself.\n            // We use composedPath (as opposed to ev.target) to cover cases\n            // where the consumer is in the shadowDom of the provider (in which case,\n            // event.target === this.host because of event retargeting).\n            const childProviderHost = ev.composedPath()[0];\n            if (ev.context !== this.context || childProviderHost === this.host) {\n                return;\n            }\n            // Re-parent all of our subscriptions in case this new child provider\n            // should take them over.\n            const seen = new Set();\n            for (const [callback, { consumerHost }] of this.subscriptions) {\n                // Prevent infinite loops in the case where a one host element\n                // is providing the same context multiple times.\n                //\n                // While normally it's a no-op to attempt to re-parent a subscription\n                // that already has its proper parent, in the case where there's more\n                // than one ValueProvider for the same context on the same hostElement,\n                // they will each call the consumer, and since they will each have their\n                // own dispose function, a well behaved consumer will notice the change\n                // in dispose function and call their old one.\n                //\n                // This will cause the subscriptions to thrash, but worse, without this\n                // set check here, we can end up in an infinite loop, as we add and remove\n                // the same subscriptions onto the end of the map over and over.\n                if (seen.has(callback)) {\n                    continue;\n                }\n                seen.add(callback);\n                consumerHost.dispatchEvent(new ContextRequestEvent(this.context, callback, true));\n            }\n            ev.stopPropagation();\n        };\n        this.host = host;\n        if (contextOrOptions.context !== undefined) {\n            this.context = contextOrOptions.context;\n        }\n        else {\n            this.context = contextOrOptions;\n        }\n        this.attachListeners();\n        this.host.addController?.(this);\n    }\n    attachListeners() {\n        this.host.addEventListener('context-request', this.onContextRequest);\n        this.host.addEventListener('context-provider', this.onProviderRequest);\n    }\n    hostConnected() {\n        // emit an event to signal a provider is available for this context\n        this.host.dispatchEvent(new ContextProviderEvent(this.context));\n    }\n}\n//# sourceMappingURL=context-provider.js.map","import { html, LitElement } from 'lit'\nimport { createRef, ref } from 'lit/directives/ref.js'\nimport { ContextProvider, ContextConsumer } from '@lit/context'\nimport '@auroratide/toggle-switch/lib/define.js'\nimport { loggerFactory } from '@/utils/logger.js'\nimport { addToGlobalBib } from '@/utils/bib.js'\nimport '../bib-button/bib-button-close.js'\nimport './bib-consent-consent-dialog.js'\nimport './bib-consent-preferences-dialog.js'\nimport createConsentClient from './consentClient.js'\nimport { consentContext } from './consent-context.js'\nimport { EVENT_NAMES, SERVER_MODE, SERVER_REQUEST_DEFAULT_TIMEOUT, CONSENT_STATES } from './constants.js'\nimport { ConsentTokens } from './ConsentTokens.js'\n\nconst debug = loggerFactory('bib-consent', '#cd5300')\n\n/**\n * The `BibConsent` class is a custom web component that provides a user interface for managing consent preferences.\n *\n * It includes the following functionality:\n * - Fetching and displaying the user's consent preferences from a server\n * - Allowing the user to update their consent preferences\n * - Saving the updated consent preferences to the server\n * - Providing a consent dialog and a preferences dialog for the user to interact with\n *\n * The component can be configured with the following properties:\n * - `serverUrl`: the URL of the server where the consent preferences are stored\n * - `serverRequestTimeout`: the timeout for requests to the server\n * - `[SERVER_MODE.LOCAL]`: a boolean indicating whether the component is running in local mode\n * - `debug`: a boolean indicating whether debug logging should be enabled\n * - `open`: a boolean indicating whether the consent dialog or preferences dialog is currently open\n *\n * The component uses the `@lit/context` library to manage the consent preferences as a shared context, and the `createConsentClient` function to interact with the server.\n */\n/**\n * The `BibConsent` class is a custom web component that provides a user interface for managing consent preferences.\n *\n * It includes the following functionality:\n * - Fetching and displaying the user's consent preferences from a server\n * - Allowing the user to update their consent preferences\n * - Saving the updated consent preferences to the server\n * - Providing a consent dialog and a preferences dialog for the user to interact with\n *\n * The component can be configured with the following properties:\n * - `serverUrl`: the URL of the server where the consent preferences are stored\n * - `serverRequestTimeout`: the timeout for requests to the server\n * - `[SERVER_MODE.LOCAL]`: a boolean indicating whether the component is running in local mode\n * - `debug`: a boolean indicating whether debug logging should be enabled\n * - `open`: a boolean indicating whether the consent dialog or preferences dialog is currently open\n *\n * The component uses the `@lit/context` library to manage the consent preferences as a shared context, and the `createConsentClient` function to interact with the server.\n */\nexport class BibConsent extends LitElement {\n  static properties = {\n    serverUrl: {\n      type: String,\n      attribute: 'server-url',\n      reflect: true\n    },\n    serverRequestTimeout: {\n      type: Number,\n      attribute: 'server-request-timeout',\n      reflect: true\n    },\n    [SERVER_MODE.LOCAL]: {\n      type: Boolean\n    },\n    state: {\n      type: String\n    },\n    debug: {\n      type: Boolean,\n      reflect: true\n    },\n    open: {\n      type: Boolean,\n      reflect: true\n    },\n  }\n\n  _consentClient\n  #consentTokens\n  #consentProvider\n  #consentConsumer\n  #state = CONSENT_STATES.INDETERMINATE\n  #consentDialogRef\n  #preferencesDialogRef\n\n  /**\n   * Initializes the `BibConsent` component, setting up the necessary state and references.\n   * \n   * The constructor performs the following tasks:\n   * - Calls the parent class constructor (`super()`)\n   * - Initializes the `open` property to `false`, indicating that no dialog is currently open\n   * - Sets the `currentDialog` property to `null`, as no dialog is currently open\n   * - Creates references to the consent dialog and preferences dialog using `createRef()`\n   * - Creates a `ContextProvider` instance for the consent context, with the component instance as the host and an initial value of `null`\n   * - Creates a `ContextConsumer` instance for the consent context, with the component instance as the host and the `savePreferences` method as the callback\n   */\n  constructor() {\n    super()\n    this.open = false\n    this.currentDialog = null\n    this.#consentDialogRef = createRef()\n    this.#preferencesDialogRef = createRef()\n    this.#consentProvider = new ContextProvider(this, { context: consentContext, initialValue: new ConsentTokens() })\n    this.#consentConsumer = new ContextConsumer(this, { context: consentContext, callback: this.savePreferences })\n  }\n\n  /**\n   * Gets the current state of the BibConsent component.\n   * The state is determined by the user's input. Initially `indeterminate`, it turns `determinate` when the user has indicated their consent preferences.\n   * @readonly\n   * @returns {import('./constants.js').consentStateTypes} The current state of the BibConsent component, which can be one of the following values:\n   * - `indeterminate`: The user has not yet indicated their consent preferences.\n   * - `determinate`: The user has made their consent preferences.\n   */\n  get state() {\n    return this.#state\n  }\n\n  /**\n   * Gets the user's consent tokens.\n   * @readonly\n   * @returns {import('./ConsentTokens.js').ConsentTokens} The user's consent tokens.\n   */\n  get consentTokens() {\n    return this.#consentConsumer.value\n  }\n\n  /**\n   * Initializes the `BibConsent` component, sets up the necessary state and references, and handles events related to the consent client.\n   * \n   * The `connectedCallback` method performs the following tasks:\n   * - Calls the parent class's `connectedCallback` method\n   * - Sets the `debug` property to `false` if it is not already defined\n   * - Sets the `serverUrl` property to `'https://bib.umontreal.ca/consent/server'` if it is not already defined\n   * - Sets the `serverRequestTimeout` property to `SERVER_REQUEST_DEFAULT_TIMEOUT` if it is not already defined\n   * - Creates a `ConsentClient` instance and assigns it to the `_consentClient` property\n   * - Adds event listeners for the `EVENT_NAMES.READY` and `EVENT_NAMES.UPDATE` events on the `_consentClient` instance\n   * - Adds an event listener for the `context-request` event on the component's shadow root, which responds with the current tokens\n   */\n  async connectedCallback() {\n    super.connectedCallback()\n\n    this.debug = this.debug || false\n    this.serverUrl = this.serverUrl || 'https://bib.umontreal.ca/consent/server'\n    this.serverRequestTimeout = this.serverRequestTimeout || SERVER_REQUEST_DEFAULT_TIMEOUT\n    this._consentClient = await createConsentClient({ host: this, serverUrl: this.serverUrl, serverRequestTimeout: this.serverRequestTimeout, reflectEvents: true })\n\n    this._consentClient.addEventListener(EVENT_NAMES.READY, event => {\n      const { detail } = event\n\n      this.#debug(EVENT_NAMES.READY, 'event: ', event)\n\n      if (detail.state() === CONSENT_STATES.DETERMINATE) {\n        this.#setValue(detail)\n      } else {\n        this.#show('consent')\n      }\n    })\n  }\n\n  #setValue(value) {\n    this.#consentProvider.setValue(value)\n    this.#state = this.#consentProvider.value.state()\n  }\n\n  #debug() {\n    if (this.debug) {\n      debug(...arguments)\n    }\n  }\n\n  #close(emit = true) {\n    this.open = false\n    this.currentDialog?.close(emit)\n    this.currentDialog = null\n  }\n\n  /**\n   * Closes the current dialog, if any, and sets the `open` property to `false`.\n   */\n  close() {\n    this.#close()\n  }\n\n  #show(panel = 'consent') {\n\n    if (typeof panel !== 'string' && !['consent', 'preferences'].includes(panel)) {\n      throw new TypeError(`The panel argument must be a string of either values 'consent' or 'preferences'. `, panel)\n    }\n\n    this.open = true\n\n    if (this.currentDialog) {\n      this.#debug('[#show] this.currentDialog', this.currentDialog)\n      this.currentDialog.close()\n    }\n\n    this.#debug('[show]', this.#consentDialogRef.value)\n    this.#debug('[show]', this.#preferencesDialogRef.value)\n    this.currentDialog = panel === 'consent' ? this.#consentDialogRef.value : this.#preferencesDialogRef.value\n    this.currentDialog.show()\n  }\n\n  /**\n   * Shows the consent dialog.\n   */\n  show() {\n    this.#show('consent')\n  }\n\n  /**\n   * Shows the preferences dialog.\n   */\n  showPreferences() {\n    this.#show('preferences')\n  }\n\n  /**\n   * Retrieves the user's consent tokens from the server.\n   *\n   * @returns {Promise<Object>} - A promise that resolves to the user's consent tokens.\n   */\n  async getTokens() {\n    this.#consentTokens = await this._consentClient.getConsentTokens()\n    return this.#consentTokens\n  }\n\n  /**\n   * Saves the user's consent tokens to the server.\n   *\n   * @param {Object} preferences - The user's consent preferences.\n   * @returns {Promise<boolean>} - A promise that resolves to `true` if the preferences were saved successfully, or `false` if there was an error.\n   */\n\n  async saveTokens(tokens) {\n    this.#debug('[save] tokens: ', tokens)\n    const consentTokens = ConsentTokens.from(tokens)\n    try {\n      await this._consentClient.setConsentTokens(consentTokens)\n      this.#setValue(consentTokens)\n      return true\n    } catch (error) {\n      console.error('[savePreferences] error: ', error)\n      throw error\n    }\n  }\n\n  /**\n   * Resets the user's consent preferences to their default values.\n   *\n   * @returns {Promise<Object>} - A promise that resolves to the user's reset consent preferences.\n   */\n  async resetTokens() {\n    this.#consentTokens = await this._consentClient.resetTokens()\n    return this.#consentTokens\n  }\n\n  async #handleUpdateEvent(event) {\n    this.#debug('[#handleUpdateEvent]', event)\n    const success = await this.saveTokens(event.detail)\n    this.#debug('[#handleUpdateEvent] success: ', success)\n    if (!success) {\n      // TODO: show error message\n      return\n    }\n    this.dispatchEvent(new CustomEvent(EVENT_NAMES.UPDATE, { detail: this.consentTokens }))\n    this.#close()\n  }\n\n  #handleCloseEvent(event) {\n    event.stopPropagation()\n    this.#close(false)\n  }\n\n  render() {\n    return html`\n        <bib-consent-consent-dialog @update=\"${this.#handleUpdateEvent}\" @show-preferences=\"${() => this.#show('preferences')}\" ${ref(this.#consentDialogRef)} @close=\"${this.#handleCloseEvent}\"></bib-consent-consent-dialog>\n        <bib-consent-preferences-dialog @update=\"${this.#handleUpdateEvent}\" ${ref(this.#preferencesDialogRef)} @close=\"${this.#handleCloseEvent}\"></bib-consent-preferences-dialog>\n    `\n  }\n}\n\nif (!window.customElements.get('bib-consent')) {\n  window.customElements.define('bib-consent', BibConsent)\n}\n\naddToGlobalBib('consent', {})"],"names":["ValueNotifier","this","_value","value","v","setValue","force","update","Object","is","updateObservers","constructor","defaultValue","subscriptions","Map","callback","disposer","addCallback","consumerHost","subscribe","has","set","delete","get","clearCallbacks","clear","ContextProviderEvent","Event","context","super","bubbles","composed","ContextProvider","host","contextOrOptions","initialValue","onContextRequest","ev","composedPath","stopPropagation","onProviderRequest","childProviderHost","seen","Set","add","dispatchEvent","ContextRequestEvent","undefined","attachListeners","addController","addEventListener","hostConnected","debug","loggerFactory","BibConsent","LitElement","__privateAdd","_p_instances","_consentClient","consentTokens","consentProvider","consentConsumer","state","CONSENT_STATES","INDETERMINATE","consentDialogRef","preferencesDialogRef","open","currentDialog","createRef","consentContext","ConsentTokens","ContextConsumer","savePreferences","connectedCallback","serverUrl","serverRequestTimeout","SERVER_REQUEST_DEFAULT_TIMEOUT","createConsentClient","reflectEvents","EVENT_NAMES","READY","event","detail","DETERMINATE","show","close","showPreferences","getTokens","getConsentTokens","saveTokens","tokens","from","setConsentTokens","error","console","resetTokens","render","html","ref","handleCloseEvent","handleUpdateEvent","u_fn","WeakSet","c_fn","r_fn","arguments","h_fn","emit","a_fn","panel","includes","TypeError","success","CustomEvent","UPDATE","static","type","String","attribute","reflect","Number","SERVER_MODE","LOCAL","Boolean","window","customElements","define","addToGlobalBib"],"mappings":"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","x_google_ignoreList":[0,1]}