{"version":3,"file":"PreferenceStorage.js","sources":["../node_modules/lodash-es/_WeakMap.js","../node_modules/lodash-es/_nativeKeys.js","../node_modules/lodash-es/_baseKeys.js","../node_modules/lodash-es/_getSymbols.js","../node_modules/lodash-es/_arrayFilter.js","../node_modules/lodash-es/stubArray.js","../node_modules/lodash-es/_getAllKeys.js","../node_modules/lodash-es/_baseGetAllKeys.js","../node_modules/lodash-es/keys.js","../node_modules/lodash-es/_arrayPush.js","../node_modules/lodash-es/_DataView.js","../node_modules/lodash-es/_Promise.js","../node_modules/lodash-es/_Set.js","../node_modules/lodash-es/_getTag.js","../node_modules/lodash-es/_SetCache.js","../node_modules/lodash-es/_arraySome.js","../node_modules/lodash-es/_setCacheAdd.js","../node_modules/lodash-es/_setCacheHas.js","../node_modules/lodash-es/_equalArrays.js","../node_modules/lodash-es/_cacheHas.js","../node_modules/lodash-es/_mapToArray.js","../node_modules/lodash-es/_setToArray.js","../node_modules/lodash-es/_equalByTag.js","../node_modules/lodash-es/_equalObjects.js","../node_modules/lodash-es/_baseIsEqualDeep.js","../node_modules/lodash-es/_baseIsEqual.js","../src/components/bib-consent/PreferenceStorage.js","../node_modules/lodash-es/isEqual.js"],"sourcesContent":["import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nexport default WeakMap;\n","import overArg from './_overArg.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nexport default nativeKeys;\n","import isPrototype from './_isPrototype.js';\nimport nativeKeys from './_nativeKeys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeys;\n","import arrayFilter from './_arrayFilter.js';\nimport stubArray from './stubArray.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nexport default getSymbols;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default arrayFilter;\n","/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nexport default stubArray;\n","import baseGetAllKeys from './_baseGetAllKeys.js';\nimport getSymbols from './_getSymbols.js';\nimport keys from './keys.js';\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nexport default getAllKeys;\n","import arrayPush from './_arrayPush.js';\nimport isArray from './isArray.js';\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nexport default baseGetAllKeys;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeys from './_baseKeys.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nexport default keys;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nexport default arrayPush;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nexport default DataView;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nexport default Promise;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nexport default Set;\n","import DataView from './_DataView.js';\nimport Map from './_Map.js';\nimport Promise from './_Promise.js';\nimport Set from './_Set.js';\nimport WeakMap from './_WeakMap.js';\nimport baseGetTag from './_baseGetTag.js';\nimport toSource from './_toSource.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nexport default getTag;\n","import MapCache from './_MapCache.js';\nimport setCacheAdd from './_setCacheAdd.js';\nimport setCacheHas from './_setCacheHas.js';\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nexport default SetCache;\n","/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport default arraySome;\n","/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nexport default setCacheAdd;\n","/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nexport default setCacheHas;\n","import SetCache from './_SetCache.js';\nimport arraySome from './_arraySome.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalArrays;\n","/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nexport default cacheHas;\n","/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nexport default mapToArray;\n","/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nexport default setToArray;\n","import Symbol from './_Symbol.js';\nimport Uint8Array from './_Uint8Array.js';\nimport eq from './eq.js';\nimport equalArrays from './_equalArrays.js';\nimport mapToArray from './_mapToArray.js';\nimport setToArray from './_setToArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nexport default equalByTag;\n","import getAllKeys from './_getAllKeys.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Check that cyclic values are equal.\n  var objStacked = stack.get(object);\n  var othStacked = stack.get(other);\n  if (objStacked && othStacked) {\n    return objStacked == other && othStacked == object;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalObjects;\n","import Stack from './_Stack.js';\nimport equalArrays from './_equalArrays.js';\nimport equalByTag from './_equalByTag.js';\nimport equalObjects from './_equalObjects.js';\nimport getTag from './_getTag.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nexport default baseIsEqualDeep;\n","import baseIsEqualDeep from './_baseIsEqualDeep.js';\nimport isObjectLike from './isObjectLike.js';\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nexport default baseIsEqual;\n","import { openDB } from 'idb'\nimport { EVENT_NAMES, DEFAULT_PREFERENCES, DB_NAME, DB_VERSION, DB_STORE_NAME } from './constants.js'\nimport { isEqual, isObject } from 'lodash-es'\n\n\n/**\n * Manages the storage and retrieval of user preferences in an IndexedDB database.\n *\n * This class extends the `EventTarget` class and provides methods to add event listeners,\n * dispatch events, initialize the IndexedDB database, retrieve stored preferences,\n * and set new preferences. It also includes data validation to ensure the preferences\n * object has the expected structure and values.\n *\n * The class uses the `idb` library to interact with IndexedDB, and the `lodash-es`\n * library for utility functions.\n */\nclass PreferenceStorage extends EventTarget {\n\n  constructor() {\n    super()\n    this.db = null\n  }\n\n  /*\n   * @param {string} type\n   * @param {function} listener\n   * @return void\n   */\n  listen(listener) {\n    super.addEventListener(EVENT_NAMES.UPDATE, listener)\n  }\n\n  /*\n   * @param {object} dispatchData\n   * @return void\n   */\n  dispatchEvent({ detail }) {\n    super.dispatchEvent(\n      new CustomEvent(\n        EVENT_NAMES.UPDATE,\n        { detail }\n      )\n    )\n  }\n\n  /**\n   * Initializes the IndexedDB database for storing user preferences.\n   *\n   * This method is responsible for creating the IndexedDB database and the object store\n   * if it doesn't already exist. It uses the `openDB` function from the `idb` library\n   * to interact with IndexedDB.\n   *\n   * If there is an error while initializing the database, it throws an error with the\n   * message \"Something went wrong with indexedDB:\".\n   */\n  async init() {\n    try {\n      this.db = await openDB(DB_NAME, DB_VERSION, {\n        upgrade(db) {\n          // Checks if the object store exists:\n          if (!db.objectStoreNames.contains(DB_STORE_NAME)) {\n            db.createObjectStore(DB_STORE_NAME)\n          }\n        }\n      })\n\n    } catch (error) {\n      throw new Error('Something went wrong with indexedDB:', error)\n    }\n  }\n\n  /**\n   * Retrieves the user preferences from the IndexedDB database.\n   *\n   * This method checks if the preferences are stored in the database, and if so, returns them.\n   * If the preferences are not found in the database, it returns `null`.\n   *\n   * @returns {object|null} The user preferences, or `null` if not found.\n   */\n  async getPreferences() {\n\n    const preferences = await this.db.get(DB_STORE_NAME, 'preferences')\n\n    // If preferences is undefined, return null\n    if (preferences === undefined) {\n      return null\n    }\n\n    return preferences\n  }\n\n  async #doSetPreferences(preferences) {\n\n    try {\n      // Check if there is a change is preferences.\n      // If so, save it and dispatch an event\n      const oldPreferences = await this.getPreferences()\n      if (!isEqual(oldPreferences, preferences)) {\n        await this.db.put(DB_STORE_NAME, preferences, 'preferences')\n        return preferences\n      }\n\n      // No change in preferences, return false\n      return false\n    } catch (error) {\n      throw new Error('Something went wrong with indexedDB:', error)\n    }\n  }\n\n  /*\n   * @param {object} preferences\n   * @return void\n   */\n  async setPreferences(preferences) {\n\n    //\n    // Data validation\n    // We check if:\n    // - argument is an object\n    // - all props are present\n    // - all props have boolean values\n\n    if (!isObject(preferences)) {\n      throw new TypeError('Preferences must be an object.')\n    }\n\n    const requiredProps = Object.keys(DEFAULT_PREFERENCES)\n    const sameProps = arraysHaveSameItems(requiredProps, Object.keys(preferences))\n\n    if (!sameProps) {\n      throw new TypeError(`Preferences requires all those fields: ${requiredProps.join(', ')}.`)\n    }\n\n    const containsOnlyBooleanValues = Object.values(preferences).every(value => typeof value === 'boolean')\n\n    if (!containsOnlyBooleanValues) {\n      throw new TypeError(`Preferences values must be a boolean.`)\n    }\n\n    return await this.#doSetPreferences(preferences)\n\n  }\n\n  /**\n   * Resets the user's preferences to their default values.\n   * @returns {Promise<void>} A promise that resolves when the preferences have been reset.\n   */\n  async resetPreferences() {\n    return await this.#doSetPreferences(null)\n  }\n}\n\n/**\n * Checks if two arrays have the same items, regardless of order.\n * @param {Array} arr1 - The first array to compare.\n * @param {Array} arr2 - The second array to compare.\n * @returns {boolean} - True if the arrays have the same items, false otherwise.\n */\nfunction arraysHaveSameItems(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false\n  }\n\n  const sortedArr1 = [...arr1].sort()\n  const sortedArr2 = [...arr2].sort()\n  return sortedArr1.every((item, index) => item === sortedArr2[index])\n}\n\nlet preferenceStorage\n\n/**\n * Gets the singleton instance of the PreferenceStorage class, initializing it if necessary.\n * @returns {Promise<PreferenceStorage>} The singleton instance of PreferenceStorage.\n */\nexport default async function getPreferenceStorage() {\n  if (!preferenceStorage) {\n    preferenceStorage = new PreferenceStorage()\n    await preferenceStorage.init()\n  }\n  return preferenceStorage\n}","import baseIsEqual from './_baseIsEqual.js';\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nexport default isEqual;\n"],"names":["WeakMap","getNative","root","nativeKeys","overArg","Object","keys","hasOwnProperty","prototype","propertyIsEnumerable","nativeGetSymbols","getOwnPropertySymbols","getSymbols","object","array","predicate","index","length","resIndex","result","value","symbol","call","getAllKeys","keysFunc","symbolsFunc","isArrayLike","arrayLikeKeys","isPrototype","key","push","isArray","values","offset","DataView","Promise","Set","mapTag","promiseTag","setTag","weakMapTag","dataViewTag","dataViewCtorString","toSource","mapCtorString","Map","promiseCtorString","setCtorString","weakMapCtorString","getTag","baseGetTag","SetCache","this","__data__","MapCache","add","arraySome","ArrayBuffer","resolve","Ctor","constructor","ctorString","set","has","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","equalArrays","other","bitmask","customizer","equalFunc","stack","isPartial","arrLength","othLength","arrStacked","get","othStacked","seen","arrValue","othValue","compared","undefined","othIndex","mapToArray","map","Array","size","forEach","setToArray","symbolProto","Symbol","symbolValueOf","valueOf","argsTag","arrayTag","objectTag","baseIsEqual","isObjectLike","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","isBuffer","Stack","isTypedArray","tag","byteLength","byteOffset","buffer","Uint8Array","eq","name","message","convert","stacked","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","objStacked","skipCtor","objValue","objCtor","othCtor","PreferenceStorage","EventTarget","super","db","listener","addEventListener","EVENT_NAMES","UPDATE","dispatchEvent","detail","CustomEvent","e","openDB","DB_NAME","DB_VERSION","objectStoreNames","contains","DB_STORE_NAME","createObjectStore","error","Error","preferences","setPreferences","isObject","TypeError","requiredProps","DEFAULT_PREFERENCES","arr1","arr2","sortedArr1","sort","sortedArr2","every","item","join","resetPreferences","doSetPreferences","getPreferences","put","preferenceStorage","async","getPreferenceStorage","init"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27]}