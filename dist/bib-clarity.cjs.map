{"version":3,"file":"bib-clarity.cjs","sources":["../node_modules/@microsoft/clarity/index.js","../node_modules/@microsoft/clarity/src/utils.js","../src/components/bib-clarity/bib-clarity.js"],"sourcesContent":["import { injectScript } from \"./src/utils\"\n\nconst Clarity = {\n    init(projectId) {\n        injectScript(projectId, 'clarity-script');\n    },\n\n    setTag(key, value) {\n        window.clarity('set', key, value);\n    },\n\n    identify(customerId, customSessionId, customPageId, friendlyName) {\n        window.clarity('identify', customerId, customSessionId, customPageId, friendlyName);\n    },\n\n    consent(consent = true) {\n        window.clarity('consent', consent);\n    },\n\n    upgrade(reason) {\n        window.clarity('upgrade', reason);\n    },\n\n    event(eventName) {\n        window.clarity('event', eventName);\n    },\n};\n\nexport default Clarity;","export function injectScript(projectId){\r\n  try{\r\n      (function (c, l, a, r, i, t, y) {\r\n          if(l.getElementById(\"clarity-script\")){\r\n            return;\r\n          }\r\n          c[a] = c[a] ||\r\n            function () {\r\n              (c[a].q = c[a].q || []).push(arguments);\r\n            };\r\n          t = l.createElement(r);\r\n          t.async = 1;\r\n          t.src = \"https://www.clarity.ms/tag/\" + i + \"?ref=npm\";\r\n          t.id = \"clarity-script\"\r\n          y = l.getElementsByTagName(r)[0];\r\n          y.parentNode.insertBefore(t, y);\r\n        })(window, document, \"clarity\", \"script\", projectId);\r\n      return;\r\n  }catch(error){\r\n      return;\r\n  }\r\n};","import { css, LitElement, unsafeCSS } from 'lit'\r\nimport Clarity from '@microsoft/clarity'\r\nimport { addToGlobalBib } from '@/utils/bib.js'\r\nimport { dispatchPublicEvent } from '@/utils/events.js'\r\nimport styles from './bib-clarity.scss?inline'\r\nimport { CLARITY_PROJECT_ID } from './constants.js'\r\nimport { EVENT_NAMES } from '../bib-consent/constants.js'\r\n\r\nfunction toClarityConsent(granted) {\r\n  if (granted === null) {\r\n    return null\r\n  }\r\n\r\n  return granted === 'granted'\r\n}\r\n\r\n/**\r\n * Custom element that manages the loading and updating of Microsoft Clarity tracking code on a web page.\r\n *\r\n * @class BibClarity\r\n * @extends LitElement\r\n */\r\nexport class BibClarity extends LitElement {\r\n  #consent = null\r\n\r\n  static properties = {\r\n    projectId: {\r\n      type: String,\r\n      attribute: 'project-id'\r\n    },\r\n    hidden: {\r\n      type: Boolean\r\n    }\r\n  }\r\n\r\n  static styles = [\r\n    css`${unsafeCSS(styles)}`\r\n  ]\r\n\r\n  constructor() {\r\n    super()\r\n\r\n    this.hidden = true\r\n    this.projectId = this.projectId || CLARITY_PROJECT_ID\r\n    this.clarity = Clarity\r\n    this.#init()\r\n  }\r\n\r\n  async #init() {\r\n    const self = this\r\n    const projectId = this.projectId\r\n\r\n    async function consentListener(event) {\r\n      console.log(`<bib-clarity> recieved an event from <bib-consent>: ${event.type}`, event.detail)\r\n\r\n      const consentData = event.detail\r\n\r\n      if (consentData === null) {\r\n        self.consent(false)\r\n        return\r\n      }\r\n\r\n      const { analytics_consent } = consentData\r\n\r\n      self.setConsent(analytics_consent === 'granted')\r\n    }\r\n\r\n    this.clarity.init(projectId)\r\n\r\n    // Push the rest to the next tick\r\n    // Clarity should have been initialized by then\r\n    setTimeout(async () => {\r\n      const bibConsentElem = document.querySelector('bib-consent')\r\n\r\n      if (bibConsentElem === null) {\r\n        // Aborting\r\n        console.info('No <bib-consent /> element found. Turning off Clarity tracking.')\r\n\r\n        // Turn off Clarity in case it was initially on\r\n        self.setConsent(false)\r\n\r\n      } else {\r\n\r\n        bibConsentElem.addEventListener(EVENT_NAMES.READY, consentListener)\r\n        bibConsentElem.addEventListener(EVENT_NAMES.CHANGE, consentListener)\r\n      }\r\n\r\n      this.#dispatchPublicEvent(EVENT_NAMES.READY)\r\n\r\n    })\r\n  }\r\n\r\n  #dispatchPublicEvent(name, detail = null) {\r\n    dispatchPublicEvent(this, name, { detail })\r\n  }\r\n\r\n  setConsent(granted) {\r\n    if (typeof granted !== 'boolean') {\r\n      throw new TypeError('The \"granted\" parameter must be a boolean')\r\n    }\r\n\r\n    if (this.#consent === granted) {\r\n      // No change, so no need to do anything or dispatch an event\r\n      return\r\n    }\r\n\r\n    console.log(`[bib-clarity] Setting consent to ${granted} (was: ${this.#consent})`)\r\n\r\n    this.#consent = granted\r\n    this.clarity.consent(granted)\r\n    this.#dispatchPublicEvent(EVENT_NAMES.CHANGE, { detail: granted })\r\n  }\r\n}\r\n\r\nif (!window.customElements.get('bib-clarity')) {\r\n  window.customElements.define('bib-clarity', BibClarity)\r\n}\r\n\r\naddToGlobalBib('clarity', {})"],"names":["Clarity","init","projectId","c","window","l","document","a","r","i","getElementById","q","push","arguments","t","createElement","async","src","id","y","getElementsByTagName","parentNode","insertBefore","error","setTag","key","value","clarity","identify","customerId","customSessionId","customPageId","friendlyName","consent","upgrade","reason","event","eventName","BibClarity","LitElement","constructor","__privateAdd","this","_o_instances","_t","hidden","CLARITY_PROJECT_ID","setConsent","granted","TypeError","console","log","dispatchPublicEvent","EVENT_NAMES","CHANGE","detail","WeakSet","self","consentListener","type","consentData","analytics_consent","setTimeout","bibConsentElem","querySelector","info","addEventListener","READY","n_fn","name","static","String","attribute","Boolean","css","unsafeCSS","customElements","get","define","addToGlobalBib"],"mappings":"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","x_google_ignoreList":[0,1]}