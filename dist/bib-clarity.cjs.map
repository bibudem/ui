{"version":3,"file":"bib-clarity.cjs","sources":["../src/components/bib-clarity/bib-clarity.js"],"sourcesContent":["import { css, LitElement, unsafeCSS } from 'lit'\nimport Clarity from '@microsoft/clarity'\nimport { addToGlobalBib } from '@/utils/bib.js'\nimport { dispatchPublicEvent } from '@/utils/events.js'\nimport { loggerFactory } from '@/utils/logger.js'\nimport ConsentTokenV2 from './ConsentTokenV2.js'\nimport { CLARITY_PROJECT_ID, READY_STATES } from './constants.js'\nimport { EVENT_NAMES } from '../bib-consent/constants.js'\nimport styles from './bib-clarity.scss?inline'\n\nfunction toClarityConsent(granted) {\n  if (granted === null) {\n    return null\n  }\n\n  return granted === 'granted'\n}\n\n/**\n * Custom element that manages the loading and updating of Microsoft Clarity tracking code on a web page.\n *\n * @class BibClarity\n * @extends LitElement\n * @property {String} projectId - The ID of the Microsoft Clarity project.\n * @property {Boolean} hidden - Indicates whether the component is hidden.\n * @property {Boolean} #consent - Indicates whether Microsoft Clarity tracking is enabled.\n * @property {String} readyState - The current state of the BibClarity component, which can be one of the following values:\n *   - `indeterminate`: The user has not yet indicated their consent preferences.\n *   - `determinate`: The user has made their consent preferences.\n *   - `connected`: The user has granted consent and the component is connected.\n *   - `disconnected`: The user has not granted consent and the component is disconnected.\n * @property {Clarity} clarity - The Microsoft Clarity instance.\n */\nexport class BibClarity extends LitElement {\n  #consent = null\n  #logger = loggerFactory('bib-clarity')\n\n  static properties = {\n    projectId: {\n      type: String,\n      attribute: 'project-id'\n    },\n    hidden: {\n      type: Boolean\n    },\n    debug: {\n      type: Boolean,\n      reflect: true\n    },\n  }\n\n  static styles = [\n    css`${unsafeCSS(styles)}`\n  ]\n\n  constructor() {\n    super()\n\n    this.hidden = true\n    this.projectId = this.projectId || CLARITY_PROJECT_ID\n    this.clarity = Clarity\n    this.#init()\n  }\n\n  /**\n   * Initializes the component.\n   *\n   * @private\n   */\n  async #init() {\n    const self = this\n\n    async function consentListener(event) {\n      self.#debug(`Recieved a \\`%s\\` event from <bib-consent>:`, event.type, event.detail)\n\n      const consentData = event.detail\n\n      if (consentData === null) {\n        self.setConsent(false)\n        return\n      }\n\n      const { analytics_consent, ad_consent } = consentData\n\n      if (self.readyState === READY_STATES.INDETERMINATE) {\n        self.readyState = READY_STATES.CONNECTED\n      }\n\n      self.setConsent({ analytics_consent, ad_consent })\n    }\n\n    this.clarity.init(this.projectId)\n\n    // Push the rest to the next tick\n    // Clarity should have been initialized by then\n    setTimeout(async () => {\n      const bibConsentElem = document.querySelector('bib-consent')\n\n      if (bibConsentElem === null) {\n        // Aborting\n        self.#debug('No <bib-consent /> element found. Turning off Clarity tracking.')\n\n        // Turn off Clarity in case it was initially on\n        self.setConsent(false)\n\n      } else {\n        bibConsentElem.addEventListener(EVENT_NAMES.READY, consentListener)\n        bibConsentElem.addEventListener(EVENT_NAMES.CHANGE, consentListener)\n      }\n\n    })\n  }\n\n  #dispatchPublicEvent(name, detail = null) {\n    dispatchPublicEvent(this, name, { detail })\n  }\n\n  /**\n   * Logs messages when in debug mode.\n   * @description If debug attribute is set, logs messages to the console and updates the UI logger.\n   * @param {...any} args - The messages or data to log.\n   */\n  #debug(...args) {\n    if (this.hasAttribute('debug')) {\n      const strippedMsg = args.map(part => {\n        if (typeof part === 'string') {\n          return part.replace(/<\\/?[^>]+(>|$)/g, \"\")\n        }\n\n        return part\n      })\n      this.#logger(...args)\n    }\n  }\n\n  setConsent(consent) {\n    const consentToken = new ConsentTokenV2(consent)\n\n    if (JSON.stringify(this.#consent) === JSON.stringify(consentToken)) {\n      // No change, so no need to do anything or dispatch an event\n      return\n    }\n\n    this.#debug(`[setConsent] Setting consent to %o (was ${this.#consent === null ? 'not set' : this.#consent}).`, consentToken)\n\n    this.#consent = consentToken\n    // Using v2 API for now.\n    //See: https://learn.microsoft.com/en-us/clarity/setup-and-installation/clarity-consent-api-v2\n    // this.clarity.consent('consent', granted)\n    this.clarity.consent('consentv2', consentToken)\n    this.#dispatchPublicEvent(EVENT_NAMES.CHANGE, { detail: consentToken })\n  }\n}\n\nif (!window.customElements.get('bib-clarity')) {\n  window.customElements.define('bib-clarity', BibClarity)\n}\n\naddToGlobalBib('clarity', {})"],"names":["BibClarity","LitElement","constructor","this","__privateAdd","_a_instances","_t","loggerFactory","hidden","projectId","CLARITY_PROJECT_ID","clarity","Clarity","init","setConsent","consent","consentToken","ConsentTokenV2","JSON","stringify","debug","EVENT_NAMES","CHANGE","detail","logger","WeakSet","n_fn","self","async","consentListener","event","type","consentData","analytics_consent","ad_consent","readyState","READY_STATES","INDETERMINATE","CONNECTED","setTimeout","bibConsentElem","document","querySelector","addEventListener","READY","i_fn","dispatchPublicEvent","name","e","s_fn","args","hasAttribute","map","part","replace","static","String","attribute","Boolean","reflect","css","unsafeCSS","styles","window","customElements","get","define","addToGlobalBib"],"mappings":"syBAiCO,MAAMA,UAAmBC,EAAAA,EAsB9B,WAAAC,GAGEC,QAzBGC,EAAAD,KAAAE,GACMD,EAAAD,KAAAG,EAAA,MACDC,EAAAA,KAAAA,EAAAA,EAAaA,cAAC,gBAuBtBJ,KAAKK,QAAS,EACdL,KAAKM,UAAYN,KAAKM,WAAaC,EAAkBA,mBACrDP,KAAKQ,QAAUC,EAAOA,QACtBT,OAAKU,EAALV,GAAAA,KAAAA,KACD,CAyED,UAAAW,CAAWC,GACHC,MAAAA,EAAe,IAAIC,EAAeF,eAEpCG,KAAKC,UAAUhB,EAAAA,KAAAA,MAAmBe,KAAKC,UAAUH,KAKrDb,EAAKiB,KAAAA,EAAAA,GAALjB,UAAY,2CAA6D,OAAlBA,EAAKY,KAAAA,GAAoB,UAAYZ,EAAAA,KAAAA,OAAmBa,KAE/FA,aAAhBb,qDAIAA,KAAKQ,QAAQI,QAAQ,YAAaC,GAClCb,EAAAA,KAAAA,KAAAA,KAA0BkB,KAAAA,EAAWA,YAACC,OAAQ,CAAEC,OAAQP,IACzD,EArHDD,EAAAA,IAAAA,QACAS,EAAAA,IAAAA,QAFKnB,EAAA,IAAAoB,QAoCLC,EAAMb,iBACJ,MAAMc,EAAOxB,KAEbyB,eAAeC,EAAgBC,SAC7BH,EAAAA,EAAAA,EAAKP,EAALO,GAAAA,KAAAA,EAAY,4CAA+CG,EAAMC,KAAMD,EAAMP,QAE7E,MAAMS,EAAcF,EAAMP,OAE1B,GAAoB,OAAhBS,EAEF,YADAL,EAAKb,YAAW,GAIlB,MAAMmB,kBAAEA,EAAiBC,WAAEA,GAAeF,EAEtCL,EAAKQ,aAAeC,EAAYA,aAACC,gBACnCV,EAAKQ,WAAaC,EAAAA,aAAaE,WAGjCX,EAAKb,WAAW,CAAEmB,kBAAmBC,EAAAA,WAAAA,GACtC,CAED/B,KAAKQ,QAAQE,KAAKV,KAAKM,WAIvB8B,YAAWX,gBACHY,MAAAA,EAAiBC,SAASC,cAAc,eAE1CF,OAAAA,GAEFb,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,KAAAA,EAAY,mEAGZA,EAAKb,YAAAA,KAGL0B,EAAeG,iBAAiBtB,cAAYuB,MAAOf,GACnDW,EAAeG,iBAAiBtB,cAAYC,OAAQO,GAAAA,GAIzD,EAEDgB,EAAAC,SAAqBC,EAAMxB,EAAS,MAClCuB,EAAAA,oBAAoB3C,KAAM4C,EAAM,CAAExB,OACnCyB,GAAA,EAODC,EAAA7B,YAAU8B,GACCC,KAAAA,aAAa,WACAD,EAAKE,KAAIC,GACP,iBAATA,EACFA,EAAKC,QAAQ,kBAAmB,IAGlCD,IAETlD,EAAAA,KAAAA,GAAAA,aAAgB+C,GAEnB,EAhGDK,EAJWvD,EAIS,aAAA,CAClBS,UAAW,CACTsB,KAAMyB,OACNC,UAAW,cAEbjD,OAAQ,CACNuB,KAAM2B,SAERtC,MAAO,CACLW,KAAM2B,QACNC,SAAS,KAIbJ,EAlBWvD,WAkBK,CACd4D,EAAAA,CAAAA,GAAMC,EAAAA,EAAUC,EAAMA,YAsGrBC,OAAOC,eAAeC,IAAI,gBAC7BF,OAAOC,eAAeE,OAAO,cAAelE,GAG9CmE,EAAcA,eAAC,UAAW,CAAE"}