{"version":3,"file":"task-ChJWvYB9.cjs","sources":["../node_modules/@lit/task/development/task.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { notEqual } from '@lit/reactive-element';\n/**\n * States for task status\n */\nexport const TaskStatus = {\n    INITIAL: 0,\n    PENDING: 1,\n    COMPLETE: 2,\n    ERROR: 3,\n};\n/**\n * A special value that can be returned from task functions to reset the task\n * status to INITIAL.\n */\nexport const initialState = Symbol();\n// TODO(sorvell / justinfagnani): Some issues:\n// 1. With the task triggered in `update`, there is no ReactiveElement\n// change-in-update warning in the common case that the update itself does not change\n// the deps; however, Task's `requestUpdate` call to render pending state  will not\n// trigger another update since the element is updating. This `requestUpdate`\n// could be triggered in updated, but that results a change-in-update warning.\n// 2. There is no good signal for when the task has resolved and rendered other\n// than requestAnimationFrame. The user would need to store a promise for the\n// task and then wait for that and the element to update. (Update just justinfagnani:\n// Why isn't waiting taskComplete and updateComplete sufficient? This comment is\n// from before taskComplete existed!)\n/**\n * A controller that performs an asynchronous task (like a fetch) when its\n * host element updates.\n *\n * Task requests an update on the host element when the task starts and\n * completes so that the host can render the task status, value, and error as\n * the task runs.\n *\n * The task function must be supplied and can take a list of arguments. The\n * arguments are given to the Task as a function that returns a list of values,\n * which is run and checked for changes on every host update.\n *\n * The `value` property reports the completed value, and the `error` property\n * an error state if one occurs. The `status` property can be checked for\n * status and is of type `TaskStatus` which has states for initial, pending,\n * complete, and error.\n *\n * The `render` method accepts an object with optional methods corresponding\n * to the task statuses to easily render different templates for each task\n * status.\n *\n * The task is run automatically when its arguments change; however, this can\n * be customized by setting `autoRun` to false and calling `run` explicitly\n * to run the task.\n *\n * For a task to see state changes in the current update pass of the host\n * element, those changes must be made in `willUpdate()`. State changes in\n * `update()` or `updated()` will not be visible to the task until the next\n * update pass.\n *\n * @example\n *\n * ```ts\n * class MyElement extends LitElement {\n *   url = 'example.com/api';\n *   id = 0;\n *\n *   task = new Task(\n *     this,\n *     {\n *       task: async ([url, id]) => {\n *         const response = await fetch(`${this.url}?id=${this.id}`);\n *         if (!response.ok) {\n *           throw new Error(response.statusText);\n *         }\n *         return response.json();\n *       },\n *       args: () => [this.id, this.url],\n *     }\n *   );\n *\n *   render() {\n *     return this.task.render({\n *       pending: () => html`<p>Loading...</p>`,\n *       complete: (value) => html`<p>Result: ${value}</p>`\n *     });\n *   }\n * }\n * ```\n */\nexport class Task {\n    /**\n     * A Promise that resolve when the current task run is complete.\n     *\n     * If a new task run is started while a previous run is pending, the Promise\n     * is kept and only resolved when the new run is completed.\n     */\n    get taskComplete() {\n        // If a task run exists, return the cached promise. This is true in the case\n        // where the user has called taskComplete in pending or completed state\n        // before and has not started a new task run since.\n        if (this._taskComplete) {\n            return this._taskComplete;\n        }\n        // Generate an in-progress promise if the the status is pending and has been\n        // cleared by .run().\n        if (this.status === TaskStatus.PENDING) {\n            this._taskComplete = new Promise((res, rej) => {\n                this._resolveTaskComplete = res;\n                this._rejectTaskComplete = rej;\n            });\n            // If the status is error, return a rejected promise.\n        }\n        else if (this.status === TaskStatus.ERROR) {\n            this._taskComplete = Promise.reject(this._error);\n            // Otherwise we are at a task run's completion or this is the first\n            // request and we are not in the middle of a task (i.e. INITIAL).\n        }\n        else {\n            this._taskComplete = Promise.resolve(this._value);\n        }\n        return this._taskComplete;\n    }\n    constructor(host, task, args) {\n        this._callId = 0;\n        this.status = TaskStatus.INITIAL;\n        (this._host = host).addController(this);\n        const taskConfig = typeof task === 'object' ? task : { task, args };\n        this._task = taskConfig.task;\n        this._argsFn = taskConfig.args;\n        this._argsEqual = taskConfig.argsEqual ?? shallowArrayEquals;\n        this._onComplete = taskConfig.onComplete;\n        this._onError = taskConfig.onError;\n        this.autoRun = taskConfig.autoRun ?? true;\n        // Providing initialValue puts the task in COMPLETE state and stores the\n        // args immediately so it only runs when they change again.\n        if ('initialValue' in taskConfig) {\n            this._value = taskConfig.initialValue;\n            this.status = TaskStatus.COMPLETE;\n            this._previousArgs = this._getArgs?.();\n        }\n    }\n    hostUpdate() {\n        if (this.autoRun === true) {\n            this._performTask();\n        }\n    }\n    hostUpdated() {\n        if (this.autoRun === 'afterUpdate') {\n            this._performTask();\n        }\n    }\n    _getArgs() {\n        if (this._argsFn === undefined) {\n            return undefined;\n        }\n        const args = this._argsFn();\n        if (!Array.isArray(args)) {\n            throw new Error('The args function must return an array');\n        }\n        return args;\n    }\n    /**\n     * Determines if the task should run when it's triggered because of a\n     * host update, and runs the task if it should.\n     *\n     * A task should run when its arguments change from the previous run, based on\n     * the args equality function.\n     *\n     * This method is side-effectful: it stores the new args as the previous args.\n     */\n    async _performTask() {\n        const args = this._getArgs();\n        const prev = this._previousArgs;\n        this._previousArgs = args;\n        if (args !== prev &&\n            args !== undefined &&\n            (prev === undefined || !this._argsEqual(prev, args))) {\n            await this.run(args);\n        }\n    }\n    /**\n     * Runs a task manually.\n     *\n     * This can be useful for running tasks in response to events as opposed to\n     * automatically running when host element state changes.\n     *\n     * @param args an optional set of arguments to use for this task run. If args\n     *     is not given, the args function is called to get the arguments for\n     *     this run.\n     */\n    async run(args) {\n        args ??= this._getArgs();\n        // Remember the args for potential future automatic runs.\n        // TODO (justinfagnani): add test\n        this._previousArgs = args;\n        if (this.status === TaskStatus.PENDING) {\n            this._abortController?.abort();\n        }\n        else {\n            // Clear the last complete task run in INITIAL because it may be a resolved\n            // promise. Also clear if COMPLETE or ERROR because the value returned by\n            // awaiting taskComplete may have changed since last run.\n            this._taskComplete = undefined;\n            this._resolveTaskComplete = undefined;\n            this._rejectTaskComplete = undefined;\n        }\n        this.status = TaskStatus.PENDING;\n        let result;\n        let error;\n        // Request an update to report pending state.\n        if (this.autoRun === 'afterUpdate') {\n            // Avoids a change-in-update warning\n            queueMicrotask(() => this._host.requestUpdate());\n        }\n        else {\n            this._host.requestUpdate();\n        }\n        const key = ++this._callId;\n        this._abortController = new AbortController();\n        let errored = false;\n        try {\n            result = await this._task(args, { signal: this._abortController.signal });\n        }\n        catch (e) {\n            errored = true;\n            error = e;\n        }\n        // If this is the most recent task call, process this value.\n        if (this._callId === key) {\n            if (result === initialState) {\n                this.status = TaskStatus.INITIAL;\n            }\n            else {\n                if (errored === false) {\n                    try {\n                        this._onComplete?.(result);\n                    }\n                    catch {\n                        // Ignore user errors from onComplete.\n                    }\n                    this.status = TaskStatus.COMPLETE;\n                    this._resolveTaskComplete?.(result);\n                }\n                else {\n                    try {\n                        this._onError?.(error);\n                    }\n                    catch {\n                        // Ignore user errors from onError.\n                    }\n                    this.status = TaskStatus.ERROR;\n                    this._rejectTaskComplete?.(error);\n                }\n                this._value = result;\n                this._error = error;\n            }\n            // Request an update with the final value.\n            this._host.requestUpdate();\n        }\n    }\n    /**\n     * Aborts the currently pending task run by aborting the AbortSignal\n     * passed to the task function.\n     *\n     * Aborting a task does nothing if the task is not running: ie, in the\n     * complete, error, or initial states.\n     *\n     * Aborting a task does not automatically cancel the task function. The task\n     * function must be written to accept the AbortSignal and either forward it\n     * to other APIs like `fetch()`, or handle cancellation manually by using\n     * [`signal.throwIfAborted()`]{@link https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/throwIfAborted}\n     * or the\n     * [`abort`]{@link https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/abort_event}\n     * event.\n     *\n     * @param reason The reason for aborting. Passed to\n     *     `AbortController.abort()`.\n     */\n    abort(reason) {\n        if (this.status === TaskStatus.PENDING) {\n            this._abortController?.abort(reason);\n        }\n    }\n    /**\n     * The result of the previous task run, if it resolved.\n     *\n     * Is `undefined` if the task has not run yet, or if the previous run errored.\n     */\n    get value() {\n        return this._value;\n    }\n    /**\n     * The error from the previous task run, if it rejected.\n     *\n     * Is `undefined` if the task has not run yet, or if the previous run\n     * completed successfully.\n     */\n    get error() {\n        return this._error;\n    }\n    render(renderer) {\n        switch (this.status) {\n            case TaskStatus.INITIAL:\n                return renderer.initial?.();\n            case TaskStatus.PENDING:\n                return renderer.pending?.();\n            case TaskStatus.COMPLETE:\n                return renderer.complete?.(this.value);\n            case TaskStatus.ERROR:\n                return renderer.error?.(this.error);\n            default:\n                throw new Error(`Unexpected status: ${this.status}`);\n        }\n    }\n}\nexport const shallowArrayEquals = (oldArgs, newArgs) => oldArgs === newArgs ||\n    (oldArgs.length === newArgs.length &&\n        oldArgs.every((v, i) => !notEqual(v, newArgs[i])));\n//# sourceMappingURL=task.js.map"],"names":["initialState","Symbol","shallowArrayEquals","oldArgs","newArgs","length","every","v","i","notEqual","taskComplete","this","_taskComplete","status","Promise","res","rej","_resolveTaskComplete","_rejectTaskComplete","reject","_error","resolve","_value","constructor","host","task","args","_callId","_host","addController","taskConfig","_task","_argsFn","_argsEqual","argsEqual","_onComplete","onComplete","_onError","onError","autoRun","initialValue","_previousArgs","_getArgs","hostUpdate","_performTask","hostUpdated","Array","isArray","Error","prev","run","result","error","_abortController","abort","undefined","queueMicrotask","requestUpdate","key","AbortController","errored","signal","e","reason","value","render","renderer","initial","pending","complete"],"mappings":"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","x_google_ignoreList":[0]}