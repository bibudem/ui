{"version":3,"file":"preferencesClient.js","sources":["../src/components/bib-consent/preferencesClient.js"],"sourcesContent":["import { callServer } from 'postmessage-promise'\nimport { stringIsUrl } from '@/utils/url.js'\nimport { loggerFactory } from '@/utils/logger.js'\nimport PreferenceStorage from './PreferenceStorage.js'\nimport { getIframeServer, getServerMode } from './utils.js'\nimport { EVENT_NAMES, SERVER_MODE, SERVER_REQUEST_DEFAULT_TIMEOUT } from './constants.js'\n\n/**\n * Represents a client for managing user preferences, with the ability to interact with a remote server or local storage.\n *\n * The `PreferencesClient` class extends the `EventTarget` class, allowing it to dispatch events related to preference updates.\n *\n * Key features:\n * - Initialization with options for server mode (local or remote), server URL, and event reflection.\n * - Ability to add hosts that will receive preference update events.\n * - Debugging functionality with configurable debug mode.\n * - Methods to set, get, and reset user preferences, with different behavior based on server mode.\n *\n * @property {string} readyState - The current state of the PreferencesClient instance. Can be 'initial', 'connecting' or 'ready'.\n */\nclass PreferencesClient extends EventTarget {\n  _server\n  _storage\n  #preferences\n  #debugIsOn = false\n  #debug\n\n  constructor() {\n    super()\n    this.readyState = 'initial'\n    this.hosts = []\n  }\n\n  addHost({ host, reflectEvents }) {\n    this.hosts.push({ host, reflectEvents })\n  }\n\n  debug() {\n    if (this.#debugIsOn) {\n      this.#debug(...arguments)\n    }\n  }\n\n  dispatchEvent(event) {\n    super.dispatchEvent(event)\n    this.hosts.forEach(({ host, reflectEvents }) => reflectEvents && host.dispatchEvent?.(event))\n  }\n\n  /**\n   * Adds an event listener to the PreferencesClient instance.\n   *\n   * If the event type is `EVENT_NAMES.READY` and the `readyState` is already `'ready'`, the listener function is called immediately with the current preferences object as the event detail.\n   *\n   * Otherwise, the event listener is added using the standard `addEventListener` method.\n   *\n   * @param {string} type - The type of event to listen for.\n   * @param {EventListener} listener - The function to call when the event is dispatched.\n   * @param {EventListenerOptions} [options] - Options for the event listener.\n   */\n  addEventListener(type, listener, options) {\n    if (type === EVENT_NAMES.READY && this.readyState === 'ready') {\n      this.#debug('Firing ready event immediately since readyState is already ready')\n      this.#fireReadyListener(listener)\n      return\n    }\n\n    super.addEventListener(type, listener, options)\n  }\n\n  async #fireReadyListener(listener) {\n    const preferences = await this.getPreferences()\n    const readyEvent = new CustomEvent(EVENT_NAMES.READY, { detail: preferences })\n    this.#debug('Firing ready event with preferences: ', preferences)\n    listener(readyEvent)\n  }\n\n  /**\n   * Initializes the PreferencesClient instance with the provided options.\n   *\n   * @param {Object} options - The initialization options.\n   * @param {Object} [options.host] - The host object that will receive preference update events.\n   * @param {string} [options.serverMode] - The server mode, either 'LOCAL' or 'REMOTE'.\n   * @param {string} [options.serverUrl] - The URL of the remote server.\n   * @param {number} [options.serverRequestTimeout=SERVER_REQUEST_DEFAULT_TIMEOUT] - The timeout for server requests in milliseconds.\n   * @param {boolean} [options.reflectEvents=true] - Whether to reflect preference update events to the host.\n   * @returns {Promise<void>} - A promise that resolves when initialization is complete.\n   *\n   * @event EVENT_NAMES.READY - Dispatched when the initial preferences data is available. The event detail contains the preferences object.\n   * @event EVENT_NAMES.UPDATE - Dispatched when the preferences are updated. The event detail contains the updated preferences object.\n   */\n\n  async init({ host, serverMode, serverUrl, serverRequestTimeout = SERVER_REQUEST_DEFAULT_TIMEOUT, reflectEvents = true }) {\n    this.serverRequestTimeout = serverRequestTimeout\n\n    if (host) {\n      this.addHost({ host, reflectEvents })\n    }\n\n    this.readyState = 'connecting'\n\n    if (\n      (\n        serverMode && serverMode === SERVER_MODE.LOCAL\n      )\n      ||\n      typeof serverUrl === 'undefined'\n      ||\n      !stringIsUrl(serverUrl)\n    ) {\n      this.serverMode = SERVER_MODE.LOCAL\n    } else {\n      this.serverUrl = new URL(serverUrl, location)\n\n      if (host.debug) {\n        this.serverUrl.searchParams.set('debug', '')\n      }\n\n      this.serverMode = await getServerMode(this)\n\n    }\n\n    this.#debugIsOn = Reflect.has(host, 'debug')\n\n    if (this.#debugIsOn) {\n      this.#debug = loggerFactory('preferencesClient', 'purple')\n    }\n\n    this.debug('init', `server mode: ${this.serverMode}`)\n\n    let preferences\n\n    if (this.serverMode === SERVER_MODE.REMOTE) {\n      const serverObject = getIframeServer(document.body, this.serverUrl.href)\n\n      this.#debug('[remote] callServer serverObject: ', serverObject)\n\n      try {\n        this._server = await callServer(serverObject)\n\n        this._server.listenMessage((method, detail) => {\n          this.#debug('[remote] server.listenMessage method: ', method, 'detail: ', detail)\n          const event = new CustomEvent(EVENT_NAMES.UPDATE, { detail })\n          this.dispatchEvent(event)\n        })\n      } catch (error) {\n        console.error('[callServer] error: ', error)\n        throw error\n      }\n\n      preferences = await this._server.postMessage('getPreferences')\n      this.#debug('[remote] Got response from server: ', preferences)\n\n    } else {\n      this._storage = new PreferenceStorage()\n\n      await this._storage.init()\n\n      preferences = await this._storage.getPreferences()\n      this.#debug('[local] Got response from storage: ', preferences)\n    }\n\n    this.#debug('[local] preferences: ', preferences)\n\n    if (preferences !== undefined) {\n\n      // Dispatch initial data with the ready state.\n      this.readyState = 'ready'\n      this.#preferences = preferences\n\n      this.#debug('dispatchEvent', EVENT_NAMES.READY, preferences)\n      this.dispatchEvent(new CustomEvent(EVENT_NAMES.READY, { detail: preferences }))\n    }\n  }\n\n  /**\n   * Gets the user's preferences from either the local storage or the remote server, depending on the configured server mode.\n   *\n   * @returns {Promise<Object>} - A promise that resolves with the user's preferences, or rejects with an error if the operation fails.\n   */\n  async getPreferences() {\n    try {\n      if (this.serverMode === SERVER_MODE.LOCAL) {\n        return await this._storage.getPreferences()\n      } else {\n        return await this._server.postMessage('getPreferences')\n      }\n    } catch (error) {\n      console.error('[#getPreferences]', error)\n      throw error\n    }\n  }\n\n  /**\n  * Sets the user's preferences in either the local storage or the remote server, depending on the configured server mode.\n  *\n  * @param {Object|null} preferences - The preferences object to be set. If null, it will reset the user's preferences.\n  * @returns {Promise} - A promise that resolves when the preferences have been set or reset, or rejects with an error if the operation fails.\n  */\n  async setPreferences(preferences) {\n    try {\n      let response\n\n      // When there is no preferences object, this is a reset of the user's preferences, so set it to null.\n      if (typeof preferences === 'undefined') {\n        preferences = null\n      }\n\n      if (this.serverMode === SERVER_MODE.LOCAL) {\n        response = await this._storage.setPreferences(preferences)\n      } else {\n        response = await this._server.postMessage('setPreferences', preferences)\n      }\n\n      if (response) {\n        this.dispatchEvent(new CustomEvent(EVENT_NAMES.UPDATE, { detail: response }))\n        return response\n      }\n    } catch (error) {\n      console.error('[#setPreferences]', error)\n      throw error\n    }\n  }\n\n  /**\n   * Resets the user's preferences by clearing the stored preferences data, either in the local storage or on the remote server, depending on the configured server mode.\n   *\n   * @returns {Promise} - A promise that resolves when the preferences have been reset, or rejects with an error if the reset operation fails.\n   */\n  async resetPreferences() {\n    try {\n      if (this.serverMode === SERVER_MODE.LOCAL) {\n        return await this._storage.resetPreferences()\n      } else {\n        await this._server.postMessage('resetPreferences')\n      }\n    } catch (error) {\n      console.error('[#resetPreferences]', error)\n      throw error\n    }\n  }\n}\n\nlet preferencesClient\n\n/**\n * Creates a new PreferencesClient instance and initializes it with the provided options.\n *\n * If a PreferencesClient instance already exists, it will add the provided host to the existing instance and return it.\n *\n * @param {Object} options - The options to initialize the PreferencesClient with.\n * @returns {Promise<PreferencesClient>} - A Promise that resolves to the PreferencesClient instance.\n */\nexport default async function createPreferencesClient(options) {\n  if (preferencesClient) {\n    preferencesClient.addHost(options)\n\n    return preferencesClient\n  }\n\n  preferencesClient = new PreferencesClient()\n  await preferencesClient.init(options)\n\n  return preferencesClient\n}"],"names":["PreferencesClient","EventTarget","constructor","super","this","_server","_storage","preferences","debugIsOn","debug","readyState","hosts","host","reflectEvents","push","arguments","event","dispatchEvent","forEach","type","listener","options","EVENT_NAMES","READY","fireReadyListener","addEventListener","init","serverMode","serverUrl","serverRequestTimeout","SERVER_REQUEST_DEFAULT_TIMEOUT","addHost","SERVER_MODE","LOCAL","stringIsUrl","URL","location","searchParams","set","getServerMode","Reflect","has","loggerFactory","REMOTE","serverObject","getIframeServer","document","body","href","callServer","listenMessage","method","detail","CustomEvent","UPDATE","error","console","postMessage","PreferenceStorage","getPreferences","undefined","response","setPreferences","resetPreferences","readyEvent","preferencesClient","async","createPreferencesClient"],"mappings":"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"}