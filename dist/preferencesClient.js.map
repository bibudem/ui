{"version":3,"file":"preferencesClient.js","sources":["../src/components/bib-consent/preferencesClient.js"],"sourcesContent":["import { callServer } from 'postmessage-promise'\nimport { stringIsUrl } from '@/utils/url.js'\nimport { loggerFactory } from '@/utils/logger.js'\nimport PreferenceStorage from './PreferenceStorage.js'\nimport { getIframeServer, getServerMode } from './utils.js'\nimport { EVENT_NAMES, SERVER_MODE } from './constants.js'\n\n/**\n * Represents a client for managing user preferences, with the ability to interact with a remote server or local storage.\n *\n * The `PreferencesClient` class extends the `EventTarget` class, allowing it to dispatch events related to preference updates.\n *\n * Key features:\n * - Initialization with options for server mode (local or remote), server URL, and event reflection.\n * - Ability to add hosts that will receive preference update events.\n * - Debugging functionality with configurable debug mode.\n * - Methods to set, get, and reset user preferences, with different behavior based on server mode.\n *\n * @property {string} readyState - The current state of the PreferencesClient instance. Can be 'initial', 'connecting' or 'ready'.\n */\nclass PreferencesClient extends EventTarget {\n  _server\n  _storage\n  #preferences\n  #debugIsOn = false\n  #debug\n\n  constructor() {\n    super()\n    this.readyState = 'initial'\n    this.hosts = []\n  }\n\n  addHost({ host, reflectEvents }) {\n    this.hosts.push({ host, reflectEvents })\n  }\n\n  debug() {\n    if (this.#debugIsOn) {\n      this.#debug(...arguments)\n    }\n  }\n\n  dispatchEvent(event) {\n    super.dispatchEvent(event)\n    this.hosts.forEach(({ host, reflectEvents }) => reflectEvents && host.dispatchEvent?.(event))\n  }\n\n  /**\n   * Adds an event listener to the PreferencesClient instance.\n   *\n   * If the event type is `EVENT_NAMES.READY` and the `readyState` is already `'ready'`, the listener function is called immediately with the current preferences object as the event detail.\n   *\n   * Otherwise, the event listener is added using the standard `addEventListener` method.\n   *\n   * @param {string} type - The type of event to listen for.\n   * @param {EventListener} listener - The function to call when the event is dispatched.\n   * @param {EventListenerOptions} [options] - Options for the event listener.\n   */\n  addEventListener(type, listener, options) {\n    if (type === EVENT_NAMES.READY && this.readyState === 'ready') {\n      this.#debug('Firing ready event immediately since readyState is already ready')\n      this.#fireReadyListener(listener)\n      return\n    }\n\n    super.addEventListener(type, listener, options)\n  }\n\n  async #fireReadyListener(listener) {\n    const preferences = await this.getPreferences()\n    const readyEvent = new CustomEvent(EVENT_NAMES.READY, { detail: preferences })\n    this.#debug('Firing ready event with preferences: ', preferences)\n    listener(readyEvent)\n  }\n\n  /**\n   * Initializes the PreferencesClient instance with the provided options.\n   *\n   * @param {Object} options - The initialization options.\n   * @param {Object} [options.host] - The host object that will receive preference update events.\n   * @param {string} [options.serverMode] - The server mode, either 'LOCAL' or 'REMOTE'.\n   * @param {string} [options.serverUrl] - The URL of the remote server.\n   * @param {boolean} [options.reflectEvents=true] - Whether to reflect preference update events to the host.\n   * @returns {Promise<PreferencesClient>} - The initialized PreferencesClient instance.\n   *\n   * @event EVENT_NAMES.READY - Dispatched when the initial preferences data is available. The event detail contains the preferences object.\n   * @event EVENT_NAMES.UPDATE - Dispatched when the preferences are updated. The event detail contains the updated preferences object.\n   */\n\n  async init({ host, serverMode, serverUrl, reflectEvents = true }) {\n    this.readyState = 'connecting'\n\n    if (host) {\n      this.addHost({ host, reflectEvents })\n    }\n\n    if (\n      (\n        serverMode && serverMode === SERVER_MODE.LOCAL\n      )\n      ||\n      typeof serverUrl === 'undefined'\n      ||\n      !stringIsUrl(serverUrl)\n    ) {\n      this.serverMode = SERVER_MODE.LOCAL\n    } else {\n      this.serverUrl = new URL(serverUrl, location)\n\n      if (host.debug) {\n        this.serverUrl.searchParams.set('debug', '')\n      }\n\n      this.serverMode = await getServerMode(this)\n\n    }\n\n    this.#debugIsOn = Reflect.has(host, 'debug')\n\n    if (this.#debugIsOn) {\n      this.#debug = loggerFactory('preferencesClient', 'purple')\n    }\n\n    this.debug('init', `server mode: ${this.serverMode}`)\n\n    let preferences\n\n    if (this.serverMode === SERVER_MODE.REMOTE) {\n      const serverObject = getIframeServer(document.body, this.serverUrl.href)\n\n      this.#debug('[remote] callServer serverObject: ', serverObject)\n\n      this._server = await callServer(serverObject)\n        .catch(error => {\n          console.error('[callServer] error: ', error)\n          throw error\n        })\n\n      this._server.listenMessage((method, detail) => {\n        this.#debug('[remote] server.listenMessage method: ', method, 'detail: ', detail)\n        const event = new CustomEvent(EVENT_NAMES.UPDATE, { detail })\n        this.dispatchEvent(event)\n      })\n\n      preferences = await this._server.postMessage('getPreferences')\n      this.#debug('[remote] Got response from server: ', preferences)\n\n    } else {\n      this._storage = new PreferenceStorage()\n\n      await this._storage.init()\n\n      preferences = await this._storage.getPreferences()\n      this.#debug('[local] Got response from storage: ', preferences)\n    }\n\n    this.#debug('[local] preferences: ', preferences)\n\n    if (preferences !== undefined) {\n\n      // Dispatch initial data with the ready state.\n      this.readyState = 'ready'\n      this.#preferences = preferences\n\n      this.#debug('dispatchEvent', EVENT_NAMES.READY, preferences)\n      this.dispatchEvent(new CustomEvent(EVENT_NAMES.READY, { detail: preferences }))\n    }\n  }\n\n  /**\n   * Gets the user's preferences from either the local storage or the remote server, depending on the configured server mode.\n   *\n   * @returns {Promise<Object>} - A promise that resolves with the user's preferences, or rejects with an error if the operation fails.\n   */\n  async getPreferences() {\n    try {\n      if (this.serverMode === SERVER_MODE.LOCAL) {\n        return await this._storage.getPreferences()\n      } else {\n        return await this._server.postMessage('getPreferences')\n      }\n    } catch (error) {\n      console.error('[#getPreferences]', error)\n      throw error\n    }\n  }\n\n  /**\n  * Sets the user's preferences in either the local storage or the remote server, depending on the configured server mode.\n  *\n  * @param {Object|null} preferences - The preferences object to be set. If null, it will reset the user's preferences.\n  * @returns {Promise} - A promise that resolves when the preferences have been set or reset, or rejects with an error if the operation fails.\n  */\n  async setPreferences(preferences) {\n    try {\n      let response\n\n      // When there is no preferences object, this is a reset of the user's preferences, so set it to null.\n      if (typeof preferences === 'undefined') {\n        preferences = null\n      }\n\n      if (this.serverMode === SERVER_MODE.LOCAL) {\n        response = await this._storage.setPreferences(preferences)\n      } else {\n        response = await this._server.postMessage('setPreferences', preferences)\n      }\n\n      if (response) {\n        this.dispatchEvent(new CustomEvent(EVENT_NAMES.UPDATE, { detail: response }))\n        return response\n      }\n    } catch (error) {\n      console.error('[#setPreferences]', error)\n      throw error\n    }\n  }\n\n  /**\n   * Resets the user's preferences by clearing the stored preferences data, either in the local storage or on the remote server, depending on the configured server mode.\n   *\n   * @returns {Promise} - A promise that resolves when the preferences have been reset, or rejects with an error if the reset operation fails.\n   */\n  async resetPreferences() {\n    try {\n      if (this.serverMode === SERVER_MODE.LOCAL) {\n        return await this._storage.resetPreferences()\n      } else {\n        await this._server.postMessage('resetPreferences')\n      }\n    } catch (error) {\n      console.error('[#resetPreferences]', error)\n      throw error\n    }\n  }\n}\n\nlet preferencesClient\n\n/**\n * Creates a new PreferencesClient instance and initializes it with the provided options.\n *\n * If a PreferencesClient instance already exists, it will add the provided host to the existing instance and return it.\n *\n * @param {Object} options - The options to initialize the PreferencesClient with.\n * @returns {Promise<PreferencesClient>} - A Promise that resolves to the PreferencesClient instance.\n */\nexport default async function createPreferencesClient(options) {\n  if (preferencesClient) {\n    preferencesClient.addHost(options)\n\n    return preferencesClient\n  }\n\n  preferencesClient = new PreferencesClient()\n  await preferencesClient.init(options)\n\n  return preferencesClient\n}"],"names":["PreferencesClient","EventTarget","constructor","super","this","_server","_storage","preferences","debugIsOn","debug","readyState","hosts","host","reflectEvents","push","t","arguments","event","dispatchEvent","forEach","type","listener","options","EVENT_NAMES","READY","addEventListener","serverMode","serverUrl","addHost","SERVER_MODE","LOCAL","stringIsUrl","URL","location","searchParams","set","getServerMode","Reflect","has","loggerFactory","REMOTE","serverObject","getIframeServer","document","body","href","callServer","catch","error","console","listenMessage","method","detail","CustomEvent","UPDATE","postMessage","PreferenceStorage","init","getPreferences","setPreferences","response","resetPreferences","fireReadyListener","readyEvent","preferencesClient","async","createPreferencesClient"],"mappings":"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"}