{"version":3,"file":"bib-consent.js","sources":["../node_modules/@lit/context/lib/value-notifier.js","../node_modules/@lit/context/lib/controllers/context-provider.js","../src/components/bib-consent/bib-consent.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nclass s{get value(){return this.o}set value(s){this.setValue(s)}setValue(s,t=!1){const i=t||!Object.is(s,this.o);this.o=s,i&&this.updateObservers()}constructor(s){this.subscriptions=new Map,this.updateObservers=()=>{for(const[s,{disposer:t}]of this.subscriptions)s(this.o,t)},void 0!==s&&(this.value=s)}addCallback(s,t,i){if(!i)return void s(this.value);this.subscriptions.has(s)||this.subscriptions.set(s,{disposer:()=>{this.subscriptions.delete(s)},consumerHost:t});const{disposer:h}=this.subscriptions.get(s);s(this.value,h)}clearCallbacks(){this.subscriptions.clear()}}export{s as ValueNotifier};\n//# sourceMappingURL=value-notifier.js.map\n","import{ContextRequestEvent as t}from\"../context-request-event.js\";import{ValueNotifier as s}from\"../value-notifier.js\";\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */class e extends Event{constructor(t){super(\"context-provider\",{bubbles:!0,composed:!0}),this.context=t}}class i extends s{constructor(s,e,i){super(void 0!==e.context?e.initialValue:i),this.onContextRequest=t=>{const s=t.composedPath()[0];t.context===this.context&&s!==this.host&&(t.stopPropagation(),this.addCallback(t.callback,s,t.subscribe))},this.onProviderRequest=s=>{const e=s.composedPath()[0];if(s.context!==this.context||e===this.host)return;const i=new Set;for(const[s,{consumerHost:e}]of this.subscriptions)i.has(s)||(i.add(s),e.dispatchEvent(new t(this.context,s,!0)));s.stopPropagation()},this.host=s,void 0!==e.context?this.context=e.context:this.context=e,this.attachListeners(),this.host.addController?.(this)}attachListeners(){this.host.addEventListener(\"context-request\",this.onContextRequest),this.host.addEventListener(\"context-provider\",this.onProviderRequest)}hostConnected(){this.host.dispatchEvent(new e(this.context))}}export{i as ContextProvider,e as ContextProviderEvent};\n//# sourceMappingURL=context-provider.js.map\n","import { html, LitElement } from 'lit'\nimport { createRef, ref } from 'lit/directives/ref.js'\nimport { ContextProvider, ContextConsumer } from '@lit/context'\nimport '@auroratide/toggle-switch/lib/define.js'\nimport { loggerFactory } from '@/utils/logger.js'\nimport { addToGlobalBib } from '@/utils/bib.js'\nimport { dispatchPublicEvent } from '@/utils/events.js'\nimport { ConsentTokens } from './ConsentTokens.js'\nimport createConsentClient from './consentClient.js'\nimport { consentContext } from './consent-context.js'\nimport '../bib-button/bib-button-close.js'\nimport './bib-consent-consent-dialog.js'\nimport './bib-consent-preferences-dialog.js'\nimport { CONSENT_STATES, EVENT_NAMES, SERVER_MODE, SERVER_REQUEST_DEFAULT_TIMEOUT, SERVER_DEFAULT_URL } from './constants.js'\n\n/**\n * @typedef {'indeterminate' | 'determinate'} ConsentState\n */\n\n/**\n * The `BibConsent` class is a custom web component that provides a user interface for managing consent preferences.\n *\n * It includes the following functionality:\n * - Fetching and displaying the user's consent preferences from a server\n * - Allowing the user to change their consent preferences\n * - Saving the changed consent preferences to the server\n * - Providing a consent dialog and a preferences dialog for the user to interact with\n *\n * The component can be configured with the following properties:\n * - `serverUrl`: the URL of the server where the consent preferences are stored\n * - `serverRequestTimeout`: the timeout for requests to the server\n * - `[SERVER_MODE.LOCAL]`: a boolean indicating whether the component is running in local mode\n * - `debug`: a boolean indicating whether debug logging should be enabled\n * - `open`: a boolean indicating whether the consent dialog or preferences dialog is currently open\n *\n * The component uses the `@lit/context` library to manage the consent preferences as a shared context, and the `createConsentClient` function to interact with the server.\n * \n * @class BibConsent\n * @extends LitElement\n * @property {string} serverUrl - The URL of the server where the consent preferences are stored.\n * @property {number} serverRequestTimeout - The timeout for requests to the server.\n * @property {boolean} [SERVER_MODE.LOCAL] - A boolean indicating whether the component is running in local mode.\n * @property {boolean} debug - A boolean indicating whether debug logging should be enabled.\n * @property {boolean} open - A boolean indicating whether the consent dialog or preferences dialog is currently open.\n * @property {ConsentState} state - The current state of the BibConsent component, which can be one of the following values:\n *   - `indeterminate`: The user has not yet indicated their consent preferences.\n *   - `determinate`: The user has made their consent preferences.\n * @property {import('./ConsentTokens.js').ConsentTokens} consentTokens - The user's consent tokens.\n * @emits {CustomEvent} EVENT_NAMES.READY - Emitted when the consent client is ready.\n * @emits {CustomEvent} EVENT_NAMES.CHANGE - Emitted when the consent preferences are changed.\n * @emits {CustomEvent} context-request - Emitted when the context is requested.\n * @method connectedCallback - Initializes the component and sets up the necessary state and references.\n * @method close - Closes the current dialog and sets the `open` property to `false`.\n * @method show - Shows the consent dialog.\n * @method showPreferences - Shows the preferences dialog.\n * @method getTokens - Gets the user's consent tokens.\n * @method saveTokens - Saves the user's consent tokens to the server.\n * @method resetTokens - Resets the user's consent tokens to their default values.\n * @method render - Renders the component.\n */\nexport class BibConsent extends LitElement {\n  #logger = loggerFactory('bib-consent', '#cd5300')\n\n  static properties = {\n    serverUrl: {\n      type: String,\n      attribute: 'server-url'\n    },\n    serverRequestTimeout: {\n      type: Number,\n      attribute: 'server-request-timeout'\n    },\n    [SERVER_MODE.LOCAL]: {\n      type: Boolean\n    },\n    state: {\n      type: String\n    },\n    debug: {\n      type: Boolean,\n      reflect: true\n    },\n    open: {\n      type: Boolean,\n      reflect: true\n    },\n  }\n\n  _consentClient\n  #consentTokens\n  #consentProvider\n  #consentConsumer\n  #state = CONSENT_STATES.INDETERMINATE\n  #consentDialogRef\n  #preferencesDialogRef\n\n  /**\n   * Initializes the `BibConsent` component, setting up the necessary state and references.\n   * \n   * The constructor performs the following tasks:\n   * - Calls the parent class constructor (`super()`)\n   * - Initializes the `open` property to `false`, indicating that no dialog is currently open\n   * - Sets the `currentDialog` property to `null`, as no dialog is currently open\n   * - Creates references to the consent dialog and preferences dialog using `createRef()`\n   * - Creates a `ContextProvider` instance for the consent context, with the component instance as the host and an initial value of `null`\n   * - Creates a `ContextConsumer` instance for the consent context, with the component instance as the host and the `savePreferences` method as the callback\n   */\n  constructor() {\n    super()\n    this.open = false\n    this.currentDialog = null\n    this.#consentDialogRef = createRef()\n    this.#preferencesDialogRef = createRef()\n    this.#consentProvider = new ContextProvider(this, { context: consentContext, initialValue: new ConsentTokens() })\n    this.#consentConsumer = new ContextConsumer(this, { context: consentContext, callback: this.savePreferences })\n  }\n\n  #dispatchPublicEvent(name, detail = null) {\n    dispatchPublicEvent(this, name, { detail })\n  }\n\n  /**\n   * Gets the current state of the BibConsent component.\n   * The state is determined by the user's input. Initially `indeterminate`, it turns `determinate` when the user has indicated their consent preferences.\n   * @readonly\n   * @returns {import('./constants.js').consentStateTypes} The current state of the BibConsent component, which can be one of the following values:\n   * - `indeterminate`: The user has not yet indicated their consent preferences.\n   * - `determinate`: The user has made their consent preferences.\n   */\n  get state() {\n    return this.#state\n  }\n\n  /**\n   * Initializes the `BibConsent` component, sets up the necessary state and references, and handles events related to the consent client.\n   * \n   * The `connectedCallback` method performs the following tasks:\n   * - Calls the parent class's `connectedCallback` method\n   * - Sets the `debug` property to `false` if it is not already defined\n   * - Sets the `serverUrl` property to `'https://bib.umontreal.ca/consent/server/'` if it is not already defined\n   * - Sets the `serverRequestTimeout` property to `SERVER_REQUEST_DEFAULT_TIMEOUT` if it is not already defined\n   * - Creates a `ConsentClient` instance and assigns it to the `_consentClient` property\n   * - Adds event listeners for the `EVENT_NAMES.READY` and `EVENT_NAMES.CHANGE` events on the `_consentClient` instance\n   * - Adds an event listener for the `context-request` event on the component's shadow root, which responds with the current tokens\n   */\n  async connectedCallback() {\n    super.connectedCallback()\n    this.debug = this.debug || false\n    this.serverUrl = this.serverUrl || SERVER_DEFAULT_URL\n    this.serverRequestTimeout = this.serverRequestTimeout || SERVER_REQUEST_DEFAULT_TIMEOUT\n\n    this._consentClient = await createConsentClient({ host: this, serverUrl: this.serverUrl, serverRequestTimeout: this.serverRequestTimeout, reflectEvents: true })\n\n    this._consentClient.addEventListener(EVENT_NAMES.READY, event => {\n\n      const { detail: consentData } = event\n\n      if (consentData.getState() === CONSENT_STATES.DETERMINATE) {\n        this.#setValue(consentData)\n      } else {\n        this.#show('consent')\n      }\n\n      this.#dispatchPublicEvent(EVENT_NAMES.READY, consentData.toObject())\n    })\n  }\n\n  #setValue(value) {\n    this.#consentProvider.setValue(value)\n    this.#state = this.#consentProvider.value.getState()\n  }\n\n  #debug() {\n    if (this.debug) {\n      this.#logger(...arguments)\n    }\n  }\n\n  #close(emit = true) {\n    this.open = false\n    this.currentDialog?.close(emit)\n    this.currentDialog = null\n\n    if (emit) {\n      this.#dispatchPublicEvent(EVENT_NAMES.CLOSE)\n    }\n  }\n\n  /**\n   * Closes the current dialog, if any, and sets the `open` property to `false`.\n   */\n  close() {\n    this.#close()\n  }\n\n  #show(panel = 'consent') {\n\n    const validPanels = ['consent', 'preferences']\n\n    if (typeof panel !== 'string' && !validPanels.includes(panel)) {\n      throw new TypeError(`The panel argument must be a string of either values \\`${validPanels.join(` or `)}\\`. You provided \\`${panel}\\``, panel)\n    }\n\n    this.open = true\n\n    if (this.currentDialog) {\n      this.#debug('[#show] this.currentDialog', this.currentDialog)\n      this.currentDialog.close()\n    }\n\n    this.#debug('[show]', this.#consentDialogRef.value)\n    this.#debug('[show]', this.#preferencesDialogRef.value)\n    this.currentDialog = panel === 'consent' ? this.#consentDialogRef.value : this.#preferencesDialogRef.value\n    this.currentDialog.show()\n  }\n\n  /**\n   * Shows the consent dialog.\n   */\n  show() {\n    this.#show('consent')\n  }\n\n  /**\n   * Shows the preferences dialog.\n   */\n  showPreferences() {\n    this.#show('preferences')\n  }\n\n  /**\n   * Retrieves the user's consent tokens from the server.\n   *\n   * @returns {Promise<Object>} - A promise that resolves to the user's consent tokens.\n   */\n  async getTokens() {\n    this.#consentTokens = await this._consentClient.getConsentTokens()\n    return this.#consentTokens.toObject()\n  }\n\n  /**\n   * Saves the user's consent tokens to the server.\n   *\n   * @param {Object} preferences - The user's consent preferences.\n   * @returns {Promise<boolean>} - A promise that resolves to `true` if the preferences were saved successfully, or `false` if there was an error.\n   */\n\n  async saveTokens(tokens) {\n    this.#debug('[save] tokens: ', tokens)\n    const consentTokens = ConsentTokens.from(tokens)\n    try {\n      await this._consentClient.setConsentTokens(consentTokens)\n      this.#setValue(consentTokens)\n      return true\n    } catch (error) {\n      console.error('[savePreferences] error: ', error)\n      throw error\n    }\n  }\n\n  /**\n   * Resets the user's consent preferences to their default values.\n   *\n   * @returns {Promise<Object>} - A promise that resolves to the user's reset consent preferences.\n   */\n  async resetTokens() {\n    await this._consentClient.resetTokens()\n    const tokens = await this._consentClient.getConsentTokens()\n    this.#consentTokens = tokens\n    this.#dispatchPublicEvent(EVENT_NAMES.CHANGE, tokens.toObject())\n    return tokens\n  }\n\n  async #handleChangeEvent(event) {\n    const success = await this.saveTokens(event.detail)\n\n    if (!success) {\n      // TODO: show error message\n      return\n    }\n\n    const tokens = await this.getTokens()\n    this.#dispatchPublicEvent(EVENT_NAMES.CHANGE, tokens)\n    this.#close()\n  }\n\n  #handleCloseEvent(event) {\n    this.#close(false)\n  }\n\n  render() {\n    return html`\n        <bib-consent-consent-dialog @intern:change=\"${this.#handleChangeEvent}\" @intern:show-preferences=\"${() => this.#show('preferences')}\" ${ref(this.#consentDialogRef)} @intern:close=\"${this.#handleCloseEvent}\"></bib-consent-consent-dialog>\n        <bib-consent-preferences-dialog @intern:change=\"${this.#handleChangeEvent}\" ${ref(this.#preferencesDialogRef)} @intern:close=\"${this.#handleCloseEvent}\"></bib-consent-preferences-dialog>\n    `\n  }\n}\n\nif (!window.customElements.get('bib-consent')) {\n  window.customElements.define('bib-consent', BibConsent)\n}\n\naddToGlobalBib('consent', {})"],"names":["s","this","o","value","setValue","t","i","Object","is","updateObservers","subscriptions","Map","disposer","has","set","delete","consumerHost","h","get","clearCallbacks","clear","e","Event","super","bubbles","composed","context","initialValue","onContextRequest","composedPath","host","stopPropagation","addCallback","callback","subscribe","onProviderRequest","Set","add","dispatchEvent","attachListeners","addController","addEventListener","BibConsent","LitElement","logger","loggerFactory","static","_consentClient","consentTokens","consentProvider","consentConsumer","state","CONSENT_STATES","INDETERMINATE","consentDialogRef","preferencesDialogRef","open","currentDialog","createRef","ContextProvider","consentContext","ConsentTokens","ContextConsumer","savePreferences","connectedCallback","debug","serverUrl","SERVER_DEFAULT_URL","serverRequestTimeout","SERVER_REQUEST_DEFAULT_TIMEOUT","createConsentClient","reflectEvents","EVENT_NAMES","READY","event","detail","consentData","getState","DETERMINATE","toObject","close","show","showPreferences","getTokens","getConsentTokens","tokens","from","setConsentTokens","error","console","resetTokens","dispatchPublicEvent","CHANGE","render","html","ref","name","arguments","emit","CLOSE","panel","validPanels","includes","TypeError","join","handleChangeEvent","saveTokens","handleCloseEvent","type","String","attribute","Number","SERVER_MODE","LOCAL","Boolean","reflect","window","customElements","define","addToGlobalBib"],"mappings":"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","x_google_ignoreList":[0,1]}