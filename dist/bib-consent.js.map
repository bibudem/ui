{"version":3,"file":"bib-consent.js","sources":["../node_modules/@lit/context/lib/value-notifier.js","../node_modules/@lit/context/lib/controllers/context-provider.js","../src/components/bib-consent/bib-consent.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nclass s{get value(){return this.o}set value(s){this.setValue(s)}setValue(s,t=!1){const i=t||!Object.is(s,this.o);this.o=s,i&&this.updateObservers()}constructor(s){this.subscriptions=new Map,this.updateObservers=()=>{for(const[s,{disposer:t}]of this.subscriptions)s(this.o,t)},void 0!==s&&(this.value=s)}addCallback(s,t,i){if(!i)return void s(this.value);this.subscriptions.has(s)||this.subscriptions.set(s,{disposer:()=>{this.subscriptions.delete(s)},consumerHost:t});const{disposer:h}=this.subscriptions.get(s);s(this.value,h)}clearCallbacks(){this.subscriptions.clear()}}export{s as ValueNotifier};\n//# sourceMappingURL=value-notifier.js.map\n","import{ContextRequestEvent as t}from\"../context-request-event.js\";import{ValueNotifier as s}from\"../value-notifier.js\";\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */class e extends Event{constructor(t){super(\"context-provider\",{bubbles:!0,composed:!0}),this.context=t}}class i extends s{constructor(s,e,i){super(void 0!==e.context?e.initialValue:i),this.onContextRequest=t=>{const s=t.composedPath()[0];t.context===this.context&&s!==this.host&&(t.stopPropagation(),this.addCallback(t.callback,s,t.subscribe))},this.onProviderRequest=s=>{const e=s.composedPath()[0];if(s.context!==this.context||e===this.host)return;const i=new Set;for(const[s,{consumerHost:e}]of this.subscriptions)i.has(s)||(i.add(s),e.dispatchEvent(new t(this.context,s,!0)));s.stopPropagation()},this.host=s,void 0!==e.context?this.context=e.context:this.context=e,this.attachListeners(),this.host.addController?.(this)}attachListeners(){this.host.addEventListener(\"context-request\",this.onContextRequest),this.host.addEventListener(\"context-provider\",this.onProviderRequest)}hostConnected(){this.host.dispatchEvent(new e(this.context))}}export{i as ContextProvider,e as ContextProviderEvent};\n//# sourceMappingURL=context-provider.js.map\n","import { html, LitElement } from 'lit'\r\nimport { createRef, ref } from 'lit/directives/ref.js'\r\nimport { ContextProvider, ContextConsumer } from '@lit/context'\r\nimport '@auroratide/toggle-switch/lib/define.js'\r\nimport { loggerFactory } from '@/utils/logger.js'\r\nimport { addToGlobalBib } from '@/utils/bib.js'\r\nimport { ConsentTokens } from './ConsentTokens.js'\r\nimport createConsentClient from './consentClient.js'\r\nimport { consentContext } from './consent-context.js'\r\nimport '../bib-button/bib-button-close.js'\r\nimport './bib-consent-consent-dialog.js'\r\nimport './bib-consent-preferences-dialog.js'\r\nimport { CONSENT_STATES, EVENT_NAMES, SERVER_MODE, SERVER_REQUEST_DEFAULT_TIMEOUT, SERVER_DEFAULT_URL } from './constants.js'\r\n\r\nconst debug = loggerFactory('bib-consent', '#cd5300')\r\n\r\n/**\r\n * The `BibConsent` class is a custom web component that provides a user interface for managing consent preferences.\r\n *\r\n * It includes the following functionality:\r\n * - Fetching and displaying the user's consent preferences from a server\r\n * - Allowing the user to update their consent preferences\r\n * - Saving the updated consent preferences to the server\r\n * - Providing a consent dialog and a preferences dialog for the user to interact with\r\n *\r\n * The component can be configured with the following properties:\r\n * - `serverUrl`: the URL of the server where the consent preferences are stored\r\n * - `serverRequestTimeout`: the timeout for requests to the server\r\n * - `[SERVER_MODE.LOCAL]`: a boolean indicating whether the component is running in local mode\r\n * - `debug`: a boolean indicating whether debug logging should be enabled\r\n * - `open`: a boolean indicating whether the consent dialog or preferences dialog is currently open\r\n *\r\n * The component uses the `@lit/context` library to manage the consent preferences as a shared context, and the `createConsentClient` function to interact with the server.\r\n */\r\nexport class BibConsent extends LitElement {\r\n  static properties = {\r\n    serverUrl: {\r\n      type: String,\r\n      attribute: 'server-url'\r\n    },\r\n    serverRequestTimeout: {\r\n      type: Number,\r\n      attribute: 'server-request-timeout'\r\n    },\r\n    [SERVER_MODE.LOCAL]: {\r\n      type: Boolean\r\n    },\r\n    state: {\r\n      type: String\r\n    },\r\n    debug: {\r\n      type: Boolean,\r\n      reflect: true\r\n    },\r\n    open: {\r\n      type: Boolean,\r\n      reflect: true\r\n    },\r\n  }\r\n\r\n  _consentClient\r\n  #consentTokens\r\n  #consentProvider\r\n  #consentConsumer\r\n  #state = CONSENT_STATES.INDETERMINATE\r\n  #consentDialogRef\r\n  #preferencesDialogRef\r\n\r\n  /**\r\n   * Initializes the `BibConsent` component, setting up the necessary state and references.\r\n   * \r\n   * The constructor performs the following tasks:\r\n   * - Calls the parent class constructor (`super()`)\r\n   * - Initializes the `open` property to `false`, indicating that no dialog is currently open\r\n   * - Sets the `currentDialog` property to `null`, as no dialog is currently open\r\n   * - Creates references to the consent dialog and preferences dialog using `createRef()`\r\n   * - Creates a `ContextProvider` instance for the consent context, with the component instance as the host and an initial value of `null`\r\n   * - Creates a `ContextConsumer` instance for the consent context, with the component instance as the host and the `savePreferences` method as the callback\r\n   */\r\n  constructor() {\r\n    super()\r\n    this.open = false\r\n    this.currentDialog = null\r\n    this.#consentDialogRef = createRef()\r\n    this.#preferencesDialogRef = createRef()\r\n    this.#consentProvider = new ContextProvider(this, { context: consentContext, initialValue: new ConsentTokens() })\r\n    this.#consentConsumer = new ContextConsumer(this, { context: consentContext, callback: this.savePreferences })\r\n  }\r\n\r\n  /**\r\n   * Gets the current state of the BibConsent component.\r\n   * The state is determined by the user's input. Initially `indeterminate`, it turns `determinate` when the user has indicated their consent preferences.\r\n   * @readonly\r\n   * @returns {import('./constants.js').consentStateTypes} The current state of the BibConsent component, which can be one of the following values:\r\n   * - `indeterminate`: The user has not yet indicated their consent preferences.\r\n   * - `determinate`: The user has made their consent preferences.\r\n   */\r\n  get state() {\r\n    return this.#state\r\n  }\r\n\r\n  /**\r\n   * Gets the user's consent tokens.\r\n   * @readonly\r\n   * @returns {import('./ConsentTokens.js').ConsentTokens} The user's consent tokens.\r\n   */\r\n  get consentTokens() {\r\n    return this.#consentConsumer.value\r\n  }\r\n\r\n  /**\r\n   * Initializes the `BibConsent` component, sets up the necessary state and references, and handles events related to the consent client.\r\n   * \r\n   * The `connectedCallback` method performs the following tasks:\r\n   * - Calls the parent class's `connectedCallback` method\r\n   * - Sets the `debug` property to `false` if it is not already defined\r\n   * - Sets the `serverUrl` property to `'https://bib.umontreal.ca/consent/server'` if it is not already defined\r\n   * - Sets the `serverRequestTimeout` property to `SERVER_REQUEST_DEFAULT_TIMEOUT` if it is not already defined\r\n   * - Creates a `ConsentClient` instance and assigns it to the `_consentClient` property\r\n   * - Adds event listeners for the `EVENT_NAMES.READY` and `EVENT_NAMES.UPDATE` events on the `_consentClient` instance\r\n   * - Adds an event listener for the `context-request` event on the component's shadow root, which responds with the current tokens\r\n   */\r\n  async connectedCallback() {\r\n    super.connectedCallback()\r\n\r\n    this.debug = this.debug || false\r\n    this.serverUrl = this.serverUrl || SERVER_DEFAULT_URL\r\n    this.serverRequestTimeout = this.serverRequestTimeout || SERVER_REQUEST_DEFAULT_TIMEOUT\r\n    this._consentClient = await createConsentClient({ host: this, serverUrl: this.serverUrl, serverRequestTimeout: this.serverRequestTimeout, reflectEvents: true })\r\n\r\n    this._consentClient.addEventListener(EVENT_NAMES.READY, event => {\r\n      const { detail } = event\r\n\r\n      this.#debug(EVENT_NAMES.READY, 'event: ', event)\r\n\r\n      if (detail.state() === CONSENT_STATES.DETERMINATE) {\r\n        this.#setValue(detail)\r\n      } else {\r\n        this.#show('consent')\r\n      }\r\n    })\r\n  }\r\n\r\n  #setValue(value) {\r\n    this.#consentProvider.setValue(value)\r\n    this.#state = this.#consentProvider.value.state()\r\n  }\r\n\r\n  #debug() {\r\n    if (this.debug) {\r\n      debug(...arguments)\r\n    }\r\n  }\r\n\r\n  #close(emit = true) {\r\n    this.open = false\r\n    this.currentDialog?.close(emit)\r\n    this.currentDialog = null\r\n  }\r\n\r\n  /**\r\n   * Closes the current dialog, if any, and sets the `open` property to `false`.\r\n   */\r\n  close() {\r\n    this.#close()\r\n  }\r\n\r\n  #show(panel = 'consent') {\r\n\r\n    if (typeof panel !== 'string' && !['consent', 'preferences'].includes(panel)) {\r\n      throw new TypeError(`The panel argument must be a string of either values 'consent' or 'preferences'. `, panel)\r\n    }\r\n\r\n    this.open = true\r\n\r\n    if (this.currentDialog) {\r\n      this.#debug('[#show] this.currentDialog', this.currentDialog)\r\n      this.currentDialog.close()\r\n    }\r\n\r\n    this.#debug('[show]', this.#consentDialogRef.value)\r\n    this.#debug('[show]', this.#preferencesDialogRef.value)\r\n    this.currentDialog = panel === 'consent' ? this.#consentDialogRef.value : this.#preferencesDialogRef.value\r\n    this.currentDialog.show()\r\n  }\r\n\r\n  /**\r\n   * Shows the consent dialog.\r\n   */\r\n  show() {\r\n    this.#show('consent')\r\n  }\r\n\r\n  /**\r\n   * Shows the preferences dialog.\r\n   */\r\n  showPreferences() {\r\n    this.#show('preferences')\r\n  }\r\n\r\n  /**\r\n   * Retrieves the user's consent tokens from the server.\r\n   *\r\n   * @returns {Promise<Object>} - A promise that resolves to the user's consent tokens.\r\n   */\r\n  async getTokens() {\r\n    this.#consentTokens = await this._consentClient.getConsentTokens()\r\n    return this.#consentTokens\r\n  }\r\n\r\n  /**\r\n   * Saves the user's consent tokens to the server.\r\n   *\r\n   * @param {Object} preferences - The user's consent preferences.\r\n   * @returns {Promise<boolean>} - A promise that resolves to `true` if the preferences were saved successfully, or `false` if there was an error.\r\n   */\r\n\r\n  async saveTokens(tokens) {\r\n    this.#debug('[save] tokens: ', tokens)\r\n    const consentTokens = ConsentTokens.from(tokens)\r\n    try {\r\n      await this._consentClient.setConsentTokens(consentTokens)\r\n      this.#setValue(consentTokens)\r\n      return true\r\n    } catch (error) {\r\n      console.error('[savePreferences] error: ', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resets the user's consent preferences to their default values.\r\n   *\r\n   * @returns {Promise<Object>} - A promise that resolves to the user's reset consent preferences.\r\n   */\r\n  async resetTokens() {\r\n    this.#consentTokens = await this._consentClient.resetTokens()\r\n    return this.#consentTokens\r\n  }\r\n\r\n  async #handleUpdateEvent(event) {\r\n    this.#debug('[#handleUpdateEvent]', event)\r\n    const success = await this.saveTokens(event.detail)\r\n    this.#debug('[#handleUpdateEvent] success: ', success)\r\n    if (!success) {\r\n      // TODO: show error message\r\n      return\r\n    }\r\n    this.dispatchEvent(new CustomEvent(EVENT_NAMES.UPDATE, { detail: this.consentTokens }))\r\n    this.#close()\r\n  }\r\n\r\n  #handleCloseEvent(event) {\r\n    event.stopPropagation()\r\n    this.#close(false)\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n        <bib-consent-consent-dialog @update=\"${this.#handleUpdateEvent}\" @show-preferences=\"${() => this.#show('preferences')}\" ${ref(this.#consentDialogRef)} @close=\"${this.#handleCloseEvent}\"></bib-consent-consent-dialog>\r\n        <bib-consent-preferences-dialog @update=\"${this.#handleUpdateEvent}\" ${ref(this.#preferencesDialogRef)} @close=\"${this.#handleCloseEvent}\"></bib-consent-preferences-dialog>\r\n    `\r\n  }\r\n}\r\n\r\nif (!window.customElements.get('bib-consent')) {\r\n  window.customElements.define('bib-consent', BibConsent)\r\n}\r\n\r\naddToGlobalBib('consent', {})"],"names":["s","this","o","value","setValue","t","i","Object","is","updateObservers","subscriptions","Map","disposer","has","set","delete","consumerHost","h","get","clearCallbacks","clear","e","Event","super","bubbles","composed","context","initialValue","onContextRequest","composedPath","host","stopPropagation","addCallback","callback","subscribe","onProviderRequest","Set","add","dispatchEvent","attachListeners","addController","addEventListener","hostConnected","debug","loggerFactory","BibConsent","LitElement","static","_consentClient","consentTokens","consentProvider","consentConsumer","state","CONSENT_STATES","INDETERMINATE","consentDialogRef","preferencesDialogRef","open","currentDialog","createRef","ContextProvider","consentContext","ConsentTokens","ContextConsumer","savePreferences","connectedCallback","serverUrl","SERVER_DEFAULT_URL","serverRequestTimeout","SERVER_REQUEST_DEFAULT_TIMEOUT","createConsentClient","reflectEvents","EVENT_NAMES","READY","event","detail","DETERMINATE","showPreferences","show","getTokens","getConsentTokens","saveTokens","tokens","from","setConsentTokens","error","console","resetTokens","html","handleUpdateEvent","ref","arguments","close","emit","panel","includes","TypeError","success","CustomEvent","UPDATE","handleCloseEvent","type","String","attribute","Number","SERVER_MODE","LOCAL","Boolean","reflect","window","customElements","define","addToGlobalBib"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,MAAMA,EAAAA;AAAAA,EAAE,YAAY;AAAA,WAAOC,KAAKC;AAAAA,EAAC;AAAA,EAAC,IAAIC,MAAMH,IAAGC;AAAAA,SAAKG,SAASJ,EAAE;AAAA,EAAA;AAAA,EAAC,SAASA,IAAEK,KAAAA;AAAM,UAAMC,KAAED,MAAIE,CAAAA,OAAOC,GAAGR,IAAEC,KAAKC,CAAGD;AAAAA,SAAKC,IAAEF,IAAEM,MAAGL,KAAKQ;EAAiB;AAAA,EAAC,YAAYT,IAAAA;AAAGC,SAAKS,gBAAc,oBAAIC,OAAIV,KAAKQ,kBAAgB,MAAA;AAAK,iBAAI,CAAMT,MAAGY,UAASP,GAAAA,CAAAA,KAAMJ,KAAKS,cAAcV,CAAAA,GAAEC,KAAKC,GAAEG,EAAE;AAAA,IAAA,GAAA,WAAWL,OAAIC,KAAKE,QAAMH;AAAAA,EAAE;AAAA,EAAC,YAAYA,IAAEK,IAAEC,IAAAA;AAAG,SAAIA,GAAE,QAAA,KAAYN,GAAEC,KAAKE,KAAOF;AAAAA,SAAKS,cAAcG,IAAIb,EAAAA,KAAIC,KAAKS,cAAcI,IAAId,IAAE,EAACY,UAAS,MAAA;AAAKX,WAAKS,cAAcK,OAAOf,EAAAA;AAAAA,IAAC,GAAGgB,cAAaX,GAAAA,CAAAA;AAAI,UAAMO,EAAAA,UAASK,GAAGhB,IAAAA,KAAKS,cAAcQ,IAAIlB,EAAAA;AAAGA,IAAAA,GAAEC,KAAKE,OAAMc,EAAAA;AAAAA,EAAE;AAAA,EAAC,iBAAAE;AAAiBlB,SAAKS,cAAcU,MAAO;AAAA,EAAA;AAAA;;;;;;ACAxjB,MAAMC,UAAUC,MAAAA;AAAAA,EAAM,YAAYjB,IAAGkB;AAAAA,UAAM,oBAAmB,EAACC,SAAQ,MAAGC,UAAS,KAAA,CAAA,GAAKxB,KAAKyB,UAAQrB;AAAAA,EAAC;AAAE;AAAA,MAAMC,UAAUN,EAAAA;AAAAA,EAAE,YAAYA,IAAEqB,IAAEf,IAAGiB;AAAAA,UAAAA,WAAeF,GAAEK,UAAQL,GAAEM,eAAarB,EAAGL,GAAAA,KAAK2B,mBAAiBvB,CAAAA,OAAAA;AAAI,YAAML,KAAEK,GAAEwB,aAAAA,EAAe,CAAGxB;AAAAA,MAAAA,GAAEqB,YAAUzB,KAAKyB,WAAS1B,OAAIC,KAAK6B,SAAOzB,GAAE0B,gBAAkB9B,GAAAA,KAAK+B,YAAY3B,GAAE4B,UAASjC,IAAEK,GAAE6B,SAAAA;AAAAA,IAAU,GAAGjC,KAAKkC,oBAAkBnC,CAAAA,OAAI;AAAA,YAAMqB,KAAErB,GAAE6B,aAAe,EAAA,CAAA;AAAG,UAAG7B,GAAE0B,YAAUzB,KAAKyB,WAASL,OAAIpB,KAAK6B,KAAK;AAAO,YAAMxB,KAAE,oBAAI8B;AAAI,iBAAI,CAAMpC,IAAGgB,EAAAA,cAAaK,SAAMpB,KAAKS,cAAcJ,CAAAA,GAAEO,IAAIb,EAAKM,MAAAA,GAAE+B,IAAIrC,EAAAA,GAAGqB,GAAEiB,cAAc,IAAIjC,EAAEJ,KAAKyB,SAAQ1B,IAAE,IAAA,CAAA;AAAMA,MAAAA,GAAE+B,gBAAe;AAAA,IAAA,GAAI9B,KAAK6B,OAAK9B,IAAE,WAASqB,GAAEK,UAAQzB,KAAKyB,UAAQL,GAAEK,UAAQzB,KAAKyB,UAAQL,IAAEpB,KAAKsC,mBAAkBtC,KAAK6B,KAAKU,gBAAgBvC,IAAAA;AAAAA,EAAK;AAAA,EAAC,kBAAkBA;AAAAA,SAAK6B,KAAKW,iBAAiB,mBAAkBxC,KAAK2B,gBAAAA,GAAkB3B,KAAK6B,KAAKW,iBAAiB,oBAAmBxC,KAAKkC,iBAAkB;AAAA,EAAA;AAAA,EAAC,gBAAAO;AAAgBzC,SAAK6B,KAAKQ,cAAc,IAAIjB,EAAEpB,KAAKyB,OAAS,CAAA;AAAA,EAAA;AAAA;ACSh7B,MAAMiB,IAAQC,EAAc,eAAe;AAoBpC,MAAMC,UAAmBC,EAC9BC;AAAAA,EA4CA,cACExB;AAAAA,UAAAA;AA9CG;AA0BLyB;AACAC;AACAC;AACAC;AACAC,2BAASC,EAAeC;AACxBC;AACAC;AAeEvD,SAAKwD,OAAO,OACZxD,KAAKyD,gBAAgB,MACrBzD,mBAAAA,IAAyB0D,EAAAA,IACzB1D,mBAAKuD,IAAwBG,EAC7B1D,IAAAA,mBAAAA,IAAwB,IAAI2D,EAAgB3D,MAAM,EAAEyB,SAASmC,GAAgBlC,cAAc,IAAImC,IAC/F7D,CAAAA,IAAAA,mBAAAA,IAAwB,IAAI8D,EAAgB9D,MAAM,EAAEyB,SAASmC,GAAgB5B,UAAUhC,KAAK+D,gBAC7F,CAAA;AAAA,EAAA;AAAA,EAUD,YACE;AAAA,WAAO/D,mBAAKmD;AAAAA,EACb;AAAA,EAOD,IAAA,gBACE;AAAA,WAAOnD,mBAAKkD,IAAiBhD;AAAAA,EAC9B;AAAA,EAcD,MAAM8D,oBAAAA;AACJ1C,UAAM0C,kBAAAA,GAENhE,KAAK0C,QAAQ1C,KAAK0C,SAAS,OAC3B1C,KAAKiE,YAAYjE,KAAKiE,aAAaC,GACnClE,KAAKmE,uBAAuBnE,KAAKmE,wBAAwBC,GACzDpE,KAAK+C,iBAAuBsB,MAAAA,EAAoB,EAAExC,MAAM7B,MAAMiE,WAAWjE,KAAKiE,WAAWE,sBAAsBnE,KAAKmE,sBAAsBG,eAAe,KAAA,CAAA,GAEzJtE,KAAK+C,eAAeP,iBAAiB+B,EAAYC,OAAOC,CAAAA,OAAAA;AACtD,cAAMC,QAAEA,GAAAA,IAAWD;AAEnBzE,4BAAAA,oBAAAA,WAAYuE,EAAYC,OAAO,WAAWC,KAEtCC,GAAOvB,MAAYC,MAAAA,EAAeuB,cACpC3E,sBAAAA,oBAAAA,WAAe0E,MAEf1E,0CAAAA,WAAW;AAAA,IACZ,CAEJ;AAAA,EAAA;AAAA,EAsBD,QACEA;AAAAA,0BAAAA,oBAAAA;AAAAA,EACD;AAAA,EAwBD,OACEA;AAAAA,0BAAAA,oBAAAA,WAAW;AAAA,EACZ;AAAA,EAKD,kBAAA4E;AACE5E,0BAAK6E,oBAAL7E,WAAW;AAAA,EACZ;AAAA,EAOD,MAAM8E,YAAAA;AAEJ,WADA9E,mBAAAA,IAA4BA,MAAAA,KAAK+C,eAAegC,iBAAAA,IACzC/E;EACR;AAAA,EASD,MAAMgF,WAAWC,IACfjF;AAAAA,0BAAAA,oBAAAA,WAAY,mBAAmBiF;AAC/B,UAAMjC,KAAgBa,EAAcqB,KAAKD,EAAAA;AACzC,QAGE;AAAA,aAAA,MAFMjF,KAAK+C,eAAeoC,iBAAiBnC,EAC3ChD,GAAAA,sBAAAA,oBAAAA,WAAegD,KAAAA;AAAAA,IAEhB,SAAQoC,IAAAA;AAEP,YADAC,QAAQD,MAAM,6BAA6BA,EACrCA,GAAAA;AAAAA,IACP;AAAA,EACF;AAAA,EAOD,MAAA,cAEE;AAAA,WADApF,mBAAKgD,IAAAA,MAAuBhD,KAAK+C,eAAeuC,gBACzCtF,mBAAKgD;AAAAA,EACb;AAAA,EAmBD,SACE;AAAA,WAAOuC,yCACoCvF,sBAAKwF,mBAAAA,wBAA0C,MAAMxF,sBAAAA,oBAAAA,WAAW,cAAA,KAAmByF,EAAIzF,mBAAAA,GAAmCA,CAAAA,YAAAA,sBAAAA,mBACtHA,2EAAAA,sBAAAA,wBAA4ByF,EAAIzF,mBAAAA,GAAuCA,CAAAA,YAAAA,sBAAAA,mBAEvH;AAAA,EAAA;AAAA;AAzMDgD;AACAC;AACAC;AACAC;AACAG;AACAC;AAhCK;AA6GL,OAAApD,SAAUD,IACRF;AAAAA,qBAAAA,IAAsBG,SAASD,EAC/BF,GAAAA,mBAAAA,IAAcA,mBAAAA,IAAsBE,MAAMiD;AAC3C;AAED,OAAAT,WACM1C;AAAAA,OAAK0C,SACPA,EAAAA,GAASgD,SAEZ;AAAA;AAED,OAAAC,SAAOC,KAAAA,MACL5F;AAAAA,OAAKwD,OAAO,OACZxD,KAAKyD,eAAekC,MAAMC,EAC1B5F,GAAAA,KAAKyD,gBAAgB;AACtB;AASD,OAAAoB,SAAMgB,KAAQ,WAAA;AAEZ,MAAqB,YAAA,OAAVA,OAAuB,CAAC,WAAW,aAAeC,EAAAA,SAASD,EACpE,EAAA,OAAM,IAAIE,UAAU,qFAAqFF,EAG3G7F;AAAAA,OAAKwD,OAAO,MAERxD,KAAKyD,kBACPzD,sBAAK0C,oBAAL1C,WAAY,8BAA8BA,KAAKyD,gBAC/CzD,KAAKyD,cAAckC,MAGrB3F,IAAAA,sBAAAA,oBAAAA,WAAY,UAAUA,mBAAKsD,IAAkBpD,QAC7CF,sBAAAA,oBAAAA,WAAY,UAAUA,mBAAKuD,IAAsBrD,QACjDF,KAAKyD,gBAA0B,cAAVoC,KAAsB7F,mBAAKsD,IAAkBpD,QAAQF,mBAAAA,IAA2BE,OACrGF,KAAKyD,cAAcoB,KAAAA;AACpB;AAwDD,OAAMW,eAAmBf,IAAAA;AACvBzE,wBAAK0C,oBAAL1C,WAAY,wBAAwByE;AACpC,QAAMuB,KAAgBhG,MAAAA,KAAKgF,WAAWP,GAAMC,MAC5C1E;AAAAA,wBAAAA,oBAAAA,WAAY,kCAAkCgG,KACzCA,OAILhG,KAAKqC,cAAc,IAAI4D,YAAY1B,EAAY2B,QAAQ,EAAExB,QAAQ1E,KAAKgD,cACtEhD,CAAAA,CAAAA,GAAAA,sBAAAA,oBAAAA;AACD;AAED,OAAAmG,SAAkB1B,IAAAA;AAChBA,EAAAA,GAAM3C,gBAAAA,GACN9B,sBAAK2F,oBAAL3F,WAAK2F;AACN;AA5ND7C,cADWF,GACXE,cAAoB,EAClBmB,WAAW,EACTmC,MAAMC,QACNC,WAAW,aAEbnC,GAAAA,sBAAsB,EACpBiC,MAAMG,QACND,WAAW,4BAEb,CAACE,EAAYC,KAAQ,GAAA,EACnBL,MAAMM,QAAAA,GAERvD,OAAO,EACLiD,MAAMC,OAAAA,GAER3D,OAAO,EACL0D,MAAMM,SACNC,SAAS,KAAA,GAEXnD,MAAM,EACJ4C,MAAMM,SACNC,SAAAA,KAIJ5D,EAAAA;AA6MG6D,OAAOC,eAAe5F,IAAI,aAC7B2F,KAAAA,OAAOC,eAAeC,OAAO,eAAelE,CAAAA,GAG9CmE,EAAe,WAAW,CAAE;","x_google_ignoreList":[0,1]}