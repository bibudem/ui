{"version":3,"file":"bib-consent.js","sources":["../node_modules/@lit/context/lib/value-notifier.js","../node_modules/@lit/context/lib/controllers/context-provider.js","../src/components/bib-consent/bib-consent.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nclass s{get value(){return this.o}set value(s){this.setValue(s)}setValue(s,t=!1){const i=t||!Object.is(s,this.o);this.o=s,i&&this.updateObservers()}constructor(s){this.subscriptions=new Map,this.updateObservers=()=>{for(const[s,{disposer:t}]of this.subscriptions)s(this.o,t)},void 0!==s&&(this.value=s)}addCallback(s,t,i){if(!i)return void s(this.value);this.subscriptions.has(s)||this.subscriptions.set(s,{disposer:()=>{this.subscriptions.delete(s)},consumerHost:t});const{disposer:h}=this.subscriptions.get(s);s(this.value,h)}clearCallbacks(){this.subscriptions.clear()}}export{s as ValueNotifier};\n//# sourceMappingURL=value-notifier.js.map\n","import{ContextRequestEvent as t}from\"../context-request-event.js\";import{ValueNotifier as s}from\"../value-notifier.js\";\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */class e extends Event{constructor(t){super(\"context-provider\",{bubbles:!0,composed:!0}),this.context=t}}class i extends s{constructor(s,e,i){super(void 0!==e.context?e.initialValue:i),this.onContextRequest=t=>{const s=t.composedPath()[0];t.context===this.context&&s!==this.host&&(t.stopPropagation(),this.addCallback(t.callback,s,t.subscribe))},this.onProviderRequest=s=>{const e=s.composedPath()[0];if(s.context!==this.context||e===this.host)return;const i=new Set;for(const[s,{consumerHost:e}]of this.subscriptions)i.has(s)||(i.add(s),e.dispatchEvent(new t(this.context,s,!0)));s.stopPropagation()},this.host=s,void 0!==e.context?this.context=e.context:this.context=e,this.attachListeners(),this.host.addController?.(this)}attachListeners(){this.host.addEventListener(\"context-request\",this.onContextRequest),this.host.addEventListener(\"context-provider\",this.onProviderRequest)}hostConnected(){this.host.dispatchEvent(new e(this.context))}}export{i as ContextProvider,e as ContextProviderEvent};\n//# sourceMappingURL=context-provider.js.map\n","import { html, LitElement } from 'lit'\nimport { createRef, ref } from 'lit/directives/ref.js'\nimport { ContextProvider, ContextConsumer } from '@lit/context'\nimport '@auroratide/toggle-switch/lib/define.js'\nimport '../bib-button/bib-button-close.js'\nimport './bib-consent-consent-dialog.js'\nimport './bib-consent-preferences-dialog.js'\nimport createPreferencesClient from './preferencesClient.js'\nimport { consentContext } from './consent-context.js'\nimport { EVENT_NAMES, SERVER_MODE, SERVER_REQUEST_DEFAULT_TIMEOUT } from './constants.js'\nimport { loggerFactory } from '@/utils/logger.js'\n\nconst debug = loggerFactory('bib-consent', '#cd5300')\n\n/**\n * The `BibConsent` class is a custom web component that provides a user interface for managing consent preferences.\n *\n * It includes the following functionality:\n * - Fetching and displaying the user's consent preferences from a server\n * - Allowing the user to update their consent preferences\n * - Saving the updated consent preferences to the server\n * - Providing a consent dialog and a preferences dialog for the user to interact with\n *\n * The component can be configured with the following properties:\n * - `serverUrl`: the URL of the server where the consent preferences are stored\n * - `serverRequestTimeout`: the timeout for requests to the server\n * - `[SERVER_MODE.LOCAL]`: a boolean indicating whether the component is running in local mode\n * - `debug`: a boolean indicating whether debug logging should be enabled\n * - `open`: a boolean indicating whether the consent dialog or preferences dialog is currently open\n *\n * The component uses the `@lit/context` library to manage the consent preferences as a shared context, and the `createPreferencesClient` function to interact with the server.\n */\nexport class BibConsent extends LitElement {\n  static properties = {\n    serverUrl: {\n      type: String,\n      attribute: 'server-url',\n      reflect: true\n    },\n    serverRequestTimeout: {\n      type: Number,\n      attribute: 'server-request-timeout',\n      reflect: true\n    },\n    [SERVER_MODE.LOCAL]: {\n      type: Boolean\n    },\n    debug: {\n      type: Boolean,\n      reflect: true\n    },\n    open: {\n      type: Boolean,\n      reflect: true\n    },\n  }\n\n  #preferencesClient\n  #preferences\n  #consentDialogRef\n  #preferencesDialogRef\n  #consentProvider\n  #consentConsumer\n\n  /**\n   * Initializes the `BibConsent` component, setting up the necessary state and references.\n   * \n   * The constructor performs the following tasks:\n   * - Calls the parent class constructor (`super()`)\n   * - Initializes the `open` property to `false`, indicating that no dialog is currently open\n   * - Sets the `currentDialog` property to `null`, as no dialog is currently open\n   * - Creates references to the consent dialog and preferences dialog using `createRef()`\n   * - Creates a `ContextProvider` instance for the consent context, with the component instance as the host and an initial value of `null`\n   * - Creates a `ContextConsumer` instance for the consent context, with the component instance as the host and the `savePreferences` method as the callback\n   */\n  constructor() {\n    super()\n    this.open = false\n    this.currentDialog = null\n    this.#consentDialogRef = createRef()\n    this.#preferencesDialogRef = createRef()\n    this.#consentProvider = new ContextProvider(this, { context: consentContext, initialValue: null })\n    this.#consentConsumer = new ContextConsumer(this, { context: consentContext, callback: this.savePreferences })\n  }\n\n  /**\n   * Gets the user's consent preferences.\n   * @returns {Object} The user's consent preferences.\n   */\n  get preferences() {\n    return this.#consentConsumer.value\n  }\n\n  /**\n   * Initializes the `BibConsent` component, sets up the necessary state and references, and handles events related to the preferences client.\n   * \n   * The `connectedCallback` method performs the following tasks:\n   * - Calls the parent class's `connectedCallback` method\n   * - Sets the `debug` property to `false` if it is not already defined\n   * - Sets the `serverUrl` property to `'https://bib.umontreal.ca/consent/server'` if it is not already defined\n   * - Sets the `serverRequestTimeout` property to `SERVER_REQUEST_DEFAULT_TIMEOUT` if it is not already defined\n   * - Creates a `PreferencesClient` instance and assigns it to the `#preferencesClient` property\n   * - Adds event listeners for the `EVENT_NAMES.READY` and `EVENT_NAMES.UPDATE` events on the `#preferencesClient` instance\n   * - Adds an event listener for the `context-request` event on the component's shadow root, which responds with the current preferences\n   */\n  async connectedCallback() {\n    super.connectedCallback()\n\n    this.debug = this.debug || false\n    this.serverUrl = this.serverUrl || 'https://bib.umontreal.ca/consent/server'\n    this.serverRequestTimeout = this.serverRequestTimeout || SERVER_REQUEST_DEFAULT_TIMEOUT\n    this.#preferencesClient = await createPreferencesClient({ host: this, serverUrl: this.serverUrl, serverRequestTimeout: this.serverRequestTimeout, reflectEvents: true })\n\n    this.#preferencesClient.addEventListener(EVENT_NAMES.READY, event => {\n\n      this.#debug(EVENT_NAMES.READY, 'event: ', event)\n\n      if (event.detail) {\n        // this.#preferences = event.detail\n        this.#consentProvider.setValue(event.detail)\n      } else {\n        this.#show('consent')\n      }\n    })\n  }\n\n  #debug() {\n    if (this.debug) {\n      debug(...arguments)\n    }\n  }\n\n  #close(emit = true) {\n    this.open = false\n    this.currentDialog?.close(emit)\n    this.currentDialog = null\n  }\n\n  /**\n   * Closes the current dialog, if any, and sets the `open` property to `false`.\n   */\n  close() {\n    this.#close()\n  }\n\n  #show(panel = 'consent') {\n\n    if (typeof panel !== 'string' && !['consent', 'preferences'].includes(panel)) {\n      throw new TypeError(`The panel argument must be a string of either values 'consent' or 'preferences'. `, panel)\n    }\n\n    this.open = true\n\n    if (this.currentDialog) {\n      this.#debug('[#show] this.currentDialog', this.currentDialog)\n      this.currentDialog.close()\n    }\n\n    this.#debug('[show]', this.#consentDialogRef.value)\n    this.#debug('[show]', this.#preferencesDialogRef.value)\n    this.currentDialog = panel === 'consent' ? this.#consentDialogRef.value : this.#preferencesDialogRef.value\n    // this.#preferencesDialogRef.value?.show()\n    this.currentDialog.show()\n  }\n\n  /**\n   * Shows the consent dialog.\n   */\n  show() {\n    this.#show('consent')\n  }\n\n  /**\n   * Shows the preferences dialog.\n   */\n  showPreferences() {\n    this.#show('preferences')\n  }\n\n  /**\n   * Retrieves the user's consent preferences from the server.\n   *\n   * @returns {Promise<Object>} - A promise that resolves to the user's consent preferences.\n   */\n  async getPreferences() {\n    this.#preferences = await this.#preferencesClient.getPreferences()\n    return this.#preferences\n  }\n\n  /**\n   * Saves the user's consent preferences to the server.\n   *\n   * @param {Object} preferences - The user's consent preferences.\n   * @returns {Promise<boolean>} - A promise that resolves to `true` if the preferences were saved successfully, or `false` if there was an error.\n   */\n\n  async savePreferences(preferences) {\n    this.#debug('[savePreferences] preferences: ', preferences)\n    try {\n      await this.#preferencesClient.setPreferences(preferences)\n      this.#consentProvider.setValue(preferences)\n      return true\n    } catch (error) {\n      console.error('[savePreferences] error: ', error)\n      throw error\n    }\n  }\n\n  /**\n   * Resets the user's consent preferences to their default values.\n   *\n   * @returns {Promise<Object>} - A promise that resolves to the user's reset consent preferences.\n   */\n  async resetPreferences() {\n    this.#preferences = await this.#preferencesClient.resetPreferences()\n    return this.#preferences\n  }\n\n  async #handleUpdateEvent(event) {\n    this.#debug('[#handleUpdateEvent]', event)\n    const success = await this.savePreferences(event.detail)\n    this.#debug('[#handleUpdateEvent] success: ', success)\n    if (!success) {\n      // TODO: show error message\n      return\n    }\n    this.dispatchEvent(new CustomEvent(EVENT_NAMES.UPDATE, { detail: event.detail }))\n    this.#close()\n  }\n\n  #handleCloseEvent(event) {\n    event.stopPropagation()\n    this.#close(false)\n  }\n\n  render() {\n    return html`\n        <bib-consent-consent-dialog @update=\"${this.#handleUpdateEvent}\" @show-preferences=\"${() => this.#show('preferences')}\" ${ref(this.#consentDialogRef)} @close=\"${this.#handleCloseEvent}\"></bib-consent-consent-dialog>\n        <bib-consent-preferences-dialog @update=\"${this.#handleUpdateEvent}\" ${ref(this.#preferencesDialogRef)} @close=\"${this.#handleCloseEvent}\"></bib-consent-preferences-dialog>\n    `\n  }\n}\n\nif (!window.customElements.get('bib-consent')) {\n  window.customElements.define('bib-consent', BibConsent)\n}"],"names":["s","this","o","value","setValue","t","i","Object","is","updateObservers","subscriptions","Map","disposer","has","set","delete","consumerHost","h","get","clearCallbacks","clear","e","Event","super","bubbles","composed","context","initialValue","onContextRequest","composedPath","host","stopPropagation","addCallback","callback","subscribe","onProviderRequest","Set","add","dispatchEvent","attachListeners","addController","addEventListener","debug","loggerFactory","BibConsent","LitElement","static","constructor","preferencesClient","preferences","consentDialogRef","preferencesDialogRef","consentProvider","consentConsumer","open","currentDialog","createRef","ContextProvider","consentContext","ContextConsumer","savePreferences","connectedCallback","serverUrl","serverRequestTimeout","SERVER_REQUEST_DEFAULT_TIMEOUT","createPreferencesClient","reflectEvents","EVENT_NAMES","READY","event","detail","show","getPreferences","setPreferences","error","console","resetPreferences","html","handleUpdateEvent","ref","handleCloseEvent","window","arguments","close","emit","panel","includes","TypeError","success","CustomEvent","UPDATE","type","String","attribute","reflect","Number","SERVER_MODE","LOCAL","Boolean","customElements","define"],"mappings":"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","x_google_ignoreList":[0,1]}