{"version":3,"file":"bib-consent-dialog.cjs","sources":["../src/components/bib-consent/bib-consent-dialog.js"],"sourcesContent":["import { css, html, LitElement, nothing, unsafeCSS } from 'lit'\r\nimport { createRef, ref } from 'lit/directives/ref.js'\r\nimport styles from './bib-consent-dialog.scss?inline'\r\nimport { EVENT_NAMES } from './constants.js'\r\n\r\n/**\r\n * A custom dialog element that can be shown or hidden, with an optional close button.\r\n * \r\n * The dialog can be shown either as a modal or non-modal dialog. It dispatches a 'close' event when closed.\r\n * \r\n * @property {boolean} debug - Indicates whether the dialog is in debug mode.\r\n * @property {boolean} open - Indicates whether the dialog is currently open.\r\n * @property {boolean} showClose - Indicates whether a close button should be displayed.\r\n */\r\nexport class BibConsentDialog extends LitElement {\r\n  static properties = {\r\n    debug: {\r\n      type: Boolean,\r\n      reflect: true\r\n    },\r\n    open: {\r\n      type: Boolean,\r\n      reflect: true\r\n    },\r\n    showClose: {\r\n      type: Boolean,\r\n      reflect: true,\r\n      attribute: 'show-close'\r\n    }\r\n  }\r\n\r\n  static styles = [\r\n    css`${unsafeCSS(styles)}`\r\n  ]\r\n\r\n  /**\r\n   * Initializes the `BibConsentDialog` component.\r\n   * \r\n   * This constructor sets the initial state of the component, including whether the dialog is open and whether a close button should be displayed.\r\n   * \r\n   * The `_dialogRef` property is a reference to the dialog element, which is used to control the dialog's visibility and behavior.\r\n   */\r\n  constructor() {\r\n    super()\r\n    this.open = false\r\n    this.showClose = this.showClose || false\r\n    this._dialogRef = createRef()\r\n  }\r\n\r\n  /**\r\n   * Adds an event listener to the dialog element to listen for the 'close' event, and calls the `close()` method when the dialog is closed.\r\n   * \r\n   * This method is called when the component is connected to the DOM, and sets up the necessary event listener to handle the dialog's closing.\r\n   */\r\n  connectedCallback() {\r\n    super.connectedCallback()\r\n\r\n    this._dialogRef.value?.addEventListener('close', () => this.close())\r\n  }\r\n\r\n  #showCloseButton() {\r\n    return this.showClose ? html`\r\n        <bib-button-close @click=\"${() => this.close()}\" class=\"btn-close\"></bib-button-close>\r\n        ` : nothing\r\n  }\r\n\r\n  #show(mode = '') {\r\n    if (this._dialogRef.value && !this._dialogRef.value.open) {\r\n      mode === 'modal' ? this._dialogRef.value?.showModal() : this._dialogRef.value?.show()\r\n      this.open = true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows the dialog.\r\n   * \r\n   * This method sets the `open` property to `true` and calls the `show()` method on the dialog element to display it.\r\n   */\r\n  show() {\r\n    this.#show()\r\n  }\r\n\r\n  /**\r\n   * Shows the dialog in modal mode.\r\n   * \r\n   * This method sets the `open` property to `true` and calls the `showModal()` method on the dialog element to display it in modal mode.\r\n   */\r\n  showModal() {\r\n    this.#show('modal')\r\n  }\r\n\r\n  /**\r\n   * Closes the dialog and optionally dispatches a 'close' event.\r\n   * \r\n   * This method sets the `open` property to `false` and calls the `close()` method on the dialog element to hide it. If the `emit` parameter is `true`, it also dispatches a 'close' event that bubbles up and is composed.\r\n   * \r\n   * @param {boolean} [emit=true] - Whether to dispatch a 'close' event.\r\n   * @emits bib:close - Emits a 'bib:close' event.\r\n   */\r\n  close() {\r\n    this.open = false\r\n    if (this._dialogRef.value && this._dialogRef.value.open) {\r\n      this._dialogRef.value?.close()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n      <dialog class=\"dialog\" ${ref(this._dialogRef)}>\r\n        ${this.#showCloseButton()}\r\n        <div class=\"dialog-container\">\r\n          <div class=\"content-container\">\r\n            <slot></slot>\r\n          </div>\r\n        </div>\r\n      </dialog>\r\n    `\r\n  }\r\n}\r\n\r\nif (!window.customElements.get('bib-consent-dialog')) {\r\n  window.customElements.define('bib-consent-dialog', BibConsentDialog)\r\n}"],"names":["BibConsentDialog","LitElement","constructor","this","_r_instances","open","showClose","_dialogRef","createRef","connectedCallback","value","addEventListener","close","show","showModal","render","html","ref","n","WeakSet","o_fn","showCloseButton","nothing","T","e_fn","mode","static","debug","type","Boolean","reflect","attribute","css","unsafeCSS","window","customElements","get","define"],"mappings":"6ZAcO,MAAMA,UAAyBC,EAAAA,EA4BpC,WAAAC,aAEEC,UA9BGA,QAAAC,0GA8BEC,KAAAA,QACLF,KAAKG,UAAYH,KAAKG,YAAAA,EACtBH,KAAKI,WAAaC,KACnB,CAOD,iBAAAC,GACQA,MAAAA,oBAENN,KAAKI,WAAWG,OAAOC,iBAAiB,SAAS,IAAMR,KAAKS,SAC7D,CAoBD,IAAAC,GACEV,EAAAA,KAAKU,EAALV,GAAAA,KAAAA,KACD,CAOD,SAAAW,GACEX,EAAAA,UAAAA,KAAWA,KAAA,QACZ,CAUD,KAAAS,GACET,KAAKE,MAAAA,EACDF,KAAKI,WAAWG,OAASP,KAAKI,WAAWG,MAAML,MACjDF,KAAKI,WAAWG,OAAOE,OAE1B,CAED,MAAAG,GACSC,OAAAA,GACoBC,0BAAAA,EAAGC,EAACf,KAAKI,eAC9BJ,EAAAA,KAAAA,EAAAA,GAAAA,2GAQP,EAvGIC,EAAA,IAAAe,QA8CLC,EAAAC,WACSlB,OAAAA,KAAKG,UAAYU,EAAAA,CAAAA,6BACQ,IAAMb,KAAKS,iDACnCU,EAAOC,CAChB,EAEDC,EAAAX,SAAMY,EAAO,IACFlB,KAAAA,WAAWG,QAAUP,KAAKI,WAAWG,MAAML,OACzC,UAAToB,EAAmBtB,KAAKI,WAAWG,OAAOI,YAAcX,KAAKI,WAAWG,OAAOG,OAC/EV,KAAKE,MAAO,EAEf,EAxDDqB,EADW1B,EACX0B,aAAoB,CAClBC,MAAO,CACLC,KAAMC,QACNC,SAAS,GAEXzB,KAAM,CACJuB,KAAMC,QACNC,SAAAA,GAEFxB,UAAW,CACTsB,KAAMC,QACNC,SAAAA,EACAC,UAAW,gBAIfL,EAjBW1B,EAiBK,SAAA,CACdgC,EAAAA,IAAMC,EAAAA,qrJAwFLC,OAAOC,eAAeC,IAAI,uBAC7BF,OAAOC,eAAeE,OAAO,qBAAsBrC"}