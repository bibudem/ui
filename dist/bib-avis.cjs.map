{"version":3,"file":"bib-avis.cjs","sources":["../src/components/bib-avis/bib-avis.js","../src/icons/close_FILL0_wght400_GRAD0_opsz24.svg?raw","../src/utils/dom.js"],"sourcesContent":["import { Task } from '@lit/task'\r\nimport { LitElement, html, css, unsafeCSS } from 'lit'\r\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'\r\nimport { openDB } from 'idb'\r\nimport { nodeIsEmpty } from '@/utils/dom.js'\r\nimport { addToGlobalBib } from '@/utils/bib.js'\r\nimport { DB_NAME, DB_STORE_NAME, DB_VERSION } from './constants.js'\r\nimport closeIcon from '../../icons/close_FILL0_wght400_GRAD0_opsz24.svg?raw'\r\nimport bibAvisStyles from './bib-avis.scss?inline'\r\n\r\n/**\r\n * Génère un hash SHA-256 pour un objet donné\r\n * @param {Object} obj - L'objet à hasher\r\n * @returns {Promise<string>} Le hash hexadécimal de l'objet\r\n */\r\nasync function hash(obj) {\r\n  const utf8 = new TextEncoder().encode(JSON.stringify(obj))\r\n  const hashBuffer = await crypto.subtle.digest('SHA-256', utf8)\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer))\r\n  const hashHex = hashArray\r\n    .map((bytes) => bytes.toString(16).padStart(2, '0'))\r\n    .join('')\r\n  return hashHex\r\n}\r\n\r\n/**\r\n * Composant d'affichage d'avis pour les Bibliothèques de l'Université de Montréal\r\n * \r\n * Ce composant Web personnalisé permet d'afficher des avis provenant d'un service distant\r\n * ou du contenu local. Il gère la persistance des avis via IndexedDB pour éviter\r\n * d'afficher plusieurs fois le même avis à l'utilisateur.\r\n * \r\n * @element bib-avis\r\n * \r\n * @fires bib:show - Émis avant l'affichage d'un avis. Peut être annulé.\r\n * @fires bib:hide - Émis avant le masquage d'un avis. Peut être annulé.\r\n * \r\n * @slot - Contenu HTML local à afficher comme avis (optionnel)\r\n * \r\n * @example\r\n * \r\n * <!-- Avis depuis un service distant -->\r\n * <bib-avis service=\"https://avis.bib.umontreal.ca/api/avis\" bouton-fermer></bib-avis>\r\n * \r\n * <!-- Avis avec contenu local -->\r\n * <bib-avis bouton-fermer>\r\n *   <p>Ceci est un avis local important.</p>\r\n * </bib-avis>\r\n * \r\n * \r\n * @cssprop --bib-avis-background-color - Couleur de fond de l'avis\r\n * @cssprop --bib-avis-text-color - Couleur du texte de l'avis\r\n * @cssprop --bib-avis-border-color - Couleur de la bordure de l'avis\r\n */\r\nexport class BibAvis extends LitElement {\r\n  /**\r\n   * Propriétés réactives du composant\r\n   */\r\n  static properties = {\r\n    /**\r\n     * URL du service d'avis distant\r\n     * @type {string}\r\n     * @default 'https://avis.bib.umontreal.ca/api/avis'\r\n     */\r\n    service: {\r\n      type: String\r\n    },\r\n    /**\r\n     * Affiche ou masque le bouton de fermeture\r\n     * @type {boolean}\r\n     * @default false\r\n     */\r\n    boutonFermer: {\r\n      type: Boolean,\r\n      attribute: 'bouton-fermer'\r\n    },\r\n    /**\r\n     * Message d'avis actuel (état interne)\r\n     * @type {Object|null}\r\n     * @private\r\n     */\r\n    message: {\r\n      state: true\r\n    }\r\n  }\r\n\r\n  static styles = [\r\n    css`${unsafeCSS(bibAvisStyles)}`,\r\n    css`\r\n    `\r\n  ]\r\n\r\n  /**\r\n   * Données de l'avis actuel\r\n   * @type {Object|null}\r\n   * @private\r\n   */\r\n  #avis\r\n\r\n  /**\r\n   * Instance de la base de données IndexedDB\r\n   * @type {IDBDatabase|null}\r\n   * @private\r\n   */\r\n  #db\r\n\r\n  /**\r\n   * Constructeur du composant BibAvis\r\n   * Initialise les propriétés par défaut\r\n   */\r\n  constructor() {\r\n    super()\r\n\r\n    this.#avis = null\r\n    this.service = 'https://avis.bib.umontreal.ca/api/avis'\r\n    this.boutonFermer = false\r\n  }\r\n\r\n  /**\r\n   * Crée et retourne une tâche pour récupérer les avis\r\n   * @returns {Task} Tâche de récupération des avis\r\n   * @private\r\n   */\r\n  #getAvis() {\r\n    return new Task(this, {\r\n      task: async ([service], { signal }) => {\r\n\r\n        const doGetAvis = new Promise(async (resolve, reject) => {\r\n          if (!nodeIsEmpty(this)) {\r\n            return resolve({ isLocal: true, message: this.innerHTML.split(/<!--\\?lit\\$\\d+\\$-->/).join('') })\r\n          }\r\n\r\n          const url = new URL(service)\r\n          const response = await fetch(url, {\r\n            headers: {\r\n              \"Accept\": \"application/json\",\r\n            },\r\n            signal\r\n          })\r\n            .catch(console.error)\r\n\r\n          if (!response.ok) {\r\n            return reject(new Error(response.status))\r\n          }\r\n\r\n          const { success, data } = await response.json()\r\n\r\n          if (success) {\r\n            if (data === null) {\r\n            return resolve({ isLocal: false, message: null })\r\n          }\r\n            const { id, message } = data\r\n            return resolve({ isLocal: false, id, message })\r\n          }\r\n\r\n          reject(new Error('The service responded with a message with a prop succes at', success))\r\n        })\r\n\r\n        try {\r\n          const data = await doGetAvis\r\n          await this.#processAvis(data)\r\n        } catch (error) {\r\n          console.error('[#getAvis] An error occured: %o', error)\r\n        }\r\n\r\n        return data\r\n      },\r\n      args: () => [this.service]\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Traite les données d'avis récupérées et gère la persistance\r\n   * @param {Object} avis - Données de l'avis à traiter\r\n   * @param {string} avis.message - Contenu HTML du message\r\n   * @param {string} [avis.id] - Id unique du message\r\n   * @param {boolean} [avis.isLocal] - Indique si l'avis provient du contenu local\r\n   * @returns {Promise<void>}\r\n   * @private\r\n   */\r\n  async #processAvis(avis) {\r\n    // Vérifier si avis est null ou n'a pas de message\r\n    if (!avis || !avis.message) {\r\n      this.setMessage(null)\r\n      return\r\n    }\r\n    const { id, message } = avis\r\n    if (!message) {\r\n      this.setMessage(null)\r\n      return\r\n    }\r\n\r\n    if (!('indexedDB' in window)) {\r\n      this.setMessage(message)\r\n      return\r\n    }\r\n\r\n    const db = this.#db = await openDB(DB_NAME, DB_VERSION, {\r\n      upgrade(db) {\r\n        // Checks if the object store exists:\r\n        if (!db.objectStoreNames.contains(DB_STORE_NAME)) {\r\n          db.createObjectStore(DB_STORE_NAME)\r\n        }\r\n      }\r\n    })\r\n\r\n    try {\r\n    // Vérifier que id existe avant de l'utiliser\r\n    const storageId = id || await hash(avis)\r\n    \r\n    const storedAvis = await db.get(DB_STORE_NAME, storageId)\r\n    if (storedAvis) {\r\n      if (!storedAvis.hidden) {\r\n        // Utiliser storageId au lieu de id\r\n        await db.delete(DB_STORE_NAME, storageId)\r\n        this.#show({...storedAvis, id: storageId})\r\n      }\r\n    } else {\r\n      this.#show({...avis, id: storageId})\r\n    }\r\n  } catch (error) {\r\n    console.error('Something went wrong with indexedDB: %o', error)\r\n    this.setMessage(message)\r\n  }\r\n  }\r\n\r\n  /**\r\n   * Affiche l'avis et le sauvegarde en base de données\r\n   * @param {Object} avis - Données de l'avis à afficher\r\n   * @returns {Promise<void>}\r\n   * @private\r\n   */\r\n  async #show(message) {\r\n  const canceled = !this.dispatchEvent(new CustomEvent('bib:show', { bubbles: true, cancelable: true }))\r\n\r\n  if (canceled) {\r\n    return\r\n  }\r\n\r\n  this.setMessage(message)\r\n\r\n  // Vérifier que message.id existe avant de l'utiliser\r\n  if (this.#db && message.id) {\r\n    await this.#db.put(DB_STORE_NAME, { ...message, hidden: false }, message.id)\r\n  }\r\n}\r\n\r\n  /**\r\n   * Masque l'avis et met à jour son statut en base de données\r\n   * @returns {Promise<void>}\r\n   * @private\r\n   */\r\n  async #hide() {\r\n\r\n    const canceled = !this.dispatchEvent(new CustomEvent('bib:hide', { bubbles: true, cancelable: true }))\r\n\r\n    if (canceled) {\r\n      return\r\n    }\r\n\r\n    const { id } = this.#avis\r\n    await this.#db.put(DB_STORE_NAME, { ...this.#avis, hidden: true }, id)\r\n    this.#avis = null\r\n    this.requestUpdate()\r\n  }\r\n\r\n  /**\r\n   * Méthode du cycle de vie appelée lorsque l'élément est connecté au DOM\r\n   * Initialise la récupération des avis\r\n   */\r\n  connectedCallback() {\r\n    super.connectedCallback()\r\n    this.#getAvis()\r\n  }\r\n\r\n  /**\r\n   * Gestionnaire de clic pour le bouton de fermeture\r\n   * @private\r\n   */\r\n  #onBtnFermerClick() {\r\n    this.#hide()\r\n  }\r\n\r\n  /**\r\n   * Rendu conditionnel du bouton de fermeture\r\n   * @returns {TemplateResult|null} Template du bouton ou null\r\n   * @private\r\n   */\r\n  _renderBoutonFermer() {\r\n    return this.boutonFermer ? html`<button class=\"btn-close\" aria-label=\"Fermer\" @click=\"${this.#onBtnFermerClick}\">${unsafeHTML(closeIcon)}</button>` : null\r\n  }\r\n\r\n  /**\r\n   * Méthode de rendu du composant\r\n   * @returns {TemplateResult|null} Template HTML de l'avis ou null si aucun message\r\n   */\r\n  render() {\r\n    return this.#avis?.message ? html`<aside class=\"container\"><div class=\"inner\"><div class=\"message\">${unsafeHTML(this.#avis.message)}</div>${this._renderBoutonFermer()}</div></aside>` : null\r\n  }\r\n\r\n  /**\r\n   * Définit le message d'avis à afficher\r\n   * @param {string|Object|null} message - Message à afficher ou objet contenant le message\r\n   * @public\r\n   */\r\n  setMessage(message) {\r\n    this.#avis = typeof message === 'string' ? { message, isLocal: true } : message\r\n  }\r\n}\r\n\r\nif (!window.customElements.get('bib-avis')) {\r\n  window.customElements.define('bib-avis', BibAvis)\r\n}\r\n\r\naddToGlobalBib('avis', {})","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24\\\" viewBox=\\\"0 -960 960 960\\\" width=\\\"24\\\"><path d=\\\"M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 28-11t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z\\\"/></svg>\"","export function nodeIsEmpty(node) {\r\n  return node.textContent.trim() === \"\"\r\n}"],"names":["BibAvis","LitElement","constructor","super","__privateAdd","this","_o_instances","avis","db","service","boutonFermer","connectedCallback","_renderBoutonFermer","html","x","onBtnFermerClick","unsafeHTML","render","message","setMessage","isLocal","WeakSet","s_fn","getAvis","Task","h","task","async","signal","doGetAvis","Promise","resolve","reject","textContent","trim","innerHTML","split","join","url","URL","response","fetch","headers","Accept","catch","console","error","ok","Error","status","success","data","json","id","processAvis","args","i_fn","window","openDB","DB_NAME","DB_VERSION","upgrade","objectStoreNames","contains","DB_STORE_NAME","createObjectStore","storageId","obj","utf8","TextEncoder","encode","JSON","stringify","hashBuffer","crypto","subtle","digest","Array","from","Uint8Array","map","bytes","toString","padStart","storedAvis","get","hidden","delete","show","n_fn","dispatchEvent","CustomEvent","bubbles","cancelable","put","hide","requestUpdate","o_fn","static","type","String","Boolean","attribute","state","css","unsafeCSS","customElements","define","addToGlobalBib"],"mappings":"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"}