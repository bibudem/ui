{"version":3,"file":"index-CRxQMTzC.js","sources":["../node_modules/idb/build/index.js"],"sourcesContent":["const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst transactionDoneMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(this.request);\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nconst advanceMethodProps = ['continue', 'continuePrimaryKey', 'advance'];\nconst methodMap = {};\nconst advanceResults = new WeakMap();\nconst ittrProxiedCursorToOriginalProxy = new WeakMap();\nconst cursorIteratorTraps = {\n    get(target, prop) {\n        if (!advanceMethodProps.includes(prop))\n            return target[prop];\n        let cachedFunc = methodMap[prop];\n        if (!cachedFunc) {\n            cachedFunc = methodMap[prop] = function (...args) {\n                advanceResults.set(this, ittrProxiedCursorToOriginalProxy.get(this)[prop](...args));\n            };\n        }\n        return cachedFunc;\n    },\n};\nasync function* iterate(...args) {\n    // tslint:disable-next-line:no-this-assignment\n    let cursor = this;\n    if (!(cursor instanceof IDBCursor)) {\n        cursor = await cursor.openCursor(...args);\n    }\n    if (!cursor)\n        return;\n    cursor = cursor;\n    const proxiedCursor = new Proxy(cursor, cursorIteratorTraps);\n    ittrProxiedCursorToOriginalProxy.set(proxiedCursor, cursor);\n    // Map this double-proxy back to the original, so other cursor methods work.\n    reverseTransformCache.set(proxiedCursor, unwrap(cursor));\n    while (cursor) {\n        yield proxiedCursor;\n        // If one of the advancing methods was not called, call continue().\n        cursor = await (advanceResults.get(proxiedCursor) || cursor.continue());\n        advanceResults.delete(proxiedCursor);\n    }\n}\nfunction isIteratorProp(target, prop) {\n    return ((prop === Symbol.asyncIterator &&\n        instanceOfAny(target, [IDBIndex, IDBObjectStore, IDBCursor])) ||\n        (prop === 'iterate' && instanceOfAny(target, [IDBIndex, IDBObjectStore])));\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get(target, prop, receiver) {\n        if (isIteratorProp(target, prop))\n            return iterate;\n        return oldTraps.get(target, prop, receiver);\n    },\n    has(target, prop) {\n        return isIteratorProp(target, prop) || oldTraps.has(target, prop);\n    },\n}));\n\nexport { deleteDB, openDB, unwrap, wrap };\n"],"names":["instanceOfAny","object","constructors","some","c","idbProxyableTypes","cursorAdvanceMethods","transactionDoneMap","WeakMap","transformCache","reverseTransformCache","idbProxyTraps","target","prop","receiver","IDBTransaction","get","objectStoreNames","undefined","objectStore","wrap","set","value","has","replaceTraps","callback","IDBRequest","request","promise","Promise","resolve","reject","unlisten","removeEventListener","success","error","result","addEventListener","newValue","func","IDBCursor","prototype","advance","continue","continuePrimaryKey","includes","args","apply","unwrap","this","tx","done","complete","DOMException","IDBDatabase","IDBObjectStore","IDBIndex","Proxy","openDB","name","version","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","transaction","then","db","catch","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","replace","useIndex","isWrite","method","async","storeName","store","index","shift","all","oldTraps","advanceMethodProps","methodMap","advanceResults","ittrProxiedCursorToOriginalProxy","cursorIteratorTraps","cachedFunc","iterate","cursor","openCursor","proxiedCursor","delete","isIteratorProp","Symbol","asyncIterator"],"mappings":"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","x_google_ignoreList":[0]}