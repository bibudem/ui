{"version":3,"file":"bib-consent-server.cjs","sources":["../src/components/bib-consent/bib-consent-server.js"],"sourcesContent":["import { css, html, LitElement, unsafeCSS } from 'lit'\nimport { startListening } from 'postmessage-promise'\nimport { createRef, ref } from 'lit/directives/ref.js'\nimport { patternMatchesOrigin } from '@/utils/url.js'\nimport { loggerFactory } from '@/utils/logger.js'\nimport getPreferenceStorage from './PreferenceStorage.js'\nimport styles from './bib-consent-server.scss?inline'\n\n/**\n * @class BibConsentServer\n * @extends LitElement\n * @description A custom element that manages consent preferences for the BIB application.\n * It handles storage of preferences, listens for postMessage events, and provides methods\n * for setting, getting, and resetting user consent preferences.\n */\nexport class BibConsentServer extends LitElement {\n  #storage\n  #logger = loggerFactory('consent-server')\n\n  static properties = {\n    connected: {\n      type: Boolean,\n    },\n    debug: {\n      type: Boolean,\n      reflect: true\n    },\n    allowedOrigins: {\n      type: String,\n      attribute: 'allowed-origins',\n      converter: {\n        fromAttribute: (value) => value.split(/\\s+/).map(origin => origin.trim()),\n        toAttribute: (value) => value.join(' ')\n      }\n    }\n  }\n\n  static styles = [\n    css`${unsafeCSS(styles)}`\n  ]\n\n  /**\n   * Creates an instance of BibConsentServer.\n   * @constructor\n   * @description Initializes the BibConsentServer with default values and starts the initialization process.\n   */\n  constructor() {\n    super()\n    this.connected = false\n    this.debug = this.debug || false\n    this.loggerRef = createRef()\n    this.allowedOrigins = this.allowedOrigins || [] // Default: none\n    this.init()\n  }\n\n  /**\n   * Initializes the BibConsentServer instance.\n   * @async\n   * @description Sets up preference storage, starts listening for storage updates,\n   * and begins listening for postMessage events from allowed origins.\n   */\n  async init() {\n    this.log('Initializing BibConsentServer...')\n    this.#storage = await getPreferenceStorage()\n    this.log('Connected to storage.')\n\n    this.#storage.listen(event => {\n      this.log('Storage updated with data', event.detail)\n    })\n\n    this.log('Start listening for storage updates...')\n    this.startListening()\n  }\n\n  /**\n   * Logs messages when in debug mode.\n   * @description If debug attribute is set, logs messages to the console and updates the UI logger.\n   * @param {...any} args - The messages or data to log.\n   */\n  log(...args) {\n    if (this.hasAttribute('debug')) {\n      this.#logger(...args)\n\n      const msg = args.map(part => typeof part === 'string' ? part : JSON.stringify(part)).join(' ')\n      if (this.loggerRef.value) {\n        this.loggerRef.value.value += `${this.loggerRef.value.value === '' ? '' : '\\r'}${msg}`\n      }\n    }\n  }\n\n  /**\n   * Starts listening for postMessage events and handles consent-related requests.\n   * @async\n   * @description Sets up a message listener for allowed origins and handles the following methods:\n   * - setPreferences: Sets the user's consent preferences in the storage.\n   * - getPreferences: Retrieves the user's current consent preferences from storage.\n   * - resetPreferences: Resets the user's consent preferences to default values.\n   * - ping: Responds with \"pong\" to check if the server is responsive.\n   * The method also logs all incoming requests and their responses when in debug mode.\n   */\n  async startListening() {\n    this.log('startListening()')\n\n    const { listenMessage } = await startListening({\n      eventFilter: event => {\n        const { origin } = event\n        return this.allowedOrigins.length > 0 && this.allowedOrigins.some(originPattern => patternMatchesOrigin(originPattern, origin))\n      }\n    })\n\n    this.log('Listening for postMessage events...')\n\n    this.connected = true\n    this.log('connected:', this.connected)\n\n    listenMessage(async (method, payload, response) => {\n      let responseData\n\n      switch (method) {\n        case 'setPreferences':\n          responseData = await this.#storage.setPreferences(payload)\n          break\n\n        case 'getPreferences':\n          responseData = await this.#storage.getPreferences()\n          break\n\n        case 'resetPreferences':\n          responseData = await this.#storage.resetPreferences()\n          break\n\n        case 'ping':\n          responseData = \"pong\"\n          break\n\n        default:\n          this.log(`Unknown method: ${method}. Payload:`, payload)\n          throw new Error(`Unknown method: ${method}`)\n      }\n\n      if (payload) {\n        this.log(`Method \\`${method}\\` called with payload:`, payload, 'response:', responseData)\n      } else {\n        this.log(`Method \\`${method}\\` called.`, 'response:', responseData)\n      }\n\n      response(responseData)\n    })\n  }\n\n  /**\n   * Renders the BibConsentServer element.\n   * @returns {TemplateResult} The HTML template for the BibConsentServer.\n   * @description Renders a title and a textarea for logging when in debug mode.\n   */\n  render() {\n    return html`\n      <h1>I am bib-consent-server</h1>\n      <div class=\"log-container\">\n        <textarea class=\"log\" ${ref(this.loggerRef)}></textarea>\n      </div>`\n  }\n}\n\nif (!window.customElements.get('bib-consent-server')) {\n  window.customElements.define('bib-consent-server', BibConsentServer)\n}\n"],"names":["BibConsentServer","LitElement","constructor","this","storage","loggerFactory","connected","debug","loggerRef","createRef","allowedOrigins","init","log","getPreferenceStorage","listen","event","detail","startListening","args","hasAttribute","logger","msg","map","part","JSON","stringify","join","value","listenMessage","eventFilter","origin","length","some","originPattern","patternMatchesOrigin","async","method","payload","response","responseData","setPreferences","getPreferences","resetPreferences","Error","render","html","ref","static","type","Boolean","reflect","String","attribute","converter","fromAttribute","split","trim","toAttribute","css","unsafeCSS","window","customElements","get","define"],"mappings":"kpBAeO,MAAMA,UAAyBC,EAAAA,EA+BpC,WAAAC,GAEEC,QAhCFC,EAAAA,KAAAA,GACUC,EAAAA,KAAAA,EAAAA,EAAaA,cAAC,mBA+BtBF,KAAKG,aACLH,KAAKI,MAAQJ,KAAKI,QAAS,EAC3BJ,KAAKK,UAAYC,MACjBN,KAAKO,eAAiBP,KAAKO,gBAAkB,GAC7CP,KAAKQ,MACN,CAQD,UAAMA,eACJR,KAAKS,IAAI,sCACJR,OAAAA,UAAiBS,6DACtBV,KAAKS,IAAI,yBAETT,EAAAA,KAAAA,GAAcW,QAAOC,IACdH,KAAAA,IAAI,4BAA6BG,EAAMC,OAAO,IAGrDb,KAAKS,IAAI,0CACTT,KAAKc,gBACN,CAOD,GAAAL,IAAOM,GACDf,GAAAA,KAAKgB,aAAa,SAAU,CACzBC,EAAAA,KAAAA,GAALjB,aAAgBe,GAEhB,MAAMG,EAAMH,EAAKI,KAAIC,GAAwB,iBAATA,EAAoBA,EAAOC,KAAKC,UAAUF,KAAOG,KAAK,KACtFvB,KAAKK,UAAUmB,QACjBxB,KAAKK,UAAUmB,MAAMA,OAAS,GAAkC,KAA/BxB,KAAKK,UAAUmB,MAAMA,MAAe,GAAK,OAAON,IAEpF,CACF,CAYD,oBAAAJ,GACEd,KAAKS,IAAI,0BAEHgB,cAAEA,SAAwBX,iBAAe,CAC7CY,YAAad,IACLe,MAAAA,OAAEA,GAAWf,EACnB,OAAOZ,KAAKO,eAAeqB,OAAS,GAAK5B,KAAKO,eAAesB,MAAKC,GAAiBC,EAAAA,qBAAqBD,EAAeH,IAAO,IAIlI3B,KAAKS,IAAI,uCAETT,KAAKG,WAAAA,EACLH,KAAKS,IAAI,aAAcT,KAAKG,WAE5BsB,GAAcO,MAAOC,EAAQC,EAASC,KAChCC,IAAAA,EAEJ,OAAQH,GACN,IAAK,iBACHG,QAAqBpC,EAAAA,KAAAA,GAAcqC,eAAeH,GAClD,MAEF,IAAK,iBACHE,QAAqBpC,EAAKC,KAAAA,GAASqC,iBACnC,MAEF,IAAK,mBACHF,QAAqBpC,EAAAA,KAAAA,GAAcuC,mBACnC,MAEF,IAAK,OACHH,EAAe,OACf,MAEF,QACEpC,MAAAA,KAAKS,IAAI,mBAAmBwB,cAAoBC,GAC1C,IAAIM,MAAM,mBAAmBP,KAGnCC,EACFlC,KAAKS,IAAI,YAAYwB,2BAAiCC,EAAS,YAAaE,GAE5EpC,KAAKS,IAAI,YAAYwB,cAAoB,YAAaG,GAGxDD,EAASC,EAAa,GAEzB,CAOD,MAAAK,GACE,OAAOC,EAAAA,CAGqBC,oFAAAA,EAAAA,EAAI3C,KAAKK,8BAEtC,EAjJDJ,EAAAA,IAAAA,QACAgB,EAAAA,IAAAA,QAEA2B,EAJW/C,eAIS,CAClBM,UAAW,CACT0C,KAAMC,SAER1C,MAAO,CACLyC,KAAMC,QACNC,SAAS,GAEXxC,eAAgB,CACdsC,KAAMG,OACNC,UAAW,kBACXC,UAAW,CACTC,cAAgB3B,GAAUA,EAAM4B,MAAM,OAAOjC,KAAIQ,GAAUA,EAAO0B,SAClEC,YAAc9B,GAAUA,EAAMD,KAAK,SAKzCqB,EAtBW/C,EAsBX+C,SAAgB,CACdW,EAAAA,IAAMC,EAAAA,opBA8HLC,OAAOC,eAAeC,IAAI,uBAC7BF,OAAOC,eAAeE,OAAO,qBAAsB/D"}