{"version":3,"file":"bib-consent-server.cjs","sources":["../src/components/bib-consent/bib-consent-server.js"],"sourcesContent":["import { css, html, LitElement, unsafeCSS } from 'lit'\r\nimport { startListening } from 'postmessage-promise'\r\nimport { createRef, ref } from 'lit/directives/ref.js'\r\nimport { patternMatchesOrigin } from '@/utils/url.js'\r\nimport { loggerFactory } from '@/utils/logger.js'\r\nimport getConsentStorage from './ConsentStorage.js'\r\nimport styles from './bib-consent-server.scss?inline'\r\n\r\n/**\r\n * @class BibConsentServer\r\n * @extends LitElement\r\n * @description A custom element that manages consent preferences for the BIB application.\r\n * It handles storage of preferences, listens for postMessage events, and provides methods\r\n * for setting, getting, and resetting user consent preferences.\r\n *\r\n * It includes the following functionality:\r\n * - Stores consent preferences using the `getConsentStorage` function\r\n * - Listens for storage updates and logs them\r\n * - Listens for postMessage events from allowed origins\r\n * - Provides methods for setting, getting, and resetting user consent preferences\r\n *\r\n * @class BibConsentServer\r\n * @extends LitElement\r\n * @property {Boolean} connected - Indicates whether the component is connected to the DOM. Default: `false`.\r\n * @property {Boolean} debug - Indicates whether debug mode is enabled. Default: `false`.\r\n * @property {String} allowedOrigins - The allowed origins for postMessage events.\r\n * @property {String} allowed-origins - The allowed origins for postMessage events (attribute).\r\n */\r\nexport class BibConsentServer extends LitElement {\r\n  #storage\r\n  #logger = loggerFactory('consent-server')\r\n\r\n  static properties = {\r\n    connected: {\r\n      type: Boolean,\r\n    },\r\n    debug: {\r\n      type: Boolean,\r\n      reflect: true\r\n    },\r\n    allowedOrigins: {\r\n      type: String,\r\n      attribute: 'allowed-origins',\r\n      converter: {\r\n        fromAttribute: (value) => value.split(/\\s+/).map(origin => origin.trim()),\r\n        toAttribute: (value) => value.join(' ')\r\n      }\r\n    }\r\n  }\r\n\r\n  static styles = [\r\n    css`${unsafeCSS(styles)}`\r\n  ]\r\n\r\n  /**\r\n   * Creates an instance of BibConsentServer.\r\n   * @constructor\r\n   * @description Initializes the BibConsentServer with default values and starts the initialization process.\r\n   */\r\n  constructor() {\r\n    super()\r\n    this.connected = false\r\n    this.debug = this.debug || false\r\n    this.loggerRef = createRef()\r\n    this.allowedOrigins = this.allowedOrigins || [] // Default: none\r\n    this.init()\r\n  }\r\n\r\n  /**\r\n   * Initializes the BibConsentServer instance.\r\n   * @async\r\n   * @description Sets up preference storage, starts listening for storage updates,\r\n   * and begins listening for postMessage events from allowed origins.\r\n   */\r\n  async init() {\r\n    this.log('Initializing BibConsentServer...')\r\n    this.#storage = await getConsentStorage()\r\n\r\n    this.#storage.listen(event => {\r\n      this.log('Storage updated with data', event.detail)\r\n    })\r\n\r\n    this.log('Start listening for storage updates...')\r\n    this.startListening()\r\n  }\r\n\r\n  /**\r\n   * Logs messages when in debug mode.\r\n   * @description If debug attribute is set, logs messages to the console and updates the UI logger.\r\n   * @param {...any} args - The messages or data to log.\r\n   */\r\n  log(...args) {\r\n    if (this.hasAttribute('debug')) {\r\n      const strippedMsg = args.map(part => {\r\n        if (typeof part === 'string') {\r\n          return part.replace(/<\\/?[^>]+(>|$)/g, \"\")\r\n        }\r\n\r\n        return part\r\n      })\r\n      this.#logger(...strippedMsg)\r\n\r\n      const msg = args.map(part => typeof part === 'string' ? part : `<code class=\"value\">${JSON.stringify(part)}</code>`).join(' ')\r\n      if (this.loggerRef.value) {\r\n        const textarea = this.loggerRef.value\r\n\r\n        textarea.innerHTML += `${textarea.innerHTML === '' ? '' : '<br />'}${msg}`\r\n\r\n        // Make sure the textarea always shows last line\r\n        textarea.scrollTop = textarea.scrollHeight\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts listening for postMessage events and handles consent-related requests.\r\n   * @async\r\n   * @description Sets up a message listener for allowed origins and handles the following methods:\r\n   * - setConsentTokens: Sets the user's consent preferences in the storage.\r\n   * - getConsentTokens: Retrieves the user's current consent preferences from storage.\r\n   * - resetTokens: Resets the user's consent preferences to default values.\r\n   * - ping: Responds with \"pong\" to check if the server is responsive.\r\n   * The method also logs all incoming requests and their responses when in debug mode.\r\n   */\r\n  async startListening() {\r\n\r\n    const { listenMessage } = await startListening({\r\n      eventFilter: event => {\r\n        const { origin } = event\r\n        return this.allowedOrigins.length > 0 && this.allowedOrigins.some(originPattern => patternMatchesOrigin(originPattern, origin))\r\n      }\r\n    })\r\n\r\n    this.connected = true\r\n    this.log('Connected:', `<code class=\"value\">${this.connected}</code>`)\r\n\r\n    this.log('Listening for postMessage events...')\r\n\r\n    listenMessage(async (method, payload, response) => {\r\n      let responseData\r\n\r\n      switch (method) {\r\n        case 'setConsentTokens':\r\n          responseData = await this.#storage.setConsentTokens(payload)\r\n          break\r\n\r\n        case 'getConsentTokens':\r\n          responseData = await this.#storage.getConsentTokens()\r\n          break\r\n\r\n        case 'resetTokens':\r\n          responseData = await this.#storage.resetTokens()\r\n          break\r\n\r\n        case 'ping':\r\n          responseData = 'pong'\r\n          break\r\n\r\n        default:\r\n          this.log(`Unknown method: <code class=\"method\">${method}</code>. Payload:`, payload)\r\n          throw new Error(`Unknown method: ${method}`)\r\n      }\r\n\r\n      if (payload) {\r\n        this.log(`Method <code class=\"method\">${method}</code> called with payload:`, payload, 'response:', responseData)\r\n      } else {\r\n        this.log(`Method <code class=\"method\">${method}</code> called.`, 'response:', responseData)\r\n      }\r\n\r\n      response(responseData)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Renders the BibConsentServer element.\r\n   * @returns {TemplateResult} The HTML template for the BibConsentServer.\r\n   * @description Renders a title and a textarea for logging when in debug mode.\r\n   */\r\n  render() {\r\n    return html`\r\n      <h1>I am bib-consent-server</h1>\r\n      <div class=\"log-container\">\r\n        <div class=\"log\" ${ref(this.loggerRef)}></div>\r\n      </div>`\r\n  }\r\n}\r\n\r\nif (!window.customElements.get('bib-consent-server')) {\r\n  window.customElements.define('bib-consent-server', BibConsentServer)\r\n}\r\n"],"names":["BibConsentServer","LitElement","constructor","this","storage","loggerFactory","connected","debug","loggerRef","createRef","allowedOrigins","init","log","getConsentStorage","listen","event","detail","startListening","args","hasAttribute","strippedMsg","map","part","replace","msg","JSON","stringify","join","value","textarea","innerHTML","scrollTop","scrollHeight","listenMessage","eventFilter","origin","length","some","originPattern","patternMatchesOrigin","async","method","payload","response","responseData","setConsentTokens","getConsentTokens","resetTokens","Error","render","html","ref","logger","static","type","Boolean","reflect","String","attribute","converter","fromAttribute","split","trim","toAttribute","css","unsafeCSS","window","customElements","get","define"],"mappings":"yoBA4BO,MAAMA,UAAyBC,EAAAA,EA+BpC,WAAAC,GAEEC,QAhCFC,EAAAA,KAAAA,GACUC,EAAAA,KAAAA,EAAAA,EAAaA,cAAC,mBA+BtBF,KAAKG,WAAY,EACjBH,KAAKI,MAAQJ,KAAKI,QAAS,EAC3BJ,KAAKK,UAAYC,MACjBN,KAAKO,eAAiBP,KAAKO,gBAAkB,GAC7CP,KAAKQ,MACN,CAQD,yBACER,KAAKS,IAAI,sCACTT,iBAAsBU,6DAEtBV,EAAKC,KAAAA,GAASU,QAAOC,IACdH,KAAAA,IAAI,4BAA6BG,EAAMC,OAAO,IAGrDb,KAAKS,IAAI,0CACTT,KAAKc,gBACN,CAOD,GAAAL,IAAOM,GACDf,GAAAA,KAAKgB,aAAa,SAAU,CAC9B,MAAMC,EAAcF,EAAKG,KAAIC,GACP,iBAATA,EACFA,EAAKC,QAAQ,kBAAmB,IAGlCD,IAETnB,EAAAA,KAAAA,GAAAA,aAAgBiB,GAEhB,MAAMI,EAAMN,EAAKG,KAAIC,GAAwB,iBAATA,EAAoBA,EAAO,uBAAuBG,KAAKC,UAAUJ,cAAgBK,KAAK,KACtHxB,GAAAA,KAAKK,UAAUoB,MAAO,CAClBC,MAAAA,EAAW1B,KAAKK,UAAUoB,MAEhCC,EAASC,WAAa,GAA0B,KAAvBD,EAASC,UAAmB,GAAK,WAAWN,IAGrEK,EAASE,UAAYF,EAASG,YAC/B,CACF,CACF,CAYD,oBAAMf,SAEEgB,cAAEA,SAAwBhB,iBAAe,CAC7CiB,YAAanB,IACLoB,MAAAA,OAAEA,GAAWpB,EACnB,OAAOZ,KAAKO,eAAe0B,OAAS,GAAKjC,KAAKO,eAAe2B,MAAKC,GAAiBC,EAAAA,qBAAqBD,EAAeH,QAI3HhC,KAAKG,WAAY,EACjBH,KAAKS,IAAI,aAAc,uBAAuBT,KAAKG,oBAEnDH,KAAKS,IAAI,uCAETqB,GAAcO,MAAOC,EAAQC,EAASC,KAChCC,IAAAA,EAEJ,OAAQH,GACN,IAAK,mBACHG,QAAqBzC,EAAAA,KAAAA,GAAc0C,iBAAiBH,GACpD,MAEF,IAAK,mBACHE,QAAqBzC,UAAc2C,mBACnC,MAEF,IAAK,cACHF,QAAqBzC,EAAAA,KAAAA,GAAc4C,cACnC,MAEF,IAAK,OACHH,EAAe,OACf,MAEF,QACEzC,MAAAA,KAAKS,IAAI,wCAAwC6B,qBAA2BC,GACtE,IAAIM,MAAM,mBAAmBP,KAGnCC,EACFvC,KAAKS,IAAI,+BAA+B6B,gCAAsCC,EAAS,YAAaE,GAEpGzC,KAAKS,IAAI,+BAA+B6B,mBAAyB,YAAaG,GAGhFD,EAASC,EAAAA,GAEZ,CAOD,MAAAK,GACE,OAAOC,EAAAA,CAGgBC,+EAAAA,EAAAA,EAAIhD,KAAKK,yBAEjC,EA3JDJ,EAAAA,IAAAA,QACAgD,EAAAA,IAAAA,QAEAC,EAJWrD,EAIS,aAAA,CAClBM,UAAW,CACTgD,KAAMC,SAERhD,MAAO,CACL+C,KAAMC,QACNC,SAAAA,GAEF9C,eAAgB,CACd4C,KAAMG,OACNC,UAAW,kBACXC,UAAW,CACTC,cAAgBhC,GAAUA,EAAMiC,MAAM,OAAOxC,KAAIc,GAAUA,EAAO2B,SAClEC,YAAcnC,GAAUA,EAAMD,KAAK,SAKzC0B,EAtBWrD,EAsBK,SAAA,CACdgE,EAAAA,IAAMC,EAAAA,+uBAwILC,OAAOC,eAAeC,IAAI,uBAC7BF,OAAOC,eAAeE,OAAO,qBAAsBrE"}