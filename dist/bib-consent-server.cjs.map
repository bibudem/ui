{"version":3,"file":"bib-consent-server.cjs","sources":["../src/components/bib-consent/bib-consent-server.js"],"sourcesContent":["import { css, html, LitElement, unsafeCSS } from 'lit'\nimport { startListening } from 'postmessage-promise'\nimport { createRef, ref } from 'lit/directives/ref.js'\nimport { patternMatchesOrigin } from '@/utils/url.js'\nimport { loggerFactory } from '@/utils/logger.js'\nimport getConsentStorage from './ConsentStorage.js'\nimport styles from './bib-consent-server.scss?inline'\n\n/**\n * @class BibConsentServer\n * @extends LitElement\n * @description A custom element that manages consent preferences for the BIB application.\n * It handles storage of preferences, listens for postMessage events, and provides methods\n * for setting, getting, and resetting user consent preferences.\n *\n * It includes the following functionality:\n * - Stores consent preferences using the `getConsentStorage` function\n * - Listens for storage updates and logs them\n * - Listens for postMessage events from allowed origins\n * - Provides methods for setting, getting, and resetting user consent preferences\n *\n * @class BibConsentServer\n * @extends LitElement\n * @property {Boolean} connected - Indicates whether the component is connected to the DOM. Default: `false`.\n * @property {Boolean} debug - Indicates whether debug mode is enabled. Default: `false`.\n * @property {String} allowedOrigins - The allowed origins for postMessage events.\n * @property {String} allowed-origins - The allowed origins for postMessage events (attribute).\n */\nexport class BibConsentServer extends LitElement {\n  #storage\n  #logger = loggerFactory('bib-consent-server')\n\n  static properties = {\n    connected: {\n      type: Boolean,\n    },\n    debug: {\n      type: Boolean,\n      reflect: true\n    },\n    allowedOrigins: {\n      type: String,\n      attribute: 'allowed-origins',\n      converter: {\n        fromAttribute: (value) => value.split(/\\s+/).map(origin => origin.trim()),\n        toAttribute: (value) => value.join(' ')\n      }\n    }\n  }\n\n  static styles = [\n    css`${unsafeCSS(styles)}`\n  ]\n\n  /**\n   * Creates an instance of BibConsentServer.\n   * @constructor\n   * @description Initializes the BibConsentServer with default values and starts the initialization process.\n   */\n  constructor() {\n    super()\n    this.connected = false\n    this.debug = this.debug || false\n    this.loggerRef = createRef()\n    this.allowedOrigins = this.allowedOrigins || [] // Default: none\n    this.init()\n  }\n\n  /**\n   * Initializes the BibConsentServer instance.\n   * @async\n   * @description Sets up preference storage, starts listening for storage updates,\n   * and begins listening for postMessage events from allowed origins.\n   */\n  async init() {\n    this.#debug('Initializing BibConsentServer...')\n    this.#storage = await getConsentStorage()\n\n    this.#storage.listen(event => {\n      this.#debug('Storage updated with data', event.detail)\n    })\n\n    this.#debug('Start listening for storage updates...')\n    await this.startListening()\n    this.#debug('Initialization complete.')\n  }\n\n  /**\n   * Logs messages when in debug mode.\n   * @description If debug attribute is set, logs messages to the console and updates the UI logger.\n   * @param {...any} args - The messages or data to log.\n   */\n  #debug(...args) {\n    if (this.hasAttribute('debug')) {\n      const strippedMsg = args.map(part => {\n        if (typeof part === 'string') {\n          return part.replace(/<\\/?[^>]+(>|$)/g, \"\")\n        }\n\n        return part\n      })\n      this.#logger(...strippedMsg)\n\n      const msg = args.map(part => typeof part === 'string' ? part : `<code class=\"value\">${JSON.stringify(part)}</code>`).join(' ')\n      if (this.loggerRef.value) {\n        const textarea = this.loggerRef.value\n\n        textarea.innerHTML += `${textarea.innerHTML === '' ? '' : '<br />'}${msg}`\n\n        // Make sure the textarea always shows last line\n        textarea.scrollTop = textarea.scrollHeight\n      }\n    }\n  }\n\n  /**\n   * Starts listening for postMessage events and handles consent-related requests.\n   * @async\n   * @description Sets up a message listener for allowed origins and handles the following methods:\n   * - setConsentTokens: Sets the user's consent preferences in the storage.\n   * - getConsentTokens: Retrieves the user's current consent preferences from storage.\n   * - resetTokens: Resets the user's consent preferences to default values.\n   * - ping: Responds with \"pong\" to check if the server is responsive.\n   * The method also logs all incoming requests and their responses when in debug mode.\n   */\n  async startListening() {\n\n    const { listenMessage } = await startListening({\n      eventFilter: event => {\n        const { origin } = event\n        return this.allowedOrigins.length > 0 && this.allowedOrigins.some(originPattern => patternMatchesOrigin(originPattern, origin))\n      }\n    })\n\n    this.connected = true\n    this.#debug('Connected:', `<code class=\"value\">${this.connected}</code>`)\n\n    this.#debug('Listening for postMessage events...')\n\n    listenMessage(async (method, payload, response) => {\n      let responseData\n\n      switch (method) {\n        case 'setConsentTokens':\n          responseData = await this.#storage.setConsentTokens(payload)\n          break\n\n        case 'getConsentTokens':\n          responseData = await this.#storage.getConsentTokens()\n          break\n\n        case 'resetTokens':\n          responseData = await this.#storage.resetTokens()\n          break\n\n        case 'ping':\n          responseData = 'pong'\n          break\n\n        default:\n          this.#debug(`Unknown method: <code class=\"method\">${method}</code>. Payload:`, payload)\n          throw new Error(`Unknown method: ${method}`)\n      }\n\n      if (payload) {\n        this.#debug(`Method <code class=\"method\">${method}</code> called with payload:`, payload, 'response:', responseData)\n      } else {\n        this.#debug(`Method <code class=\"method\">${method}</code> called.`, 'response:', responseData)\n      }\n\n      response(responseData)\n    })\n  }\n\n  /**\n   * Renders the BibConsentServer element.\n   * @returns {TemplateResult} The HTML template for the BibConsentServer.\n   * @description Renders a title and a textarea for logging when in debug mode.\n   */\n  render() {\n    return html`\n      <h1>I am bib-consent-server</h1>\n      <div class=\"log-container\">\n        <div class=\"log\" ${ref(this.loggerRef)}></div>\n      </div>`\n  }\n}\n\nif (!window.customElements.get('bib-consent-server')) {\n  window.customElements.define('bib-consent-server', BibConsentServer)\n}\n"],"names":["BibConsentServer","LitElement","constructor","super","__privateAdd","this","_n_instances","storage","loggerFactory","connected","debug","loggerRef","createRef","allowedOrigins","init","getConsentStorage","listen","event","detail","startListening","listenMessage","eventFilter","origin","length","some","originPattern","patternMatchesOrigin","async","method","payload","response","responseData","setConsentTokens","getConsentTokens","resetTokens","Error","render","html","ref","logger","WeakSet","o_fn","args","hasAttribute","strippedMsg","map","part","replace","msg","JSON","stringify","join","value","textarea","innerHTML","scrollTop","scrollHeight","static","type","Boolean","reflect","String","attribute","converter","fromAttribute","split","trim","toAttribute","css","unsafeCSS","window","customElements","get","define"],"mappings":"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"}