{"version":3,"file":"bib-consent-server.cjs","sources":["../src/components/bib-consent/bib-consent-server.js"],"sourcesContent":["import { css, html, LitElement, unsafeCSS } from 'lit'\nimport { startListening } from 'postmessage-promise'\nimport { createRef, ref } from 'lit/directives/ref.js'\nimport { patternMatchesOrigin } from '@/utils/url.js'\nimport { loggerFactory } from '@/utils/logger.js'\nimport getConsentStorage from './ConsentStorage.js'\nimport styles from './bib-consent-server.scss?inline'\n\n/**\n * @class BibConsentServer\n * @extends LitElement\n * @description A custom element that manages consent preferences for the BIB application.\n * It handles storage of preferences, listens for postMessage events, and provides methods\n * for setting, getting, and resetting user consent preferences.\n */\nexport class BibConsentServer extends LitElement {\n  #storage\n  #logger = loggerFactory('consent-server')\n\n  static properties = {\n    connected: {\n      type: Boolean,\n    },\n    debug: {\n      type: Boolean,\n      reflect: true\n    },\n    allowedOrigins: {\n      type: String,\n      attribute: 'allowed-origins',\n      converter: {\n        fromAttribute: (value) => value.split(/\\s+/).map(origin => origin.trim()),\n        toAttribute: (value) => value.join(' ')\n      }\n    }\n  }\n\n  static styles = [\n    css`${unsafeCSS(styles)}`\n  ]\n\n  /**\n   * Creates an instance of BibConsentServer.\n   * @constructor\n   * @description Initializes the BibConsentServer with default values and starts the initialization process.\n   */\n  constructor() {\n    super()\n    this.connected = false\n    this.debug = this.debug || false\n    this.loggerRef = createRef()\n    this.allowedOrigins = this.allowedOrigins || [] // Default: none\n    this.init()\n  }\n\n  /**\n   * Initializes the BibConsentServer instance.\n   * @async\n   * @description Sets up preference storage, starts listening for storage updates,\n   * and begins listening for postMessage events from allowed origins.\n   */\n  async init() {\n    this.log('Initializing BibConsentServer...')\n    this.#storage = await getConsentStorage()\n    this.log('Connected to storage.')\n\n    this.#storage.listen(event => {\n      this.log('Storage updated with data', event.detail)\n    })\n\n    this.log('Start listening for storage updates...')\n    this.startListening()\n  }\n\n  /**\n   * Logs messages when in debug mode.\n   * @description If debug attribute is set, logs messages to the console and updates the UI logger.\n   * @param {...any} args - The messages or data to log.\n   */\n  log(...args) {\n    if (this.hasAttribute('debug')) {\n      const strippedMsg = args.map(part => {\n        if (typeof part === 'string') {\n          return part.replace(/<\\/?[^>]+(>|$)/g, \"\")\n        }\n\n        return part\n      })\n      this.#logger(...strippedMsg)\n\n      const msg = args.map(part => typeof part === 'string' ? part : `<code class=\"value\">${JSON.stringify(part)}</code>`).join(' ')\n      if (this.loggerRef.value) {\n        const textarea = this.loggerRef.value\n\n        textarea.innerHTML += `${textarea.innerHTML === '' ? '' : '<br />'}${msg}`\n\n        // Make sure the textarea always shows last line\n        textarea.scrollTop = textarea.scrollHeight\n      }\n    }\n  }\n\n  /**\n   * Starts listening for postMessage events and handles consent-related requests.\n   * @async\n   * @description Sets up a message listener for allowed origins and handles the following methods:\n   * - setConsentTokens: Sets the user's consent preferences in the storage.\n   * - getConsentTokens: Retrieves the user's current consent preferences from storage.\n   * - resetTokens: Resets the user's consent preferences to default values.\n   * - ping: Responds with \"pong\" to check if the server is responsive.\n   * The method also logs all incoming requests and their responses when in debug mode.\n   */\n  async startListening() {\n\n    const { listenMessage } = await startListening({\n      eventFilter: event => {\n        const { origin } = event\n        return this.allowedOrigins.length > 0 && this.allowedOrigins.some(originPattern => patternMatchesOrigin(originPattern, origin))\n      }\n    })\n\n    this.connected = true\n    this.log('Connected:', `<code class=\"value\">${this.connected}</code>`)\n\n    this.log('Listening for postMessage events...')\n\n    listenMessage(async (method, payload, response) => {\n      let responseData\n\n      switch (method) {\n        case 'setConsentTokens':\n          responseData = await this.#storage.setConsentTokens(payload)\n          break\n\n        case 'getConsentTokens':\n          responseData = await this.#storage.getConsentTokens()\n          break\n\n        case 'resetTokens':\n          responseData = await this.#storage.resetTokens()\n          break\n\n        case 'ping':\n          responseData = 'pong'\n          break\n\n        default:\n          this.log(`Unknown method: <code class=\"method\">${method}</code>. Payload:`, payload)\n          throw new Error(`Unknown method: ${method}`)\n      }\n\n      if (payload) {\n        this.log(`Method <code class=\"method\">${method}</code> called with payload:`, payload, 'response:', responseData)\n      } else {\n        this.log(`Method <code class=\"method\">${method}</code> called.`, 'response:', responseData)\n      }\n\n      response(responseData)\n    })\n  }\n\n  /**\n   * Renders the BibConsentServer element.\n   * @returns {TemplateResult} The HTML template for the BibConsentServer.\n   * @description Renders a title and a textarea for logging when in debug mode.\n   */\n  render() {\n    return html`\n      <h1>I am bib-consent-server</h1>\n      <div class=\"log-container\">\n        <div class=\"log\" ${ref(this.loggerRef)}></div>\n      </div>`\n  }\n}\n\nif (!window.customElements.get('bib-consent-server')) {\n  window.customElements.define('bib-consent-server', BibConsentServer)\n}\n"],"names":["BibConsentServer","LitElement","constructor","super","storage","loggerFactory","this","connected","debug","loggerRef","createRef","allowedOrigins","init","log","getConsentStorage","listen","event","detail","startListening","args","hasAttribute","strippedMsg","map","part","replace","logger","msg","JSON","stringify","join","value","textarea","innerHTML","scrollTop","scrollHeight","listenMessage","eventFilter","origin","length","some","originPattern","patternMatchesOrigin","async","method","payload","response","responseData","setConsentTokens","getConsentTokens","resetTokens","Error","render","html","ref","static","type","Boolean","reflect","String","attribute","converter","fromAttribute","split","trim","toAttribute","css","unsafeCSS","window","customElements","get","define"],"mappings":"yoBAeO,MAAMA,UAAyBC,EAAAA,EA+BpC,WAAAC,GACEC,QA/BFC,EAAAA,KAAAA,GACUC,EAAAA,KAAAA,EAAAA,EAAaA,cAAC,mBA+BtBC,KAAKC,WAAAA,EACLD,KAAKE,MAAQF,KAAKE,UAClBF,KAAKG,UAAYC,MACjBJ,KAAKK,eAAiBL,KAAKK,gBAAkB,GAC7CL,KAAKM,MACN,CAQD,UAAAA,eACEN,KAAKO,IAAI,sCACTP,OAAAA,UAAsBQ,6DACtBR,KAAKO,IAAI,yBAETP,EAAAA,QAAcS,QAAOC,IACdH,KAAAA,IAAI,4BAA6BG,EAAMC,OAAO,IAGrDX,KAAKO,IAAI,0CACTP,KAAKY,gBACN,CAOD,GAAAL,IAAOM,GACDb,GAAAA,KAAKc,aAAa,SAAU,CAC9B,MAAMC,EAAcF,EAAKG,KAAIC,GACP,iBAATA,EACFA,EAAKC,QAAQ,kBAAmB,IAGlCD,IAEJE,EAAAA,KAAAA,GAALnB,aAAgBe,GAEhB,MAAMK,EAAMP,EAAKG,KAAIC,GAAwB,iBAATA,EAAoBA,EAAO,uBAAuBI,KAAKC,UAAUL,cAAgBM,KAAK,KACtHvB,GAAAA,KAAKG,UAAUqB,MAAO,CAClBC,MAAAA,EAAWzB,KAAKG,UAAUqB,MAEhCC,EAASC,WAAa,GAA0B,KAAvBD,EAASC,UAAmB,GAAK,WAAWN,IAGrEK,EAASE,UAAYF,EAASG,YAC/B,CACF,CACF,CAYD,uBAEE,MAAMC,cAAEA,SAAwBjB,iBAAe,CAC7CkB,YAAapB,UACLqB,OAAEA,GAAWrB,EACnB,OAAOV,KAAKK,eAAe2B,OAAS,GAAKhC,KAAKK,eAAe4B,MAAKC,GAAiBC,EAAAA,qBAAqBD,EAAeH,IAAO,IAIlI/B,KAAKC,WAAAA,EACLD,KAAKO,IAAI,aAAc,uBAAuBP,KAAKC,oBAEnDD,KAAKO,IAAI,uCAETsB,GAAcO,MAAOC,EAAQC,EAASC,KAChCC,IAAAA,EAEJ,OAAQH,GACN,IAAK,mBACHG,QAAqBxC,EAAAA,KAAAA,GAAcyC,iBAAiBH,GACpD,MAEF,IAAK,mBACHE,QAAqBxC,UAAc0C,mBACnC,MAEF,IAAK,cACHF,QAAqBxC,EAAAA,KAAAA,GAAc2C,cACnC,MAEF,IAAK,OACHH,EAAe,OACf,MAEF,QACExC,MAAAA,KAAKO,IAAI,wCAAwC8B,qBAA2BC,GACtE,IAAIM,MAAM,mBAAmBP,KAGnCC,EACFtC,KAAKO,IAAI,+BAA+B8B,gCAAsCC,EAAS,YAAaE,GAEpGxC,KAAKO,IAAI,+BAA+B8B,mBAAyB,YAAaG,GAGhFD,EAASC,EAAAA,GAEZ,CAOD,MAAAK,GACE,OAAOC,EAAAA,CAGgBC,+EAAAA,EAAAA,EAAI/C,KAAKG,yBAEjC,EA5JDL,EAAAA,IAAAA,QACAqB,EAAAA,IAAAA,QAEA6B,EAJWtD,EAIS,aAAA,CAClBO,UAAW,CACTgD,KAAMC,SAERhD,MAAO,CACL+C,KAAMC,QACNC,SAAS,GAEX9C,eAAgB,CACd4C,KAAMG,OACNC,UAAW,kBACXC,UAAW,CACTC,cAAgB/B,GAAUA,EAAMgC,MAAM,OAAOxC,KAAIe,GAAUA,EAAO0B,SAClEC,YAAclC,GAAUA,EAAMD,KAAK,SAKzCyB,EAtBWtD,EAsBXsD,SAAgB,CACdW,EAAAA,IAAMC,EAAAA,+uBAyILC,OAAOC,eAAeC,IAAI,uBAC7BF,OAAOC,eAAeE,OAAO,qBAAsBtE"}