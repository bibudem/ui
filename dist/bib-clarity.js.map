{"version":3,"file":"bib-clarity.js","sources":["../src/components/bib-clarity/bib-clarity.js"],"sourcesContent":["import { css, LitElement, unsafeCSS } from 'lit'\nimport Clarity from '@microsoft/clarity'\nimport { addToGlobalBib } from '@/utils/bib.js'\nimport { dispatchPublicEvent } from '@/utils/events.js'\nimport ConsentTokenV2 from './ConsentTokenV2.js'\nimport { CLARITY_PROJECT_ID, READY_STATES } from './constants.js'\nimport { EVENT_NAMES } from '../bib-consent/constants.js'\nimport styles from './bib-clarity.scss?inline'\n\nfunction toClarityConsent(granted) {\n  if (granted === null) {\n    return null\n  }\n\n  return granted === 'granted'\n}\n\n/**\n * Custom element that manages the loading and updating of Microsoft Clarity tracking code on a web page.\n *\n * @class BibClarity\n * @extends LitElement\n * @property {String} projectId - The ID of the Microsoft Clarity project.\n * @property {Boolean} hidden - Indicates whether the component is hidden.\n * @property {Boolean} #consent - Indicates whether Microsoft Clarity tracking is enabled.\n * @property {String} readyState - The current state of the BibClarity component, which can be one of the following values:\n *   - `indeterminate`: The user has not yet indicated their consent preferences.\n *   - `determinate`: The user has made their consent preferences.\n *   - `connected`: The user has granted consent and the component is connected.\n *   - `disconnected`: The user has not granted consent and the component is disconnected.\n * @property {Clarity} clarity - The Microsoft Clarity instance.\n */\nexport class BibClarity extends LitElement {\n  #consent = null\n\n  static properties = {\n    projectId: {\n      type: String,\n      attribute: 'project-id'\n    },\n    hidden: {\n      type: Boolean\n    }\n  }\n\n  static styles = [\n    css`${unsafeCSS(styles)}`\n  ]\n\n  constructor() {\n    super()\n\n    this.hidden = true\n    this.projectId = this.projectId || CLARITY_PROJECT_ID\n    this.clarity = Clarity\n    this.#init()\n  }\n\n  /**\n   * Initializes the component.\n   *\n   * @private\n   */\n  async #init() {\n    const self = this\n\n    async function consentListener(event) {\n      console.log(`<bib-clarity> recieved an event from <bib-consent>: ${event.type}`, event.detail)\n\n      const consentData = event.detail\n\n      if (consentData === null) {\n        self.setConsent(false)\n        return\n      }\n\n      const { analytics_consent, ad_consent } = consentData\n\n      if (self.readyState === READY_STATES.INDETERMINATE) {\n        self.readyState = READY_STATES.CONNECTED\n      }\n\n      self.setConsent({ analytics_consent, ad_consent })\n    }\n\n    this.clarity.init(this.projectId)\n\n    // Push the rest to the next tick\n    // Clarity should have been initialized by then\n    setTimeout(async () => {\n      const bibConsentElem = document.querySelector('bib-consent')\n\n      if (bibConsentElem === null) {\n        // Aborting\n        console.info('No <bib-consent /> element found. Turning off Clarity tracking.')\n\n        // Turn off Clarity in case it was initially on\n        self.setConsent(false)\n\n      } else {\n\n        bibConsentElem.addEventListener(EVENT_NAMES.READY, consentListener)\n        bibConsentElem.addEventListener(EVENT_NAMES.CHANGE, consentListener)\n      }\n\n    })\n  }\n\n  #dispatchPublicEvent(name, detail = null) {\n    dispatchPublicEvent(this, name, { detail })\n  }\n\n  setConsent(consent) {\n    const consentToken = new ConsentTokenV2(consent)\n\n    if (JSON.stringify(this.#consent) === JSON.stringify(consentToken)) {\n      // No change, so no need to do anything or dispatch an event\n      return\n    }\n\n    console.log(`[bib-clarity] Setting consent to %o (was ${this.#consent === null ? 'not set' : this.#consent}).`, consentToken)\n\n    this.#consent = consentToken\n    // Using v2 API for now.\n    //See: https://learn.microsoft.com/en-us/clarity/setup-and-installation/clarity-consent-api-v2\n    // this.clarity.consent('consent', granted)\n    this.clarity.consent('consentv2', consentToken)\n    this.#dispatchPublicEvent(EVENT_NAMES.CHANGE, { detail: consentToken })\n  }\n}\n\nif (!window.customElements.get('bib-clarity')) {\n  window.customElements.define('bib-clarity', BibClarity)\n}\n\naddToGlobalBib('clarity', {})"],"names":["BibClarity","LitElement","consent","super","this","hidden","projectId","CLARITY_PROJECT_ID","clarity","Clarity","consentToken","ConsentTokenV2","JSON","stringify","console","log","dispatchPublicEvent","EVENT_NAMES","CHANGE","detail","window","init","self","async","consentListener","event","type","consentData","setConsent","analytics_consent","ad_consent","readyState","READY_STATES","INDETERMINATE","CONNECTED","setTimeout","bibConsentElem","document","querySelector","info","addEventListener","READY","name","n","static","String","attribute","Boolean","css","unsafeCSS","styles","customElements","get","define","addToGlobalBib"],"mappings":";;;;;;;;;;;;;;;;;;;AAgCO,MAAMA,UAAmBC,EAC9BC;AAAAA,EAgBA;AACEC,UAEAC;AApBG;AACLF,2BAAW;AAmBTE,SAAKC,SAAS,MACdD,KAAKE,YAAYF,KAAKE,aAAaC,GACnCH,KAAKI,UAAUC,GACfL,0CAAAA;AAAAA,EACD;AAAA,EAwDD,WAAWF,IACT;AAAA,UAAMQ,KAAe,IAAIC,EAAeT;AAEpCU,SAAKC,UAAUT,sBAAmBQ,MAAAA,KAAKC,UAAUH,EAKrDI,MAAAA,QAAQC,IAAI,4CAA8D,SAAlBX,yBAAyB,YAAYA,sBAAmBM,MAAAA,EAAAA,GAEhHN,mBAAKF,IAAWQ,KAIhBN,KAAKI,QAAQN,QAAQ,aAAaQ,KAClCN,sBAAKY,oBAALZ,WAA0Ba,EAAYC,QAAQ,EAAEC,QAAQT,GAAAA;AAAAA,EACzD;AAGEU;AAlGHlB;AADK;OA+BCmB,iBACJ;AAAA,QAAMC,KAAOlB;AAEbmB,iBAAeC,GAAgBC,IAC7BX;AAAAA,YAAQC,IAAI,uDAAuDU,GAAMC,IAAQD,IAAAA,GAAMN,MAEvF;AAAA,UAAMQ,KAAcF,GAAMN;AAE1B,QAAoB,SAAhBQ,GAEF,aADAL,GAAKM,WAAAA,KAIP;AAAA,UAAA,EAAMC,mBAAEA,IAAiBC,YAAEA,GAAeH,IAAAA;AAEtCL,IAAAA,GAAKS,eAAeC,EAAaC,kBACnCX,GAAKS,aAAaC,EAAaE,YAGjCZ,GAAKM,WAAW,EAAEC,mBAAmBC,IAAAA,YAAAA,GAAAA,CAAAA;AAAAA,EACtC;AAED1B,OAAKI,QAAQa,KAAKjB,KAAKE,SAAAA,GAIvB6B,WAAWZ,YACT;AAAA,UAAMa,KAAiBC,SAASC,cAAc;AAEvB,aAAnBF,MAEFtB,QAAQyB,KAAK,iEAAA,GAGbjB,GAAKM,WAAAA,KAILQ,MAAAA,GAAeI,iBAAiBvB,EAAYwB,OAAOjB,KACnDY,GAAeI,iBAAiBvB,EAAYC,QAAQM,EAAAA;AAAAA,EACrD,CAGJ;AAAA;AAED,OAAAR,SAAqB0B,IAAMvB,KAAS,MAAA;AAClCH,IAAoBZ,MAAMsC,IAAM,EAAEvB,QACnCwB,GAAA,CAAA;AAAA;AA3EDC,cAHW5C,GAGX4C,cAAoB,EAClBtC,WAAW,EACToB,MAAMmB,QACNC,WAAW,gBAEbzC,QAAQ,EACNqB,MAAMqB,QAIVH,EAAAA;AAAAA,cAbW5C,GAaX4C,UAAgB,CACdI,IAAMC,EAAUC,CAGlB,CAAA,EAAA;AAkFG9B,OAAO+B,eAAeC,IAAI,aAAA,KAC7BhC,OAAO+B,eAAeE,OAAO,eAAerD,CAG9CsD,GAAAA,EAAe,WAAW,CAAE;"}