{"version":3,"file":"bib-clarity.js","sources":["../node_modules/@microsoft/clarity/index.js","../node_modules/@microsoft/clarity/src/utils.js","../src/components/bib-clarity/bib-clarity.js"],"sourcesContent":["import { injectScript } from \"./src/utils\"\n\nconst Clarity = {\n    init(projectId) {\n        injectScript(projectId, 'clarity-script');\n    },\n\n    setTag(key, value) {\n        window.clarity('set', key, value);\n    },\n\n    identify(customerId, customSessionId, customPageId, friendlyName) {\n        window.clarity('identify', customerId, customSessionId, customPageId, friendlyName);\n    },\n\n    consent(consent = true) {\n        window.clarity('consent', consent);\n    },\n\n    upgrade(reason) {\n        window.clarity('upgrade', reason);\n    },\n\n    event(eventName) {\n        window.clarity('event', eventName);\n    },\n};\n\nexport default Clarity;","export function injectScript(projectId){\r\n  try{\r\n      (function (c, l, a, r, i, t, y) {\r\n          if(l.getElementById(\"clarity-script\")){\r\n            return;\r\n          }\r\n          c[a] = c[a] ||\r\n            function () {\r\n              (c[a].q = c[a].q || []).push(arguments);\r\n            };\r\n          t = l.createElement(r);\r\n          t.async = 1;\r\n          t.src = \"https://www.clarity.ms/tag/\" + i + \"?ref=npm\";\r\n          t.id = \"clarity-script\"\r\n          y = l.getElementsByTagName(r)[0];\r\n          y.parentNode.insertBefore(t, y);\r\n        })(window, document, \"clarity\", \"script\", projectId);\r\n      return;\r\n  }catch(error){\r\n      return;\r\n  }\r\n};","import { css, LitElement, unsafeCSS } from 'lit'\r\nimport Clarity from '@microsoft/clarity'\r\nimport { addToGlobalBib } from '@/utils/bib.js'\r\nimport { dispatchPublicEvent } from '@/utils/events.js'\r\nimport styles from './bib-clarity.scss?inline'\r\nimport { CLARITY_PROJECT_ID } from './constants.js'\r\nimport { EVENT_NAMES } from '../bib-consent/constants.js'\r\n\r\nfunction toClarityConsent(granted) {\r\n  if (granted === null) {\r\n    return null\r\n  }\r\n\r\n  return granted === 'granted'\r\n}\r\n\r\n/**\r\n * Custom element that manages the loading and updating of Microsoft Clarity tracking code on a web page.\r\n *\r\n * @class BibClarity\r\n * @extends LitElement\r\n */\r\nexport class BibClarity extends LitElement {\r\n  #consent = null\r\n\r\n  static properties = {\r\n    projectId: {\r\n      type: String,\r\n      attribute: 'project-id'\r\n    },\r\n    hidden: {\r\n      type: Boolean\r\n    }\r\n  }\r\n\r\n  static styles = [\r\n    css`${unsafeCSS(styles)}`\r\n  ]\r\n\r\n  constructor() {\r\n    super()\r\n\r\n    this.hidden = true\r\n    this.projectId = this.projectId || CLARITY_PROJECT_ID\r\n    this.clarity = Clarity\r\n    this.#init()\r\n  }\r\n\r\n  async #init() {\r\n    const self = this\r\n    const projectId = this.projectId\r\n\r\n    async function consentListener(event) {\r\n      console.log(`<bib-clarity> recieved an event from <bib-consent>: ${event.type}`, event.detail)\r\n\r\n      const consentData = event.detail\r\n\r\n      if (consentData === null) {\r\n        self.consent(false)\r\n        return\r\n      }\r\n\r\n      const { analytics_consent } = consentData\r\n\r\n      self.setConsent(analytics_consent === 'granted')\r\n    }\r\n\r\n    this.clarity.init(projectId)\r\n\r\n    // Push the rest to the next tick\r\n    // Clarity should have been initialized by then\r\n    setTimeout(async () => {\r\n      const bibConsentElem = document.querySelector('bib-consent')\r\n\r\n      if (bibConsentElem === null) {\r\n        // Aborting\r\n        console.info('No <bib-consent /> element found. Turning off Clarity tracking.')\r\n\r\n        // Turn off Clarity in case it was initially on\r\n        self.setConsent(false)\r\n\r\n      } else {\r\n\r\n        bibConsentElem.addEventListener(EVENT_NAMES.READY, consentListener)\r\n        bibConsentElem.addEventListener(EVENT_NAMES.CHANGE, consentListener)\r\n      }\r\n\r\n      this.#dispatchPublicEvent(EVENT_NAMES.READY)\r\n\r\n    })\r\n  }\r\n\r\n  #dispatchPublicEvent(name, detail = null) {\r\n    dispatchPublicEvent(this, name, { detail })\r\n  }\r\n\r\n  setConsent(granted) {\r\n    if (typeof granted !== 'boolean') {\r\n      throw new TypeError('The \"granted\" parameter must be a boolean')\r\n    }\r\n\r\n    if (this.#consent === granted) {\r\n      // No change, so no need to do anything or dispatch an event\r\n      return\r\n    }\r\n\r\n    console.log(`[bib-clarity] Setting consent to ${granted} (was: ${this.#consent})`)\r\n\r\n    this.#consent = granted\r\n    this.clarity.consent(granted)\r\n    this.#dispatchPublicEvent(EVENT_NAMES.CHANGE, { detail: granted })\r\n  }\r\n}\r\n\r\nif (!window.customElements.get('bib-clarity')) {\r\n  window.customElements.define('bib-clarity', BibClarity)\r\n}\r\n\r\naddToGlobalBib('clarity', {})"],"names":["Clarity","projectId","c","l","a","r","i","t","y","getElementById","q","push","arguments","createElement","async","src","id","getElementsByTagName","parentNode","insertBefore","window","document","error","key","value","clarity","customerId","customSessionId","customPageId","friendlyName","consent","reason","eventName","BibClarity","LitElement","super","this","hidden","CLARITY_PROJECT_ID","granted","TypeError","console","log","dispatchPublicEvent","EVENT_NAMES","CHANGE","detail","init","self","consentListener","event","type","consentData","analytics_consent","setConsent","setTimeout","bibConsentElem","querySelector","info","addEventListener","READY","name","static","String","attribute","Boolean","css","unsafeCSS","customElements","get","define","addToGlobalBib"],"mappings":"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","x_google_ignoreList":[0,1]}