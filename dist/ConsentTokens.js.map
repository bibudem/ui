{"version":3,"file":"ConsentTokens.js","sources":["../node_modules/lodash-es/isBoolean.js","../src/components/bib-consent/ConsentTokens.js"],"sourcesContent":["import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]';\n\n/**\n * Checks if `value` is classified as a boolean primitive or object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n * @example\n *\n * _.isBoolean(false);\n * // => true\n *\n * _.isBoolean(null);\n * // => false\n */\nfunction isBoolean(value) {\n  return value === true || value === false ||\n    (isObjectLike(value) && baseGetTag(value) == boolTag);\n}\n\nexport default isBoolean;\n","import { isBoolean, isObject } from 'lodash-es'\nimport { DEFAULT_PREFERENCES, CONSENT_STATES } from './constants.js'\n\nconst keys = Object.keys(DEFAULT_PREFERENCES)\n\nfunction throwOnInvalidValue(value, { key, acceptNull = false } = {}) {\n  if (\n    !isBoolean(value)\n    && !['granted', 'denied'].includes(value)\n    &&\n    (!acceptNull && value === null)\n  ) {\n    const message = `Invalid value${key ? ` for field \\`${key}\\`` : ''}: ${value}. Must be either boolean or one of 'granted' or 'denied'.`\n    throw new TypeError(message)\n  }\n}\n\nfunction throwOnInvalidKey(key) {\n  if (!keys.includes(key)) {\n    const message = `Invalid key: ${key}. Must be one of ${keys.reduce((str, key, i) => i === keys.length ? `${str} or ${key}` : `${str}, ${key}`)}.`\n    throw new TypeError(message)\n  }\n}\n\n/**\n * @typedef {(ConsentTokens|import('./constants.js').ConsentValues)} ConsentTokensOrTokens\n */\n\n/**\n * Represents a set of consent tokens that can be used to track user consent preferences.\n *\n * The `ConsentTokens` class provides a way to manage and interact with consent tokens, which are used to track a user's preferences for various types of data processing, such as analytics, functionality, and advertising.\n *\n * The class provides methods for setting and retrieving individual consent tokens, as well as methods for setting all consent tokens at once and resetting the consent state. It also provides a method for generating a consent state object that can be used for integrating with third-party tools, such as Google Tag Manager.\n *\n * The class uses a set of default preferences defined in the `DEFAULT_PREFERENCES` constant, and provides validation to ensure that consent token values are valid.\n */\nexport class ConsentTokens {\n\n  /**\n   * Creates a new `ConsentTokens` instance from the provided `tokens` object or value.\n   *\n   * If `tokens` is an object, the method iterates over its keys and sets the corresponding consent token values.\n   *\n   * If `tokens` is not an object, the method sets all consent token values to the provided `tokens` value.\n   *\n   * The method returns the newly created `ConsentTokens` instance.\n   *\n   * @param {ConsentTokensOrTokens} tokens - An object or value representing the consent token values to initialize the `ConsentTokens` instance with.\n   * @returns {ConsentTokens} - A new `ConsentTokens` instance initialized with the provided `tokens`.\n   */\n  static from(tokens) {\n    const consentTokens = new ConsentTokens()\n\n    if (typeof tokens !== 'undefined') {\n      if (isObject(tokens)) {\n        Object.keys(tokens).forEach(key => {\n          consentTokens.#setToken(key, tokens[key], true)\n        })\n      } else {\n        consentTokens.#setAll(tokens, true)\n      }\n    }\n\n    return consentTokens\n  }\n\n  #tokens = {\n    ...DEFAULT_PREFERENCES\n  }\n\n  #setToken(key, value, acceptNull = false) {\n    throwOnInvalidKey(key)\n    throwOnInvalidValue(value, { key, acceptNull })\n\n    this.#tokens[key] = isBoolean(value) ? value ? 'granted' : 'denied' : value\n  }\n\n  #setAll(value, acceptNull = false) {\n\n    throwOnInvalidValue(value, { acceptNull })\n\n    if (typeof value !== 'string') {\n      value = value ? 'granted' : 'denied'\n    }\n\n    Object.keys(this.#tokens).forEach(key => this.#tokens[key] = value)\n  }\n\n  constructor(tokens) {\n\n    // Defining getters and setters on the constructor function\n    // so they are enumerables\n\n    Object.defineProperties(this, {\n      analytics_consent: {\n        enumerable: true,\n        get: () => this.#tokens.analytics_consent,\n        set: value => this.#setToken('analytics_consent', value)\n      },\n      functionality_consent: {\n        enumerable: true,\n        get: () => this.#tokens.functionality_consent,\n        set: value => this.#setToken('functionality_consent', value)\n      },\n      ad_consent: {\n        enumerable: true,\n        get: () => this.#tokens.ad_consent,\n        set: value => this.#setToken('ad_consent', value)\n      }\n    })\n\n    if (typeof tokens !== 'undefined') {\n      if (isObject(tokens)) {\n        Object.keys(DEFAULT_PREFERENCES).forEach(key => {\n          if (Reflect.has(tokens, key)) {\n            this.#setToken(key, tokens[key])\n          }\n        })\n\n      } else {\n\n        this.#setAll(tokens)\n      }\n    }\n  }\n\n  isGranted(key) {\n    throwOnInvalidKey(key)\n\n    return this.#tokens[key] === CONSENT_STATES.GRANTED\n  }\n\n  isDenied(key) {\n    throwOnInvalidKey(key)\n\n    return this.#tokens[key] === CONSENT_STATES.DENIED\n  }\n\n  getState() {\n    return Object.values(this.#tokens).every(value => value !== null) ? CONSENT_STATES.DETERMINATE : CONSENT_STATES.INDETERMINATE\n  }\n\n  setAll(data) {\n    if (isObject(data)) {\n      Object.entries(data).forEach(([key, value]) => this.#setToken(key, value))\n      return\n    }\n\n    this.#setAll(data)\n  }\n\n  resetConsent() {\n    Object.keys(this.#tokens).forEach(key => this.#tokens[key] = null)\n  }\n\n  toObject() {\n    return { ...this.#tokens }\n  }\n\n  toGTM(wait_for_update = 500) {\n    if (this.getState() === CONSENT_STATES.INDETERMINATE) {\n      const nullEntries = Object.entries(this.#tokens).filter(token => token[1] === null)\n      throw new Error(`All tokens must have an explicit value. Undefined token${nullEntries.length > 1 ? 's' : ''}: ${nullEntries.map(token => token[0]).join(', ')}`)\n    }\n\n    const { analytics_consent, ad_consent } = this.#tokens\n\n    return {\n      ad_user_data: ad_consent,\n      ad_personalization: ad_consent,\n      ad_consent: ad_consent,\n      analytics_consent: analytics_consent,\n      wait_for_update\n    }\n  }\n}"],"names":["boolTag","isBoolean","value","isObjectLike","baseGetTag","keys","Object","DEFAULT_PREFERENCES","throwOnInvalidValue","key","acceptNull","includes","TypeError","throwOnInvalidKey","message","reduce","str","i","length","ConsentTokens","tokens","defineProperties","this","analytics_consent","enumerable","get","set","setToken","functionality_consent","ad_consent","isObject","forEach","Reflect","has","consentTokens","CONSENT_STATES","GRANTED","DENIED","values","every","DETERMINATE","INDETERMINATE","data","entries","setAll","wait_for_update","getState","nullEntries","filter","token","Error","map","join","ad_user_data","ad_personalization"],"mappings":"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","x_google_ignoreList":[0]}