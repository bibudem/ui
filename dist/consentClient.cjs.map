{"version":3,"file":"consentClient.cjs","sources":["../src/components/bib-consent/consentClient.js"],"sourcesContent":["import { callServer } from 'postmessage-promise'\r\nimport { stringIsUrl } from '@/utils/url.js'\r\nimport { loggerFactory } from '@/utils/logger.js'\r\nimport getConsentStorage from './ConsentStorage.js'\r\nimport { ConsentTokens } from './ConsentTokens.js'\r\nimport { getIframeServer, getServerMode } from './utils.js'\r\nimport { EVENT_NAMES, SERVER_MODE, SERVER_REQUEST_DEFAULT_TIMEOUT } from './constants.js'\r\n\r\n/**\r\n * Represents a client for managing user consent tokens, with the ability to interact with a remote server or local storage.\r\n *\r\n * The `ConsentClient` class extends the `EventTarget` class, allowing it to dispatch events related to preference updates.\r\n *\r\n * Key features:\r\n * - Initialization with options for server mode (local or remote), server URL, and event reflection.\r\n * - Ability to add hosts that will receive preference update events.\r\n * - Debugging functionality with configurable debug mode.\r\n * - Methods to set, get, and reset user tokens, with different behavior based on server mode.\r\n *\r\n * @property {string} readyState - The current state of the ConsentClient instance. Can be 'initial', 'connecting' or 'ready'.\r\n */\r\nclass ConsentClient extends EventTarget {\r\n  _server\r\n  _storage\r\n  #debugIsOn = false\r\n  #debug\r\n\r\n  constructor() {\r\n    super()\r\n    this.readyState = 'initial'\r\n    this.hosts = []\r\n  }\r\n\r\n  addHost({ host, reflectEvents }) {\r\n    this.hosts.push({ host, reflectEvents })\r\n  }\r\n\r\n  debug() {\r\n    if (this.#debugIsOn) {\r\n      this.#debug(...arguments)\r\n    }\r\n  }\r\n\r\n  dispatchEvent(event) {\r\n    super.dispatchEvent(event)\r\n    // this.hosts.forEach(({ host, reflectEvents }) => reflectEvents && host.dispatchEvent?.(event))\r\n  }\r\n\r\n  /**\r\n   * Adds an event listener to the ConsentClient instance.\r\n   *\r\n   * If the event type is `EVENT_NAMES.READY` and the `readyState` is already `'ready'`, the listener function is called immediately with the current preferences object as the event detail.\r\n   *\r\n   * Otherwise, the event listener is added using the standard `addEventListener` method.\r\n   *\r\n   * @param {string} type - The type of event to listen for.\r\n   * @param {EventListener} listener - The function to call when the event is dispatched.\r\n   * @param {EventListenerOptions} [options] - Options for the event listener.\r\n   */\r\n  addEventListener(type, listener, options) {\r\n    if (type === EVENT_NAMES.READY && this.readyState === 'ready') {\r\n      this.debug('Firing ready event immediately since readyState is already ready')\r\n      this.#fireReadyListener(listener)\r\n      return\r\n    }\r\n\r\n    super.addEventListener(type, listener, options)\r\n  }\r\n\r\n  async #fireReadyListener(listener) {\r\n    const consentTokens = await this.getConsentTokens()\r\n    const readyEvent = new CustomEvent(EVENT_NAMES.READY, { detail: consentTokens, bubbles: true, composed: true })\r\n    this.debug('Firing ready event with preferences: ', consentTokens)\r\n    listener(readyEvent)\r\n  }\r\n\r\n  /**\r\n   * Initializes the ConsentClient instance with the provided options.\r\n   *\r\n   * @param {Object} options - The initialization options.\r\n   * @param {Object} [options.host] - The host object that will receive preference update events.\r\n   * @param {string} [options.serverMode] - The server mode, either 'LOCAL' or 'REMOTE'.\r\n   * @param {string} [options.serverUrl] - The URL of the remote server.\r\n   * @param {number} [options.serverRequestTimeout=SERVER_REQUEST_DEFAULT_TIMEOUT] - The timeout for server requests in milliseconds.\r\n   * @param {boolean} [options.reflectEvents=true] - Whether to reflect preference update events to the host.\r\n   * @returns {Promise<void>} - A promise that resolves when initialization is complete.\r\n   *\r\n   * @event EVENT_NAMES.READY - Dispatched when the initial preferences data is available. The event detail contains the preferences object.\r\n   * @event EVENT_NAMES.CHANGE - Dispatched when the preferences are updated. The event detail contains the updated preferences object.\r\n   */\r\n\r\n  async init({ host, serverMode, serverUrl, serverRequestTimeout = SERVER_REQUEST_DEFAULT_TIMEOUT, reflectEvents = true }) {\r\n    this.serverRequestTimeout = serverRequestTimeout\r\n\r\n    if (host) {\r\n      this.addHost({ host, reflectEvents })\r\n    }\r\n\r\n    this.readyState = 'connecting'\r\n\r\n    if (\r\n      (\r\n        serverMode && serverMode === SERVER_MODE.LOCAL\r\n      )\r\n      ||\r\n      typeof serverUrl === 'undefined'\r\n      ||\r\n      !stringIsUrl(serverUrl)\r\n    ) {\r\n      this.serverMode = SERVER_MODE.LOCAL\r\n    } else {\r\n      this.serverUrl = new URL(serverUrl, location)\r\n\r\n      if (host.debug) {\r\n        this.serverUrl.searchParams.set('debug', '')\r\n      }\r\n\r\n      this.serverMode = await getServerMode(this)\r\n\r\n    }\r\n\r\n    this.#debugIsOn = !!host.debug\r\n\r\n    if (this.#debugIsOn) {\r\n      this.#debug = loggerFactory('consentClient', 'purple')\r\n    }\r\n\r\n    this.debug('init', `server mode: ${this.serverMode}`)\r\n\r\n    let consentTokens\r\n\r\n    if (this.serverMode === SERVER_MODE.REMOTE) {\r\n      const serverObject = getIframeServer(document.body, this.serverUrl.href)\r\n\r\n      try {\r\n        this._server = await callServer(serverObject)\r\n\r\n        this._server.listenMessage((method, data) => {\r\n          const consentTokens = ConsentTokens.from(data)\r\n          const event = new CustomEvent(EVENT_NAMES.CHANGE, { detail: consentTokens, bubbles: true, composed: true })\r\n          this.dispatchEvent(event)\r\n        })\r\n      } catch (error) {\r\n        console.error('[callServer] error: ', error)\r\n        throw error\r\n      }\r\n\r\n      consentTokens = ConsentTokens.from(await this._server.postMessage('getConsentTokens'))\r\n      this.debug('[remote] Got response from server: ', consentTokens)\r\n\r\n    } else {\r\n      this._storage = await getConsentStorage()\r\n\r\n      consentTokens = await this._storage.getConsentTokens()\r\n      this.debug('[local] Got response from storage: ', consentTokens)\r\n    }\r\n\r\n    this.debug('[local] consentTokens: ', consentTokens)\r\n\r\n    if (consentTokens !== undefined) {\r\n\r\n      // Dispatch initial data with the ready state.\r\n      this.readyState = 'ready'\r\n\r\n      this.dispatchEvent(new CustomEvent(EVENT_NAMES.READY, { detail: consentTokens, bubbles: true, composed: true }))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the user's preferences from either the local storage or the remote server, depending on the configured server mode.\r\n   *\r\n   * @returns {Promise<Object>} - A promise that resolves with the user's preferences, or rejects with an error if the operation fails.\r\n   */\r\n  async getConsentTokens() {\r\n    try {\r\n      if (this.serverMode === SERVER_MODE.LOCAL) {\r\n        return await this._storage.getConsentTokens()\r\n      } else {\r\n        return ConsentTokens.from(await this._server.postMessage('getConsentTokens'))\r\n      }\r\n    } catch (error) {\r\n      console.error('[#getConsentTokens]', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Sets the user's tokens in either the local storage or the remote server, depending on the configured server mode.\r\n  *\r\n  * @param {Object} tokens - The tokens object to be set.\r\n  * @returns {Promise} - A promise that resolves when the preferences have been set or reset, or rejects with an error if the operation fails.\r\n  */\r\n  async setConsentTokens(tokens) {\r\n    try {\r\n      let response\r\n\r\n      const consentTokens = ConsentTokens.from(tokens)\r\n\r\n      if (this.serverMode === SERVER_MODE.LOCAL) {\r\n        response = await this._storage.setConsentTokens(consentTokens)\r\n      } else {\r\n        response = await this._server.postMessage('setConsentTokens', consentTokens)\r\n      }\r\n\r\n      if (response) {\r\n        this.dispatchEvent(new CustomEvent(EVENT_NAMES.CHANGE, { detail: response, bubbles: true, composed: true }))\r\n        return response\r\n      }\r\n    } catch (error) {\r\n      console.error('[#setConsentTokens]', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resets the user's preferences by clearing the stored preferences data, either in the local storage or on the remote server, depending on the configured server mode.\r\n   *\r\n   * @returns {Promise} - A promise that resolves when the preferences have been reset, or rejects with an error if the reset operation fails.\r\n   */\r\n  async resetTokens() {\r\n    try {\r\n      if (this.serverMode === SERVER_MODE.LOCAL) {\r\n        return await this._storage.resetTokens()\r\n      } else {\r\n        await this._server.postMessage('resetTokens')\r\n      }\r\n    } catch (error) {\r\n      console.error('[#resetTokens]', error)\r\n      throw error\r\n    }\r\n  }\r\n}\r\n\r\nlet consentClient\r\n\r\n/**\r\n * Creates a new ConsentClient instance and initializes it with the provided options.\r\n *\r\n * If a ConsentClient instance already exists, it will add the provided host to the existing instance and return it.\r\n *\r\n * @param {Object} options - The options to initialize the ConsentClient with.\r\n * @returns {Promise<ConsentClient>} - A Promise that resolves to the ConsentClient instance.\r\n */\r\nexport default async function createConsentClient(options) {\r\n  if (consentClient) {\r\n    consentClient.addHost(options)\r\n\r\n    return consentClient\r\n  }\r\n\r\n  consentClient = new ConsentClient()\r\n  await consentClient.init(options)\r\n\r\n  return consentClient\r\n}"],"names":["ConsentClient","EventTarget","constructor","this","__privateAdd","_i_instances","_server","_storage","_e","debug","readyState","hosts","addHost","host","reflectEvents","push","s","debugIsOn","arguments","dispatchEvent","event","super","addEventListener","type","listener","options","EVENT_NAMES","READY","fireReadyListener","init","serverMode","serverUrl","serverRequestTimeout","SERVER_REQUEST_DEFAULT_TIMEOUT","consentTokens","SERVER_MODE","LOCAL","stringIsUrl","URL","location","searchParams","set","getServerMode","loggerFactory","REMOTE","serverObject","getIframeServer","document","body","href","callServer","listenMessage","method","data","ConsentTokens","from","CustomEvent","CHANGE","detail","bubbles","composed","error","console","postMessage","getConsentStorage","getConsentTokens","undefined","setConsentTokens","tokens","response","resetTokens","consentClient","WeakSet","readyEvent","async"],"mappings":"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"}