{"version":3,"file":"consentClient.cjs","sources":["../src/components/bib-consent/consentClient.js"],"sourcesContent":["import { callServer } from 'postmessage-promise'\nimport { stringIsUrl } from '@/utils/url.js'\nimport { loggerFactory } from '@/utils/logger.js'\nimport getConsentStorage from './ConsentStorage.js'\nimport { ConsentTokens } from './ConsentTokens.js'\nimport { getIframeServer, getServerMode } from './utils.js'\nimport { EVENT_NAMES, SERVER_MODE, SERVER_REQUEST_DEFAULT_TIMEOUT } from './constants.js'\n\n/**\n * Represents a client for managing user consent tokens, with the ability to interact with a remote server or local storage.\n *\n * The `ConsentClient` class extends the `EventTarget` class, allowing it to dispatch events related to preference updates.\n *\n * Key features:\n * - Initialization with options for server mode (local or remote), server URL, and event reflection.\n * - Ability to add hosts that will receive preference update events.\n * - Debugging functionality with configurable debug mode.\n * - Methods to set, get, and reset user tokens, with different behavior based on server mode.\n *\n * @property {string} readyState - The current state of the ConsentClient instance. Can be 'initial', 'connecting' or 'ready'.\n */\nclass ConsentClient extends EventTarget {\n  _server\n  _storage\n  #debugIsOn = false\n  #debug\n\n  constructor() {\n    super()\n    this.readyState = 'initial'\n    this.hosts = []\n  }\n\n  addHost({ host, reflectEvents }) {\n    this.hosts.push({ host, reflectEvents })\n  }\n\n  debug() {\n    if (this.#debugIsOn) {\n      this.#debug(...arguments)\n    }\n  }\n\n  dispatchEvent(event) {\n    super.dispatchEvent(event)\n    this.hosts.forEach(({ host, reflectEvents }) => reflectEvents && host.dispatchEvent?.(event))\n  }\n\n  /**\n   * Adds an event listener to the ConsentClient instance.\n   *\n   * If the event type is `EVENT_NAMES.READY` and the `readyState` is already `'ready'`, the listener function is called immediately with the current preferences object as the event detail.\n   *\n   * Otherwise, the event listener is added using the standard `addEventListener` method.\n   *\n   * @param {string} type - The type of event to listen for.\n   * @param {EventListener} listener - The function to call when the event is dispatched.\n   * @param {EventListenerOptions} [options] - Options for the event listener.\n   */\n  addEventListener(type, listener, options) {\n    if (type === EVENT_NAMES.READY && this.readyState === 'ready') {\n      this.debug('Firing ready event immediately since readyState is already ready')\n      this.#fireReadyListener(listener)\n      return\n    }\n\n    super.addEventListener(type, listener, options)\n  }\n\n  async #fireReadyListener(listener) {\n    const consentTokens = await this.getConsentTokens()\n    const readyEvent = new CustomEvent(EVENT_NAMES.READY, { detail: consentTokens })\n    this.debug('Firing ready event with preferences: ', consentTokens)\n    listener(readyEvent)\n  }\n\n  /**\n   * Initializes the ConsentClient instance with the provided options.\n   *\n   * @param {Object} options - The initialization options.\n   * @param {Object} [options.host] - The host object that will receive preference update events.\n   * @param {string} [options.serverMode] - The server mode, either 'LOCAL' or 'REMOTE'.\n   * @param {string} [options.serverUrl] - The URL of the remote server.\n   * @param {number} [options.serverRequestTimeout=SERVER_REQUEST_DEFAULT_TIMEOUT] - The timeout for server requests in milliseconds.\n   * @param {boolean} [options.reflectEvents=true] - Whether to reflect preference update events to the host.\n   * @returns {Promise<void>} - A promise that resolves when initialization is complete.\n   *\n   * @event EVENT_NAMES.READY - Dispatched when the initial preferences data is available. The event detail contains the preferences object.\n   * @event EVENT_NAMES.UPDATE - Dispatched when the preferences are updated. The event detail contains the updated preferences object.\n   */\n\n  async init({ host, serverMode, serverUrl, serverRequestTimeout = SERVER_REQUEST_DEFAULT_TIMEOUT, reflectEvents = true }) {\n    this.serverRequestTimeout = serverRequestTimeout\n\n    if (host) {\n      this.addHost({ host, reflectEvents })\n    }\n\n    this.readyState = 'connecting'\n\n    if (\n      (\n        serverMode && serverMode === SERVER_MODE.LOCAL\n      )\n      ||\n      typeof serverUrl === 'undefined'\n      ||\n      !stringIsUrl(serverUrl)\n    ) {\n      this.serverMode = SERVER_MODE.LOCAL\n    } else {\n      this.serverUrl = new URL(serverUrl, location)\n\n      if (host.debug) {\n        this.serverUrl.searchParams.set('debug', '')\n      }\n\n      this.serverMode = await getServerMode(this)\n\n    }\n\n    this.#debugIsOn = !!host.debug\n\n    if (this.#debugIsOn) {\n      this.#debug = loggerFactory('consentClient', 'purple')\n    }\n\n    this.debug('init', `server mode: ${this.serverMode}`)\n\n    let consentTokens\n\n    if (this.serverMode === SERVER_MODE.REMOTE) {\n      const serverObject = getIframeServer(document.body, this.serverUrl.href)\n\n      try {\n        this._server = await callServer(serverObject)\n\n        this._server.listenMessage((method, data) => {\n          this.debug('[remote] server.listenMessage method: ', method, 'data: ', data)\n          const consentTokens = ConsentTokens.from(data)\n          const event = new CustomEvent(EVENT_NAMES.UPDATE, { detail: consentTokens })\n          this.dispatchEvent(event)\n        })\n      } catch (error) {\n        console.error('[callServer] error: ', error)\n        throw error\n      }\n\n      consentTokens = ConsentTokens.from(await this._server.postMessage('getConsentTokens'))\n      this.debug('[remote] Got response from server: ', consentTokens)\n\n    } else {\n      this._storage = await getConsentStorage()\n\n      consentTokens = await this._storage.getConsentTokens()\n      this.debug('[local] Got response from storage: ', consentTokens)\n    }\n\n    this.debug('[local] consentTokens: ', consentTokens)\n\n    if (consentTokens !== undefined) {\n\n      // Dispatch initial data with the ready state.\n      this.readyState = 'ready'\n\n      this.debug('dispatchEvent', EVENT_NAMES.READY, consentTokens)\n      this.dispatchEvent(new CustomEvent(EVENT_NAMES.READY, { detail: consentTokens }))\n    }\n  }\n\n  /**\n   * Gets the user's preferences from either the local storage or the remote server, depending on the configured server mode.\n   *\n   * @returns {Promise<Object>} - A promise that resolves with the user's preferences, or rejects with an error if the operation fails.\n   */\n  async getConsentTokens() {\n    try {\n      if (this.serverMode === SERVER_MODE.LOCAL) {\n        return await this._storage.getConsentTokens()\n      } else {\n        return ConsentTokens.from(await this._server.postMessage('getConsentTokens'))\n      }\n    } catch (error) {\n      console.error('[#getConsentTokens]', error)\n      throw error\n    }\n  }\n\n  /**\n  * Sets the user's tokens in either the local storage or the remote server, depending on the configured server mode.\n  *\n  * @param {Object} tokens - The tokens object to be set.\n  * @returns {Promise} - A promise that resolves when the preferences have been set or reset, or rejects with an error if the operation fails.\n  */\n  async setConsentTokens(tokens) {\n    try {\n      let response\n\n      const consentTokens = ConsentTokens.from(tokens)\n\n      if (this.serverMode === SERVER_MODE.LOCAL) {\n        response = await this._storage.setConsentTokens(consentTokens)\n      } else {\n        response = await this._server.postMessage('setConsentTokens', consentTokens)\n      }\n\n      if (response) {\n        this.dispatchEvent(new CustomEvent(EVENT_NAMES.UPDATE, { detail: response }))\n        return response\n      }\n    } catch (error) {\n      console.error('[#setConsentTokens]', error)\n      throw error\n    }\n  }\n\n  /**\n   * Resets the user's preferences by clearing the stored preferences data, either in the local storage or on the remote server, depending on the configured server mode.\n   *\n   * @returns {Promise} - A promise that resolves when the preferences have been reset, or rejects with an error if the reset operation fails.\n   */\n  async resetTokens() {\n    try {\n      if (this.serverMode === SERVER_MODE.LOCAL) {\n        return await this._storage.resetTokens()\n      } else {\n        await this._server.postMessage('resetTokens')\n      }\n    } catch (error) {\n      console.error('[#resetTokens]', error)\n      throw error\n    }\n  }\n}\n\nlet consentClient\n\n/**\n * Creates a new ConsentClient instance and initializes it with the provided options.\n *\n * If a ConsentClient instance already exists, it will add the provided host to the existing instance and return it.\n *\n * @param {Object} options - The options to initialize the ConsentClient with.\n * @returns {Promise<ConsentClient>} - A Promise that resolves to the ConsentClient instance.\n */\nexport default async function createConsentClient(options) {\n  if (consentClient) {\n    consentClient.addHost(options)\n\n    return consentClient\n  }\n\n  consentClient = new ConsentClient()\n  await consentClient.init(options)\n\n  return consentClient\n}"],"names":["ConsentClient","EventTarget","constructor","super","__privateAdd","this","_n_instances","_server","_storage","debugIsOn","debug","readyState","hosts","addHost","host","reflectEvents","push","arguments","dispatchEvent","event","forEach","addEventListener","type","listener","options","EVENT_NAMES","READY","init","serverMode","serverUrl","serverRequestTimeout","SERVER_REQUEST_DEFAULT_TIMEOUT","consentTokens","SERVER_MODE","LOCAL","stringIsUrl","URL","location","searchParams","set","getServerMode","loggerFactory","REMOTE","serverObject","getIframeServer","document","body","href","callServer","listenMessage","method","data","ConsentTokens","from","CustomEvent","UPDATE","detail","error","console","postMessage","getConsentStorage","getConsentTokens","setConsentTokens","tokens","response","resetTokens","consentClient","WeakSet","s_fn","fireReadyListener","readyEvent","async"],"mappings":"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"}