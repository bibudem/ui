{"version":3,"file":"type-KOUr406I.cjs","sources":["../node_modules/boolify-string/node_modules/type-detect/lib/type.js"],"sourcesContent":["/*!\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Primary Exports\n */\n\nvar exports = module.exports = getType;\n\n/**\n * ### typeOf (obj)\n *\n * Use several different techniques to determine\n * the type of object being tested.\n *\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nvar objectTypeRegexp = /^\\[object (.*)\\]$/;\n\nfunction getType(obj) {\n  var type = Object.prototype.toString.call(obj).match(objectTypeRegexp)[1].toLowerCase();\n  // Let \"new String('')\" return 'object'\n  if (typeof Promise === 'function' && obj instanceof Promise) return 'promise';\n  // PhantomJS has type \"DOMWindow\" for null\n  if (obj === null) return 'null';\n  // PhantomJS has type \"DOMWindow\" for undefined\n  if (obj === undefined) return 'undefined';\n  return type;\n}\n\nexports.Library = Library;\n\n/**\n * ### Library\n *\n * Create a repository for custom type detection.\n *\n * ```js\n * var lib = new type.Library;\n * ```\n *\n */\n\nfunction Library() {\n  if (!(this instanceof Library)) return new Library();\n  this.tests = {};\n}\n\n/**\n * #### .of (obj)\n *\n * Expose replacement `typeof` detection to the library.\n *\n * ```js\n * if ('string' === lib.of('hello world')) {\n *   // ...\n * }\n * ```\n *\n * @param {Mixed} object to test\n * @return {String} type\n */\n\nLibrary.prototype.of = getType;\n\n/**\n * #### .define (type, test)\n *\n * Add a test to for the `.test()` assertion.\n *\n * Can be defined as a regular expression:\n *\n * ```js\n * lib.define('int', /^[0-9]+$/);\n * ```\n *\n * ... or as a function:\n *\n * ```js\n * lib.define('bln', function (obj) {\n *   if ('boolean' === lib.of(obj)) return true;\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n *   return !! ~blns.indexOf(obj);\n * });\n * ```\n *\n * @param {String} type\n * @param {RegExp|Function} test\n * @api public\n */\n\nLibrary.prototype.define = function(type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};\n\n/**\n * #### .test (obj, test)\n *\n * Assert that an object is of type. Will first\n * check natives, and if that does not pass it will\n * use the user defined custom tests.\n *\n * ```js\n * assert(lib.test('1', 'int'));\n * assert(lib.test('yes', 'bln'));\n * ```\n *\n * @param {Mixed} object\n * @param {String} type\n * @return {Boolean} result\n * @api public\n */\n\nLibrary.prototype.test = function(obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n"],"names":["exports","typeModule","getType","objectTypeRegexp","obj","type","Object","prototype","toString","call","match","toLowerCase","Promise","undefined","Library","this","tests","of","define","test","arguments","length","ReferenceError"],"mappings":"mBAUIA,EAAUC,EAAcD,QAAGE,EAa3BC,EAAmB;;;;;;;;GAEvB,SAASD,EAAQE,GACf,IAAIC,EAAOC,OAAOC,UAAUC,SAASC,KAAKL,GAAKM,MAAMP,GAAkB,GAAGQ,cAEnD,MAAA,mBAAZC,SAA0BR,aAAeQ,QAAgB,UAExD,OAARR,EAAqB,YAEbS,IAART,EAA0B,YACvBC,CACT,CAeA,SAASS,IACP,KAAMC,gBAAgBD,GAAU,OAAO,IAAIA,EAC3CC,KAAKC,MAAQ,EACf,CAhBAhB,EAAQc,QAAUA,EAiClBA,EAAQP,UAAUU,GAAKf,EA6BvBY,EAAQP,UAAUW,OAAS,SAASb,EAAMc,GACf,OAAA,IAArBC,UAAUC,OAAqBN,KAAKC,MAAMX,IAC9CU,KAAKC,MAAMX,GAAQc,EACZJ,KACT,EAoBAD,EAAQP,UAAUY,KAAO,SAASf,EAAKC,GACrC,GAAIA,IAASH,EAAQE,GAAM,OAAA,EACvBe,IAAAA,EAAOJ,KAAKC,MAAMX,GAElBc,GAAAA,GAAQ,WAAajB,EAAQiB,GACxBA,OAAAA,EAAKA,KAAKf,GACZ,GAAIe,GAAQ,aAAejB,EAAQiB,GACxC,OAAOA,EAAKf,GAEZ,MAAM,IAAIkB,eAAe,cAAgBjB,EAAO,4BAEpD","x_google_ignoreList":[0]}