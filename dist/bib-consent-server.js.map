{"version":3,"file":"bib-consent-server.js","sources":["../src/components/bib-consent/bib-consent-server.js"],"sourcesContent":["import { css, html, LitElement, unsafeCSS } from 'lit'\nimport { startListening } from 'postmessage-promise'\nimport { createRef, ref } from 'lit/directives/ref.js'\nimport { patternMatchesOrigin } from '@/utils/url.js'\nimport { loggerFactory } from '@/utils/logger.js'\nimport getPreferenceStorage from './PreferenceStorage.js'\nimport styles from './bib-consent-server.scss?inline'\n\n/**\n * @class BibConsentServer\n * @extends LitElement\n * @description A custom element that manages consent preferences for the BIB application.\n * It handles storage of preferences, listens for postMessage events, and provides methods\n * for setting, getting, and resetting user consent preferences.\n */\nexport class BibConsentServer extends LitElement {\n  #storage\n  #logger = loggerFactory('consent-server')\n\n  static properties = {\n    connected: {\n      type: Boolean,\n    },\n    debug: {\n      type: Boolean,\n      reflect: true\n    },\n    allowedOrigins: {\n      type: String,\n      attribute: 'allowed-origins',\n      converter: {\n        fromAttribute: (value) => value.split(/\\s+/).map(origin => origin.trim()),\n        toAttribute: (value) => value.join(' ')\n      }\n    }\n  }\n\n  static styles = [\n    css`${unsafeCSS(styles)}`\n  ]\n\n  /**\n   * Creates an instance of BibConsentServer.\n   * @constructor\n   * @description Initializes the BibConsentServer with default values and starts the initialization process.\n   */\n  constructor() {\n    super()\n    this.connected = false\n    this.debug = this.debug || false\n    this.loggerRef = createRef()\n    this.allowedOrigins = this.allowedOrigins || [] // Default: none\n    this.init()\n  }\n\n  /**\n   * Initializes the BibConsentServer instance.\n   * @async\n   * @description Sets up preference storage, starts listening for storage updates,\n   * and begins listening for postMessage events from allowed origins.\n   */\n  async init() {\n    this.log('Initializing BibConsentServer...')\n    this.#storage = await getPreferenceStorage()\n    this.log('Connected to storage.')\n\n    this.#storage.listen(event => {\n      this.log('Storage updated with data', event.detail)\n    })\n\n    this.log('Start listening for storage updates...')\n    this.startListening()\n  }\n\n  /**\n   * Logs messages when in debug mode.\n   * @description If debug attribute is set, logs messages to the console and updates the UI logger.\n   * @param {...any} args - The messages or data to log.\n   */\n  log(...args) {\n    if (this.hasAttribute('debug')) {\n      this.#logger(...args)\n\n      const msg = args.map(part => typeof part === 'string' ? part : JSON.stringify(part)).join(' ')\n      if (this.loggerRef.value) {\n        this.loggerRef.value.value += `${this.loggerRef.value.value === '' ? '' : '\\r'}${msg}`\n      }\n    }\n  }\n\n  /**\n   * Starts listening for postMessage events and handles consent-related requests.\n   * @async\n   * @description Sets up a message listener for allowed origins and handles the following methods:\n   * - setPreferences: Sets the user's consent preferences in the storage.\n   * - getPreferences: Retrieves the user's current consent preferences from storage.\n   * - resetPreferences: Resets the user's consent preferences to default values.\n   * - ping: Responds with \"pong\" to check if the server is responsive.\n   * The method also logs all incoming requests and their responses when in debug mode.\n   */\n  async startListening() {\n    this.log('startListening()')\n\n    const { listenMessage } = await startListening({\n      eventFilter: event => {\n        const { origin } = event\n        return this.allowedOrigins.length > 0 && this.allowedOrigins.some(originPattern => patternMatchesOrigin(originPattern, origin))\n      }\n    })\n\n    this.log('Listening for postMessage events...')\n\n    this.connected = true\n    this.log('connected:', this.connected)\n\n    listenMessage(async (method, payload, response) => {\n      let responseData\n\n      switch (method) {\n        case 'setPreferences':\n          responseData = await this.#storage.setPreferences(payload)\n          break\n\n        case 'getPreferences':\n          responseData = await this.#storage.getPreferences()\n          break\n\n        case 'resetPreferences':\n          responseData = await this.#storage.resetPreferences()\n          break\n\n        case 'ping':\n          responseData = \"pong\"\n          break\n\n        default:\n          this.log(`Unknown method: ${method}. Payload:`, payload)\n          throw new Error(`Unknown method: ${method}`)\n      }\n\n      if (payload) {\n        this.log(`Method \\`${method}\\` called with payload:`, payload, 'response:', responseData)\n      } else {\n        this.log(`Method \\`${method}\\` called.`, 'response:', responseData)\n      }\n\n      response(responseData)\n    })\n  }\n\n  /**\n   * Renders the BibConsentServer element.\n   * @returns {TemplateResult} The HTML template for the BibConsentServer.\n   * @description Renders a title and a textarea for logging when in debug mode.\n   */\n  render() {\n    return html`\n      <h1>I am bib-consent-server</h1>\n      <div class=\"log-container\">\n        <textarea class=\"log\" ${ref(this.loggerRef)}></textarea>\n      </div>`\n  }\n}\n\nif (!window.customElements.get('bib-consent-server')) {\n  window.customElements.define('bib-consent-server', BibConsentServer)\n}\n"],"names":["BibConsentServer","LitElement","super","storage","logger","loggerFactory","this","connected","debug","loggerRef","createRef","allowedOrigins","init","log","getPreferenceStorage","listen","event","detail","startListening","args","hasAttribute","msg","map","part","JSON","stringify","join","value","listenMessage","eventFilter","origin","length","some","originPattern","patternMatchesOrigin","async","method","payload","response","responseData","setPreferences","getPreferences","resetPreferences","Error","html","ref","window","static","type","Boolean","reflect","String","attribute","converter","fromAttribute","split","trim","toAttribute","css","unsafeCSS","customElements","get","define"],"mappings":"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"}