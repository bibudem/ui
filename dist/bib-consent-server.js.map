{"version":3,"file":"bib-consent-server.js","sources":["../src/components/bib-consent/bib-consent-server.js"],"sourcesContent":["import { css, html, LitElement, unsafeCSS } from 'lit'\r\nimport { startListening } from 'postmessage-promise'\r\nimport { createRef, ref } from 'lit/directives/ref.js'\r\nimport { patternMatchesOrigin } from '@/utils/url.js'\r\nimport { loggerFactory } from '@/utils/logger.js'\r\nimport getConsentStorage from './ConsentStorage.js'\r\nimport styles from './bib-consent-server.scss?inline'\r\n\r\n/**\r\n * @class BibConsentServer\r\n * @extends LitElement\r\n * @description A custom element that manages consent preferences for the BIB application.\r\n * It handles storage of preferences, listens for postMessage events, and provides methods\r\n * for setting, getting, and resetting user consent preferences.\r\n *\r\n * It includes the following functionality:\r\n * - Stores consent preferences using the `getConsentStorage` function\r\n * - Listens for storage updates and logs them\r\n * - Listens for postMessage events from allowed origins\r\n * - Provides methods for setting, getting, and resetting user consent preferences\r\n *\r\n * @class BibConsentServer\r\n * @extends LitElement\r\n * @property {Boolean} connected - Indicates whether the component is connected to the DOM. Default: `false`.\r\n * @property {Boolean} debug - Indicates whether debug mode is enabled. Default: `false`.\r\n * @property {String} allowedOrigins - The allowed origins for postMessage events.\r\n * @property {String} allowed-origins - The allowed origins for postMessage events (attribute).\r\n */\r\nexport class BibConsentServer extends LitElement {\r\n  #storage\r\n  #logger = loggerFactory('consent-server')\r\n\r\n  static properties = {\r\n    connected: {\r\n      type: Boolean,\r\n    },\r\n    debug: {\r\n      type: Boolean,\r\n      reflect: true\r\n    },\r\n    allowedOrigins: {\r\n      type: String,\r\n      attribute: 'allowed-origins',\r\n      converter: {\r\n        fromAttribute: (value) => value.split(/\\s+/).map(origin => origin.trim()),\r\n        toAttribute: (value) => value.join(' ')\r\n      }\r\n    }\r\n  }\r\n\r\n  static styles = [\r\n    css`${unsafeCSS(styles)}`\r\n  ]\r\n\r\n  /**\r\n   * Creates an instance of BibConsentServer.\r\n   * @constructor\r\n   * @description Initializes the BibConsentServer with default values and starts the initialization process.\r\n   */\r\n  constructor() {\r\n    super()\r\n    this.connected = false\r\n    this.debug = this.debug || false\r\n    this.loggerRef = createRef()\r\n    this.allowedOrigins = this.allowedOrigins || [] // Default: none\r\n    this.init()\r\n  }\r\n\r\n  /**\r\n   * Initializes the BibConsentServer instance.\r\n   * @async\r\n   * @description Sets up preference storage, starts listening for storage updates,\r\n   * and begins listening for postMessage events from allowed origins.\r\n   */\r\n  async init() {\r\n    this.log('Initializing BibConsentServer...')\r\n    this.#storage = await getConsentStorage()\r\n\r\n    this.#storage.listen(event => {\r\n      this.log('Storage updated with data', event.detail)\r\n    })\r\n\r\n    this.log('Start listening for storage updates...')\r\n    this.startListening()\r\n  }\r\n\r\n  /**\r\n   * Logs messages when in debug mode.\r\n   * @description If debug attribute is set, logs messages to the console and updates the UI logger.\r\n   * @param {...any} args - The messages or data to log.\r\n   */\r\n  log(...args) {\r\n    if (this.hasAttribute('debug')) {\r\n      const strippedMsg = args.map(part => {\r\n        if (typeof part === 'string') {\r\n          return part.replace(/<\\/?[^>]+(>|$)/g, \"\")\r\n        }\r\n\r\n        return part\r\n      })\r\n      this.#logger(...strippedMsg)\r\n\r\n      const msg = args.map(part => typeof part === 'string' ? part : `<code class=\"value\">${JSON.stringify(part)}</code>`).join(' ')\r\n      if (this.loggerRef.value) {\r\n        const textarea = this.loggerRef.value\r\n\r\n        textarea.innerHTML += `${textarea.innerHTML === '' ? '' : '<br />'}${msg}`\r\n\r\n        // Make sure the textarea always shows last line\r\n        textarea.scrollTop = textarea.scrollHeight\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts listening for postMessage events and handles consent-related requests.\r\n   * @async\r\n   * @description Sets up a message listener for allowed origins and handles the following methods:\r\n   * - setConsentTokens: Sets the user's consent preferences in the storage.\r\n   * - getConsentTokens: Retrieves the user's current consent preferences from storage.\r\n   * - resetTokens: Resets the user's consent preferences to default values.\r\n   * - ping: Responds with \"pong\" to check if the server is responsive.\r\n   * The method also logs all incoming requests and their responses when in debug mode.\r\n   */\r\n  async startListening() {\r\n\r\n    const { listenMessage } = await startListening({\r\n      eventFilter: event => {\r\n        const { origin } = event\r\n        return this.allowedOrigins.length > 0 && this.allowedOrigins.some(originPattern => patternMatchesOrigin(originPattern, origin))\r\n      }\r\n    })\r\n\r\n    this.connected = true\r\n    this.log('Connected:', `<code class=\"value\">${this.connected}</code>`)\r\n\r\n    this.log('Listening for postMessage events...')\r\n\r\n    listenMessage(async (method, payload, response) => {\r\n      let responseData\r\n\r\n      switch (method) {\r\n        case 'setConsentTokens':\r\n          responseData = await this.#storage.setConsentTokens(payload)\r\n          break\r\n\r\n        case 'getConsentTokens':\r\n          responseData = await this.#storage.getConsentTokens()\r\n          break\r\n\r\n        case 'resetTokens':\r\n          responseData = await this.#storage.resetTokens()\r\n          break\r\n\r\n        case 'ping':\r\n          responseData = 'pong'\r\n          break\r\n\r\n        default:\r\n          this.log(`Unknown method: <code class=\"method\">${method}</code>. Payload:`, payload)\r\n          throw new Error(`Unknown method: ${method}`)\r\n      }\r\n\r\n      if (payload) {\r\n        this.log(`Method <code class=\"method\">${method}</code> called with payload:`, payload, 'response:', responseData)\r\n      } else {\r\n        this.log(`Method <code class=\"method\">${method}</code> called.`, 'response:', responseData)\r\n      }\r\n\r\n      response(responseData)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Renders the BibConsentServer element.\r\n   * @returns {TemplateResult} The HTML template for the BibConsentServer.\r\n   * @description Renders a title and a textarea for logging when in debug mode.\r\n   */\r\n  render() {\r\n    return html`\r\n      <h1>I am bib-consent-server</h1>\r\n      <div class=\"log-container\">\r\n        <div class=\"log\" ${ref(this.loggerRef)}></div>\r\n      </div>`\r\n  }\r\n}\r\n\r\nif (!window.customElements.get('bib-consent-server')) {\r\n  window.customElements.define('bib-consent-server', BibConsentServer)\r\n}\r\n"],"names":["BibConsentServer","LitElement","storage","constructor","super","logger","loggerFactory","static","this","connected","debug","loggerRef","createRef","allowedOrigins","init","log","getConsentStorage","listen","event","detail","startListening","args","hasAttribute","strippedMsg","map","part","replace","msg","JSON","stringify","join","value","textarea","innerHTML","scrollTop","scrollHeight","listenMessage","eventFilter","origin","length","some","originPattern","patternMatchesOrigin","async","method","payload","response","responseData","setConsentTokens","getConsentTokens","resetTokens","Error","render","html","ref","type","Boolean","reflect","String","attribute","converter","fromAttribute","split","trim","toAttribute","css","unsafeCSS","window","customElements","get","define"],"mappings":";;;;;;;;;;;;;;;;AA4BO,MAAMA,UAAyBC,EACpCC;AAAAA,EA8BA,cAAAC;AACEC;AA/BFF;AACAG,2BAAUC,EAAc,gBAExBC;AA6BEC,SAAKC,YAAAA,OACLD,KAAKE,QAAQF,KAAKE,SAAAA,OAClBF,KAAKG,YAAYC,EAAAA,GACjBJ,KAAKK,iBAAiBL,KAAKK,kBAAkB,CAAA,GAC7CL,KAAKM,KAAAA;AAAAA,EACN;AAAA,EAQD,MAAA,OACEN;AAAAA,SAAKO,IAAI,kCACTP,GAAAA,mBAAAA,IAAsBQ,MAAAA,EAAAA,IAEtBR,mBAAKN,IAASe,OAAOC,CAAAA,OAAAA;AACnBV,WAAKO,IAAI,6BAA6BG,GAAMC,MAAAA;AAAAA,IAAO,IAGrDX,KAAKO,IAAI,wCACTP,GAAAA,KAAKY;EACN;AAAA,EAOD,OAAOC,IAAAA;AACL,QAAIb,KAAKc,aAAa,OAAA,GAAU;AAC9B,YAAMC,KAAcF,GAAKG,IAAIC,CAAAA,OACP,YAAA,OAATA,KACFA,GAAKC,QAAQ,mBAAmB,EAAA,IAGlCD,EAETjB;AAAAA,yBAAAA,IAAAA,WAAgBe,GAAAA;AAEhB,YAAMI,KAAMN,GAAKG,IAAIC,CAAAA,OAAwB,YAATA,OAAAA,KAAoBA,KAAO,uBAAuBG,KAAKC,UAAUJ,EAAAA,CAAAA,SAAAA,EAAgBK,KAAK,GAC1H;AAAA,UAAItB,KAAKG,UAAUoB,OAAO;AACxB,cAAMC,KAAWxB,KAAKG,UAAUoB;AAEhCC,QAAAA,GAASC,aAAa,GAA0B,OAAvBD,GAASC,YAAmB,KAAK,QAAWN,GAAAA,EAAAA,IAGrEK,GAASE,YAAYF,GAASG;AAAAA,MAC/B;AAAA,IACF;AAAA,EACF;AAAA,EAYD,MAAMf,iBAAAA;AAEJ,UAAMgB,EAAAA,eAAEA,GAAwBhB,IAAAA,MAAAA,EAAe,EAC7CiB,aAAanB,CAAAA;AACX,YAAMoB,EAAAA,QAAEA,GAAWpB,IAAAA;AACnB,aAAOV,KAAKK,eAAe0B,SAAS,KAAK/B,KAAKK,eAAe2B,KAAKC,CAAAA,OAAiBC,EAAqBD,IAAeH,EAAO,CAAA;AAAA,IAAA,EAAA,CAAA;AAIlI9B,SAAKC,YAAY,MACjBD,KAAKO,IAAI,cAAc,uBAAuBP,KAAKC,SAAAA,SAAAA,GAEnDD,KAAKO,IAAI,qCAAA,GAETqB,GAAcO,OAAOC,IAAQC,IAASC,OAAAA;AACpC,UAAIC;AAEJ,cAAQH,IACN;AAAA,QAAA,KAAK;AACHG,UAAAA,KAAAA,MAAqBvC,mBAAKN,IAAS8C,iBAAiBH,EAAAA;AACpD;AAAA,QAEF,KAAK;AACHE,UAAAA,KAAqBvC,MAAAA,mBAAAA,IAAcyC,iBAAAA;AACnC;AAAA,QAEF,KAAK;AACHF,UAAAA,KAAqBvC,MAAAA,mBAAAA,IAAc0C,YAAAA;AACnC;AAAA,QAEF,KAAK;AACHH,UAAAA,KAAe;AACf;AAAA,QAEF;AAEE,gBADAvC,KAAKO,IAAI,wCAAwC6B,EAAAA,qBAA2BC,EACtE,GAAA,IAAIM,MAAM,mBAAmBP,EAAAA,EAAAA;AAAAA,MAAAA;AAGnCC,MAAAA,KACFrC,KAAKO,IAAI,+BAA+B6B,EAAsCC,gCAAAA,IAAS,aAAaE,EAEpGvC,IAAAA,KAAKO,IAAI,+BAA+B6B,EAAyB,mBAAA,aAAaG,EAGhFD,GAAAA,GAASC;IAAa,CAEzB;AAAA,EAAA;AAAA,EAOD,SAAAK;AACE,WAAOC,gFAGgBC,EAAI9C,KAAKG,SAEjC,CAAA;AAAA,EAAA;AAAA;AA3JDT;AACAG;AAEAE,cAJWP,GAIXO,cAAoB,EAClBE,WAAW,EACT8C,MAAMC,QAAAA,GAER9C,OAAO,EACL6C,MAAMC,SACNC,cAEF5C,GAAAA,gBAAgB,EACd0C,MAAMG,QACNC,WAAW,mBACXC,WAAW,EACTC,eAAgB9B,CAAAA,OAAUA,GAAM+B,MAAM,KAAOtC,EAAAA,IAAIc,CAAAA,OAAUA,GAAOyB,SAClEC,aAAcjC,CAAAA,OAAUA,GAAMD,KAAK,GAKzCvB,EAAAA,EAAAA,EAAAA;AAAAA,cAtBWP,GAsBXO,UAAgB,CACd0D,IAAMC;AAwILC,OAAOC,eAAeC,IAAI,oBAC7BF,KAAAA,OAAOC,eAAeE,OAAO,sBAAsBtE;"}