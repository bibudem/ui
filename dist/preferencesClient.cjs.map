{"version":3,"file":"preferencesClient.cjs","sources":["../src/components/bib-consent/preferencesClient.js"],"sourcesContent":["import { callServer } from 'postmessage-promise'\nimport { stringIsUrl } from '@/utils/url.js'\nimport { loggerFactory } from '@/utils/logger.js'\nimport PreferenceStorage from './PreferenceStorage.js'\nimport { getIframeServer, getServerMode } from './utils.js'\nimport { EVENT_NAMES, SERVER_MODE, SERVER_REQUEST_DEFAULT_TIMEOUT } from './constants.js'\n\n/**\n * Represents a client for managing user preferences, with the ability to interact with a remote server or local storage.\n *\n * The `PreferencesClient` class extends the `EventTarget` class, allowing it to dispatch events related to preference updates.\n *\n * Key features:\n * - Initialization with options for server mode (local or remote), server URL, and event reflection.\n * - Ability to add hosts that will receive preference update events.\n * - Debugging functionality with configurable debug mode.\n * - Methods to set, get, and reset user preferences, with different behavior based on server mode.\n *\n * @property {string} readyState - The current state of the PreferencesClient instance. Can be 'initial', 'connecting' or 'ready'.\n */\nclass PreferencesClient extends EventTarget {\n  _server\n  _storage\n  #preferences\n  #debugIsOn = false\n  #debug\n\n  constructor() {\n    super()\n    this.readyState = 'initial'\n    this.hosts = []\n  }\n\n  addHost({ host, reflectEvents }) {\n    this.hosts.push({ host, reflectEvents })\n  }\n\n  debug() {\n    if (this.#debugIsOn) {\n      this.#debug(...arguments)\n    }\n  }\n\n  dispatchEvent(event) {\n    super.dispatchEvent(event)\n    this.hosts.forEach(({ host, reflectEvents }) => reflectEvents && host.dispatchEvent?.(event))\n  }\n\n  /**\n   * Adds an event listener to the PreferencesClient instance.\n   *\n   * If the event type is `EVENT_NAMES.READY` and the `readyState` is already `'ready'`, the listener function is called immediately with the current preferences object as the event detail.\n   *\n   * Otherwise, the event listener is added using the standard `addEventListener` method.\n   *\n   * @param {string} type - The type of event to listen for.\n   * @param {EventListener} listener - The function to call when the event is dispatched.\n   * @param {EventListenerOptions} [options] - Options for the event listener.\n   */\n  addEventListener(type, listener, options) {\n    if (type === EVENT_NAMES.READY && this.readyState === 'ready') {\n      this.#debug('Firing ready event immediately since readyState is already ready')\n      this.#fireReadyListener(listener)\n      return\n    }\n\n    super.addEventListener(type, listener, options)\n  }\n\n  async #fireReadyListener(listener) {\n    const preferences = await this.getPreferences()\n    const readyEvent = new CustomEvent(EVENT_NAMES.READY, { detail: preferences })\n    this.#debug('Firing ready event with preferences: ', preferences)\n    listener(readyEvent)\n  }\n\n  /**\n   * Initializes the PreferencesClient instance with the provided options.\n   *\n   * @param {Object} options - The initialization options.\n   * @param {Object} [options.host] - The host object that will receive preference update events.\n   * @param {string} [options.serverMode] - The server mode, either 'LOCAL' or 'REMOTE'.\n   * @param {string} [options.serverUrl] - The URL of the remote server.\n   * @param {number} [options.serverRequestTimeout=SERVER_REQUEST_DEFAULT_TIMEOUT] - The timeout for server requests in milliseconds.\n   * @param {boolean} [options.reflectEvents=true] - Whether to reflect preference update events to the host.\n   * @returns {Promise<void>} - A promise that resolves when initialization is complete.\n   *\n   * @event EVENT_NAMES.READY - Dispatched when the initial preferences data is available. The event detail contains the preferences object.\n   * @event EVENT_NAMES.UPDATE - Dispatched when the preferences are updated. The event detail contains the updated preferences object.\n   */\n\n  async init({ host, serverMode, serverUrl, serverRequestTimeout = SERVER_REQUEST_DEFAULT_TIMEOUT, reflectEvents = true }) {\n    this.serverRequestTimeout = serverRequestTimeout\n\n    if (host) {\n      this.addHost({ host, reflectEvents })\n    }\n\n    this.readyState = 'connecting'\n\n    if (\n      (\n        serverMode && serverMode === SERVER_MODE.LOCAL\n      )\n      ||\n      typeof serverUrl === 'undefined'\n      ||\n      !stringIsUrl(serverUrl)\n    ) {\n      this.serverMode = SERVER_MODE.LOCAL\n    } else {\n      this.serverUrl = new URL(serverUrl, location)\n\n      if (host.debug) {\n        this.serverUrl.searchParams.set('debug', '')\n      }\n\n      this.serverMode = await getServerMode(this)\n\n    }\n\n    this.#debugIsOn = Reflect.has(host, 'debug')\n\n    if (this.#debugIsOn) {\n      this.#debug = loggerFactory('preferencesClient', 'purple')\n    }\n\n    this.debug('init', `server mode: ${this.serverMode}`)\n\n    let preferences\n\n    if (this.serverMode === SERVER_MODE.REMOTE) {\n      const serverObject = getIframeServer(document.body, this.serverUrl.href)\n\n      this.#debug('[remote] callServer serverObject: ', serverObject)\n\n      this._server = await callServer(serverObject)\n        .catch(error => {\n          console.error('[callServer] error: ', error)\n          throw error\n        })\n\n      this._server.listenMessage((method, detail) => {\n        this.#debug('[remote] server.listenMessage method: ', method, 'detail: ', detail)\n        const event = new CustomEvent(EVENT_NAMES.UPDATE, { detail })\n        this.dispatchEvent(event)\n      })\n\n      preferences = await this._server.postMessage('getPreferences')\n      this.#debug('[remote] Got response from server: ', preferences)\n\n    } else {\n      this._storage = new PreferenceStorage()\n\n      await this._storage.init()\n\n      preferences = await this._storage.getPreferences()\n      this.#debug('[local] Got response from storage: ', preferences)\n    }\n\n    this.#debug('[local] preferences: ', preferences)\n\n    if (preferences !== undefined) {\n\n      // Dispatch initial data with the ready state.\n      this.readyState = 'ready'\n      this.#preferences = preferences\n\n      this.#debug('dispatchEvent', EVENT_NAMES.READY, preferences)\n      this.dispatchEvent(new CustomEvent(EVENT_NAMES.READY, { detail: preferences }))\n    }\n  }\n\n  /**\n   * Gets the user's preferences from either the local storage or the remote server, depending on the configured server mode.\n   *\n   * @returns {Promise<Object>} - A promise that resolves with the user's preferences, or rejects with an error if the operation fails.\n   */\n  async getPreferences() {\n    try {\n      if (this.serverMode === SERVER_MODE.LOCAL) {\n        return await this._storage.getPreferences()\n      } else {\n        return await this._server.postMessage('getPreferences')\n      }\n    } catch (error) {\n      console.error('[#getPreferences]', error)\n      throw error\n    }\n  }\n\n  /**\n  * Sets the user's preferences in either the local storage or the remote server, depending on the configured server mode.\n  *\n  * @param {Object|null} preferences - The preferences object to be set. If null, it will reset the user's preferences.\n  * @returns {Promise} - A promise that resolves when the preferences have been set or reset, or rejects with an error if the operation fails.\n  */\n  async setPreferences(preferences) {\n    try {\n      let response\n\n      // When there is no preferences object, this is a reset of the user's preferences, so set it to null.\n      if (typeof preferences === 'undefined') {\n        preferences = null\n      }\n\n      if (this.serverMode === SERVER_MODE.LOCAL) {\n        response = await this._storage.setPreferences(preferences)\n      } else {\n        response = await this._server.postMessage('setPreferences', preferences)\n      }\n\n      if (response) {\n        this.dispatchEvent(new CustomEvent(EVENT_NAMES.UPDATE, { detail: response }))\n        return response\n      }\n    } catch (error) {\n      console.error('[#setPreferences]', error)\n      throw error\n    }\n  }\n\n  /**\n   * Resets the user's preferences by clearing the stored preferences data, either in the local storage or on the remote server, depending on the configured server mode.\n   *\n   * @returns {Promise} - A promise that resolves when the preferences have been reset, or rejects with an error if the reset operation fails.\n   */\n  async resetPreferences() {\n    try {\n      if (this.serverMode === SERVER_MODE.LOCAL) {\n        return await this._storage.resetPreferences()\n      } else {\n        await this._server.postMessage('resetPreferences')\n      }\n    } catch (error) {\n      console.error('[#resetPreferences]', error)\n      throw error\n    }\n  }\n}\n\nlet preferencesClient\n\n/**\n * Creates a new PreferencesClient instance and initializes it with the provided options.\n *\n * If a PreferencesClient instance already exists, it will add the provided host to the existing instance and return it.\n *\n * @param {Object} options - The options to initialize the PreferencesClient with.\n * @returns {Promise<PreferencesClient>} - A Promise that resolves to the PreferencesClient instance.\n */\nexport default async function createPreferencesClient(options) {\n  if (preferencesClient) {\n    preferencesClient.addHost(options)\n\n    return preferencesClient\n  }\n\n  preferencesClient = new PreferencesClient()\n  await preferencesClient.init(options)\n\n  return preferencesClient\n}"],"names":["PreferencesClient","EventTarget","constructor","super","__privateAdd","this","_r_instances","_server","_storage","preferences","debugIsOn","debug","readyState","hosts","addHost","host","reflectEvents","push","t","arguments","dispatchEvent","event","forEach","addEventListener","type","listener","options","EVENT_NAMES","READY","init","serverMode","serverUrl","serverRequestTimeout","SERVER_REQUEST_DEFAULT_TIMEOUT","SERVER_MODE","LOCAL","stringIsUrl","URL","location","searchParams","set","getServerMode","Reflect","has","loggerFactory","REMOTE","serverObject","getIframeServer","document","body","href","callServer","catch","error","console","listenMessage","method","detail","CustomEvent","UPDATE","postMessage","PreferenceStorage","getPreferences","setPreferences","response","resetPreferences","preferencesClient","WeakSet","r_fn","fireReadyListener","readyEvent","async"],"mappings":"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"}