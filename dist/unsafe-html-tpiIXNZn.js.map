{"version":3,"file":"unsafe-html-tpiIXNZn.js","sources":["../node_modules/lit-html/development/directives/unsafe-html.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { nothing, noChange } from '../lit-html.js';\nimport { directive, Directive, PartType } from '../directive.js';\nconst HTML_RESULT = 1;\nexport class UnsafeHTMLDirective extends Directive {\n    constructor(partInfo) {\n        super(partInfo);\n        this._value = nothing;\n        if (partInfo.type !== PartType.CHILD) {\n            throw new Error(`${this.constructor.directiveName}() can only be used in child bindings`);\n        }\n    }\n    render(value) {\n        if (value === nothing || value == null) {\n            this._templateResult = undefined;\n            return (this._value = value);\n        }\n        if (value === noChange) {\n            return value;\n        }\n        if (typeof value != 'string') {\n            throw new Error(`${this.constructor.directiveName}() called with a non-string value`);\n        }\n        if (value === this._value) {\n            return this._templateResult;\n        }\n        this._value = value;\n        const strings = [value];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        strings.raw = strings;\n        // WARNING: impersonating a TemplateResult like this is extremely\n        // dangerous. Third-party directives should not do this.\n        return (this._templateResult = {\n            // Cast to a known set of integers that satisfy ResultType so that we\n            // don't have to export ResultType and possibly encourage this pattern.\n            // This property needs to remain unminified.\n            ['_$litType$']: this.constructor\n                .resultType,\n            strings,\n            values: [],\n        });\n    }\n}\nUnsafeHTMLDirective.directiveName = 'unsafeHTML';\nUnsafeHTMLDirective.resultType = HTML_RESULT;\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);\n//# sourceMappingURL=unsafe-html.js.map"],"names":["UnsafeHTMLDirective","Directive","partInfo","super","this","_value","nothing","type","PartType","CHILD","Error","constructor","directiveName","value","_templateResult","noChange","strings","raw","_$litType$","resultType","values","unsafeHTML","directive"],"mappings":";;;;;;;AAQO,MAAMA,UAA4BC,EACrC;AAAA,EAAA,YAAYC,IAGR;AAAA,QAFAC,MAAMD,EACNE,GAAAA,KAAKC,SAASC,GACVJ,GAASK,SAASC,EAASC,MAC3B,OAAM,IAAIC,MAAM,GAAGN,KAAKO,YAAYC;EAE3C;AAAA,EACD,OAAOC,IACH;AAAA,QAAIA,OAAUP,KAAoB,QAATO,GAErB,QADAT,KAAKU,0BACGV,KAAKC,SAASQ;AAE1B,QAAIA,OAAUE,EACV,QAAOF;AAEX,QAAoB,YAAA,OAATA,GACP,OAAM,IAAIH,MAAM,GAAGN,KAAKO,YAAYC,aAExC,mCAAA;AAAA,QAAIC,OAAUT,KAAKC,OACf,QAAOD,KAAKU;AAEhBV,SAAKC,SAASQ;AACd,UAAMG,KAAU,CAACH;AAKjB,WAHAG,GAAQC,MAAMD,IAGNZ,KAAKU,kBAAkB,EAI3BI,YAAgBd,KAAKO,YAChBQ,YACLH,aACAI,QAAQ,CAAA,EAAA;AAAA,EAEf;;AAELpB,EAAoBY,gBAAgB,cACpCZ,EAAoBmB,aAzCA;AAoDR,MAACE,IAAaC,EAAUtB;","x_google_ignoreList":[0]}